{"version":3,"sources":["WPTB_CutGlueTable.js","WPTB_SortableTable.js","WPTB_RecalculateIndexes.js","DataTableGenerator.js","WPTB_ResponsiveFrontend.js","WPTB_StylePass.js","wp-table-builder-frontend.js"],"names":["WPTB_CutGlueTable","cutTableHorizontally","rowBefore","table","rows","i","tableRowsIChildren","children","j","length","rowSpan","newTdRowspan","dataset","sameCellBeforeDivision","td","hasOwnProperty","wptbCell","mark","getDOMElement","document","createElement","tdTopStyle","getAttribute","setAttribute","colSpan","dataXIndex","xIndex","dataXIndexNext","parseInt","beforeTd","maxCols","querySelector","insertBefore","WPTB_RecalculateIndexes","glueTableHorizontally","tds","_toConsumableArray","getElementsByTagName","hasAttribute","dataSameCellBeforeDivision","tdsSameBeforeDivision","querySelectorAll","parentNode","classList","contains","yIndex","tdsSameBeforeDivisionJPlusChildren","k","appendChild","removeChild","cutTableVertically","col","rowChildren","rowChildrenLength","afterTd","rowSpanNewTd","colSpanOld","colSpanNewTd","tdLeftStyle","tdAnalogThisX","style","width","tdAnalogThisY","height","glueTableVertically","jFirstTdGlue","key","context","factory","exports","_typeof","module","self","global","options","arguments","undefined","this","thisObject","sortingCellMouseMov","e","type","element","target","tagName","x","offsetX","layerX","y","offsetY","layerY","xMatch","clientWidth","clientHeight","add","remove","sortingCellMouseMoveVertical","sortingCellMouseMoveHorizontal","tdMouseLeave","sortableTable","currentTarget","tableWasSorted","tableRowsBefore","tableRowsAfter","itemsPerHeader","tableRowsArr","tableLastCont","push","rowspan","rowNum","concat","map","rowsTdFirst","rowsValuesArr","tdYCoordsRowSpanPrevious","tableRowsPushed","tdsChanged","changeSortingTdsCollection","tdRowspan","textElementsValues","textElementsValuesGet","rowsTd","value","orderBy","setSortedAscDataAttr","sort","prev","next","sortOrder","unshift","indexOf","tBody","innerHTML","rowsValObj","row","trRef","tr","colspan","colNum","columnsTdFirst","columnsValuesArr","tdXCoordsColSpanPrevious","tdColspan","columnsTd","tdsColumn","difference","columnsValObj","removeCellsAttrAfterDivision","tableSM","tableStateSet","reassignElementsStyles","dataAttr","prevValue","nextValue","cell","textElements","innerText","tdIndexSpanPrev","collectionTds","collectionTdsJSpan","collectionTdsJSpanProperty","indexName","indexNameCamelCase","indexNamePerpendicularCamelCase","tdSpanProperty","tableGroupCount","tdsCollectionChanged","splice","tdSpan","tdsAll","removeAttribute","tableMaxCols","cellsStylesScheme","rowsStylesScheme","sortModeSwitcher","active","removeEventListener","sortableTableVerticalStart","sortingCellMouseMoveSwitcher","addEventListener","wptbSortableTableVertical","createTableElementsStylesScheme","sortableTableHorizontalStart","wptbSortableTableHorizontal","tableObjectChange","start","elemSelector","elements","elem","backgroundColor","window","getComputedStyle","getPropertyValue","objectKey","String","elementsStylesScheme","elemStyles","sortableTableInitialization","responsiveFront","typeFirst","typeSecond","switchMode","getDirective","directives","sizeRangeId","detail","mode","responsiveMode","modeOptions","topRowAsHeader","cellStackDirection","cellsPerRow","call","_this","s","sCMM","dataAttrSortChange","rowsLength","dataYIndexStart","trs","maxColsFull","tdsArr","jMainIter","z","columns","defaultMappings","default","button","star_rating","image","circle_rating","parseTableElementId","tableElement","activeElementIdArray","split","filter","c","RegExp","test","replace","parseElementType","activeElementKindArray","_slicedToArray","exec","OperatorType","dataManager","factoryContext","source","name","methods","calculateMaxRows","bindingOptions","getOperatorResult","operatorOptions","Object","keys","prototype","_objectSpread","results","innerOperatorResult","rowAmount","_ref","rowCustomAmount","sliceAmount","slice","method","bind","highestLowest","_ref2","_this2","compareColumn","operatorType","newValuesArray","getValues","a","b","Number","parseFloat","getColumnValueByIndex","operatorTypeOptions","highest","lowest","not","notOperation","notOperator","operatorType2","notOperatorOptions","dataRowId","getOperator","rowId","OperatorFactory","_this3","operatorTypeInstances","operatorName","optionName","DataManager","_this4","values","bindings","innerValues","innerBindings","updateValues","newValues","updateBindings","newBindings","getColumnIdFromIndex","index","_innerValues$0$values","colId","getColumnValues","columnId","customValues","valuesToUse","reduce","carry","columnValues","getRowById","getBinding","id","Array","from","getRowValuesByIndex","rowIndex","_this5","_dataManager","instance","operatorFactory","updateDataManager","currentBindings","currentValues","getTableElementBinding","elementId","binding","getRowBinding","rowElement","dataTableRowId","getRowId","valueApplyList","text","childNodes","textContent","link","anchorElement","href","_ref3","rating","maxStarCount","starCount","parsedValue","limitedRating","Math","min","roundedRating","floor","emptyStars","fullStars","star","_ref4","imageElement","imageParentAnchor","src","_ref5","percentage","percentageCount","circleSlice","clip","transform","limitedPercentage","max","text_icon_element","_ref6","textElement","addValueToTableElement","mapper","tableElementType","elementValue","_ref7","_mapper$tableElementT","mapperIndex","mapIndex","sortRowDataValues","sortOptions","rowValues","sortedValues","sortType","sortDirection","sortTarget","aVal","bVal","directionVal","batchPopulateTableElements","tableElements","rowBindings","customBindings","bindingColIdObject","column","getTableElementsFromRow","rowBindingLogicList","auto","cells","rowElements","autoBindings","cellIndex","cellElement","cellTableElements","apply","currentColumnId","elementBindings","elementType","prop","operator","populateRow","blueprintRow","clonedRow","cloneNode","rowBinding","applyRowBindings","populateBlueprint","maxRows","_getRowBinding","rowBindingMode","rowBindingOperatorObject","maxValue","colBinding","populatedRows","generateDataTable","sourceTable","clonedTable","tableBody","parsedRows","clearTable","pR","r","frontendGenerateTables","targetTable","dataTableOptions","JSON","parse","atob","wptbDataTableOptions","generatedTable","tempData","parsedData","mainWrapper","logToConsole","message","process","env","NODE_ENV","console","Error","CellObject","reference","referenceObject","mergedRenderStatus","mergedCells","getMergedRenderStatus","setMergedRenderStatus","status","addToMergedCells","mergeType","cellObj","isReference","modifications","spans","remainingSpans","cacheSpanValues","defaultVal","getSpan","spanType","fromElement","spanVal","getElement","getRemainingSpans","setRemainingSpans","createCellElement","attributeKey","attributeValue","append","glue","currentVal","setSpan","valueToApply","mc","remainingVal","remainingParentSpans","startIndex","endIndex","resetAttribute","resetAllAttributes","el","TableObject","tableEl","parsedTable","rowCache","originals","rowColors","header","even","odd","addToParsed","cellObject","parseTable","ri","ci","currentCellObject","spanRow","spanTypes","spanCol","sr","referenceCell","sc","parseRowColors","headerDatasetColor","wptbHeaderBackgroundColor","evenRowDatasetColor","wptbEvenRowBackgroundColor","oddRowDatasetColor","wptbOddRowBackgroundColor","rowsNeeded","rn","tempRow","addRow","fromOriginals","originalIndex","isArray","range","createRange","setStart","createContextualFragment","join","getRow","maxColumns","p","getCell","returnObject","getCellsAtRow","returnObj","tempCell","appendToRow","cellRowId","cellColumnId","cachedRow","appendElementToRow","appendObjectToRow","responsiveClassDefaultOptions","query","defaultClasses","bindToResize","elementObjects","tableObject","bindRebuildToResize","rebuildTables","directiveString","wptbResponsiveDirectives","addDefaultClasses","removeDefaultClasses","autoBuild","sizeRange","autoOption","tableObj","direction","staticTopRow","buildDefault","autoDirectionBuild","isRowStacked","headerBuild","allCellsByRow","rowStartIndex","rowObj","forEach","cellCount","allCellsByCol","topCells","baseCells","t","tCell","cR","headerCells","h","stackedAsColumn","rowBorderStyle","addHeaderCells","addBorder","borderTop","headerCount","ceil","currentOriginalRow","cc","currentCell","cellAddStatus","remainingItems","currentRowSpan","hc","clonedHeaderCell","rS","cS","colorIndex","calculateRangeId","val","stops","sortedStops","rangeId","rebuildTable","size","directive","responsiveEnabled","buildCallable","getBoundingClientRect","breakpoints","tabEvent","CustomEvent","dispatchEvent","o","innerSize","innerWidth","relativeWidth","globalKey","stylesheets","insertShadowRoot","shadowRootContainer","tableContainer","mainParent","parentChildren","tableIndex","upSibling","downSibling","prepareAllStylesheets","shadowRoot","borrowFromTheme","insertAdjacentElement","fontFamily","init","tableContainers","setupStylePass","checkTableEligibility","disableThemeStyles","container","maxWidth","wptbTableContainerMaxWidth","attachShadow","stylesheetsObj","root","prepareStylesheet","handler","url","linkElement","jQuery","ready","$","WPTB_DataTableGenerator","getElementsByClassName","wptb_tableReconstraction","createNewTableIndic","previewTable","tableContainerMatrix","display","wptbTableAlignment","offsetWidth","reconstraction","wptbAdaptiveTable","tableContainerWidth","previewTableWidth","tableColumns","previewTableRows","tableReconstructed","wptbPreviewTableMobile","overflow","tdWidth","wholeColumnsInContainer","dataWholeColumnInContainer","newTable","newTableTbody","infArr","className","match","tableRows","newTableLastSectionFilledColumns","valuesIsSaved","tableRowsWithoutHeader","newTableColumnsWithoutLeftHeader","countRows","tdStyles","sectionNumber","tdLeftHeader","rowFirstStyles","borderTopColor","borderColor","borderBottomColor","borderTopWidth","rowKStyles","borderWidth","background","newTableColumns","increaseRatioRows","newTableRows","jMax","jStart","newTd","rowStyles","images","minWidth","bubbles","wptb_tdDefaultWidth","wptbTableContainers","wptbTableContainer","mergingСellsHorizontally","wptbTableContainerWidth","tdStyleObj","tdBorderLeftWidth","tdBorderRightWidth","tdPaddingLeftWidth","tdPaddingRightWidth","tdPaddingCommon","tableTdBorderCommonWidth","wptbTableTdsSumMaxWidth","wptbFixedWidthSize","wptbCellsWidthAutoCount","styleElementCreate","tableTdWidthAuto","wptbTdWidthAuto","head","cssForTdsWidthAutoOld","cssForTdsWidthAuto","wptbElementHoverBgColor","wptbElementHoverTextColor","color","wptbElementHoverScale","wptbElementBgColor","wptbElementColor","resize","wptbSize","wptbSizeNew","toLowerCase","wptbButtonWrapper","WPTB_ResponsiveFrontend","tables","WPTB_SortableTable","sortingTable","WPTB_StylePass","WptbFrontendData","stylePass"],"mappings":"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","file":"wp-table-builder-frontend.js","sourcesContent":["let WPTB_CutGlueTable = {\n    cutTableHorizontally: function (rowBefore, table) {\n        if( table && table.rows[rowBefore] ) {\n            for( let i = 0; i < rowBefore; i++ ) {\n                let tableRowsIChildren = table.rows[i].children;\n\n                for( let j = 0; j < tableRowsIChildren.length; j++ ) {\n                    if ( tableRowsIChildren[j].rowSpan > 1 && tableRowsIChildren[j].rowSpan > rowBefore - i ) {\n                        let newTdRowspan = tableRowsIChildren[j].rowSpan - rowBefore + i;\n                        tableRowsIChildren[j].rowSpan = rowBefore - i;\n                        if( ! tableRowsIChildren[j].dataset.sameCellBeforeDivision ) {\n                            tableRowsIChildren[j].dataset.sameCellBeforeDivision = 'r' + i + 'c' + j;\n                        }\n\n                        let td;\n                        if(table.hasOwnProperty('wptbCell')) {\n                            td = new table.wptbCell( table.mark );\n                            td = td.getDOMElement();\n                        } else {\n                            td = document.createElement('td');\n                        }\n\n                        let tdTopStyle = tableRowsIChildren[j].getAttribute( 'style' );\n                        td.setAttribute( 'style', tdTopStyle );\n                        td.colSpan = tableRowsIChildren[j].colSpan;\n                        td.rowSpan = newTdRowspan;\n                        td.dataset.sameCellBeforeDivision = tableRowsIChildren[j].dataset.sameCellBeforeDivision;\n\n                        let dataXIndex = tableRowsIChildren[j].dataset.xIndex;\n                        let dataXIndexNext = parseInt( dataXIndex ) + parseInt( tableRowsIChildren[j].colSpan );\n                        let beforeTd;\n                        while( ! beforeTd && dataXIndexNext < table.maxCols ) {\n                            beforeTd = table.rows[rowBefore].querySelector( '[data-x-index=\"' + dataXIndexNext + '\"]' );\n                            dataXIndexNext++;\n                        }\n                        table.rows[rowBefore].insertBefore( td, beforeTd );\n\n                        WPTB_RecalculateIndexes(table);\n                    }\n                }\n            }\n        }\n    },\n    glueTableHorizontally: function (table) {\n        if(table) {\n            let tds = [...table.getElementsByTagName( 'td' )];\n            for( let i = 0; i < tds.length; i++ ) {\n                if( tds[i].hasAttribute( 'data-same-cell-before-division' ) ) {\n                    let dataSameCellBeforeDivision = tds[i].dataset.sameCellBeforeDivision;\n                    let tdsSameBeforeDivision = table.querySelectorAll( '[data-same-cell-before-division=\"' + dataSameCellBeforeDivision + '\"]' );\n                    for( let j = 0; j < tdsSameBeforeDivision.length; j++ ) {\n                        if( tdsSameBeforeDivision[j] && tdsSameBeforeDivision[j + 1] ) {\n                            if( tdsSameBeforeDivision[j].parentNode && tdsSameBeforeDivision[j + 1].parentNode &&\n                                ! tdsSameBeforeDivision[j].parentNode.classList.contains( 'wptb-row-moving' ) &&\n                                ! tdsSameBeforeDivision[j + 1].parentNode.classList.contains( 'wptb-row-moving' ) ) {\n                                if( ( tdsSameBeforeDivision[j + 1].dataset.yIndex == parseInt( tdsSameBeforeDivision[j].dataset.yIndex ) +\n                                    parseInt( tdsSameBeforeDivision[j].rowSpan ) ) ) {\n                                    tdsSameBeforeDivision[j].rowSpan += tdsSameBeforeDivision[j + 1].rowSpan;\n\n                                    let tdsSameBeforeDivisionJPlusChildren = [...tdsSameBeforeDivision[j + 1].children];\n\n                                    for( let k = 0; k < tdsSameBeforeDivisionJPlusChildren.length; k++ ) {\n                                        tdsSameBeforeDivision[j].appendChild( tdsSameBeforeDivisionJPlusChildren[k] );\n                                    }\n\n                                    let nextRow = tdsSameBeforeDivision[j + 1].parentNode;\n                                    nextRow.removeChild( tdsSameBeforeDivision[j + 1] );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            WPTB_RecalculateIndexes(table);\n        }\n    },\n    cutTableVertically: function (col, table) {\n        for ( let i = 0; i < table.rows.length; i++ ) {\n            if( col < table.maxCols ) {\n                if( col != 0 && ( ! table.rows[i].querySelector( '[data-x-index=\"' + col + '\"]' ) ) ) {\n                    let rowChildren = table.rows[i].children;\n\n                    let td,\n                        rowChildrenLength = rowChildren.length,\n                        afterTd,\n                        rowSpanNewTd,\n                        colSpanOld,\n                        colSpanNewTd;\n                    for( let j = 0; j < rowChildrenLength; j++ ) {\n                        if( rowChildren[j].colSpan > 1 && parseInt( rowChildren[j].dataset.xIndex ) < col &&\n                            parseInt( rowChildren[j].dataset.xIndex ) + parseInt( rowChildren[j].colSpan ) > col ) {\n                            if(table.hasOwnProperty('wptbCell')) {\n                                td = new table.wptbCell( table.mark );\n                                td = td.getDOMElement();\n                            } else {\n                                td = document.createElement('td');\n                            }\n\n                            rowSpanNewTd = rowChildren[j].rowSpan;\n                            colSpanOld = rowChildren[j].colSpan;\n                            rowChildren[j].colSpan = col - rowChildren[j].dataset.xIndex;\n                            colSpanNewTd = colSpanOld - rowChildren[j].colSpan;\n\n                            if( ! rowChildren[j].dataset.sameCellBeforeDivision ) {\n                                rowChildren[j].dataset.sameCellBeforeDivision = 'r' + i + 'c' + j;\n                            }\n\n                            let tdLeftStyle = rowChildren[j].getAttribute( 'style' );\n                            td.setAttribute( 'style', tdLeftStyle );\n\n                            let tdAnalogThisX = table.querySelector( '[data-x-index=\"' + col + '\"]' );\n                            if( tdAnalogThisX ) {\n                                td.style.width = tdAnalogThisX.style.width;\n                            }\n\n                            let tdAnalogThisY = table.querySelector( '[data-y-index=\"' + i + '\"]' );\n                            if( tdAnalogThisY ) {\n                                td.style.height = tdAnalogThisY.style.height;\n                            }\n                            if( rowChildren[j + 1] ) {\n                                afterTd = rowChildren[j + 1];\n                            } else {\n                                afterTd = null;\n                            }\n\n                            table.rows[i].insertBefore( td, afterTd );\n                            td.colSpan = colSpanNewTd;\n                            td.rowSpan = rowSpanNewTd;\n                            td.dataset.sameCellBeforeDivision = rowChildren[j].dataset.sameCellBeforeDivision;\n                            i += rowSpanNewTd - 1;\n                            break\n                        }\n                    }\n                }\n            }\n            WPTB_RecalculateIndexes(table);\n        }\n    },\n    glueTableVertically: function (table) {\n        if( table ) {\n            let tds = [...table.getElementsByTagName( 'td' )];\n            for( let i = 0; i < tds.length; i++ ) {\n                if( tds[i].hasAttribute( 'data-same-cell-before-division' ) ) {\n                    let dataSameCellBeforeDivision = tds[i].dataset.sameCellBeforeDivision;\n                    let tdsSameBeforeDivision = [...table.querySelectorAll( '[data-same-cell-before-division=\"' + dataSameCellBeforeDivision + '\"]' )];\n\n                    let jFirstTdGlue = null;\n                    for( let j = 0; j < tdsSameBeforeDivision.length; j++ ) {\n                        if( tdsSameBeforeDivision[j] && tdsSameBeforeDivision[j + 1] &&\n                            ! tdsSameBeforeDivision[j].classList.contains( 'wptb-column-moving' ) &&\n                            ! tdsSameBeforeDivision[j + 1].classList.contains( 'wptb-column-moving' ) ) {\n                            if( ( tdsSameBeforeDivision[j + 1].dataset.xIndex == parseInt( tdsSameBeforeDivision[j].dataset.xIndex ) +\n                                parseInt( tdsSameBeforeDivision[j].colSpan ) ) ) {\n                                if( jFirstTdGlue == null ) {\n                                    jFirstTdGlue = j;\n                                }\n                                tdsSameBeforeDivision[jFirstTdGlue].colSpan += tdsSameBeforeDivision[j + 1].colSpan;\n\n                                let tdsSameBeforeDivisionJPlusChildren = [...tdsSameBeforeDivision[j + 1].children];\n\n                                for( let k = 0; k < tdsSameBeforeDivisionJPlusChildren.length; k++ ) {\n                                    tdsSameBeforeDivision[jFirstTdGlue].appendChild( tdsSameBeforeDivisionJPlusChildren[k] );\n                                }\n\n                                let thisRow = tdsSameBeforeDivision[j + 1].parentNode;\n                                thisRow.removeChild( tdsSameBeforeDivision[j + 1] );\n                            }\n                        }\n                    }\n                }\n            }\n\n            WPTB_RecalculateIndexes(table);\n        }\n    }\n}\n","/**\n * Responsive class assignment for frontend operations.\n *\n * This file can be used as an UMD.\n */\n(function assignToGlobal(key, context, factory) {\n\tif (typeof exports === 'object' && typeof module !== 'undefined') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tcontext[key] = factory();\n\t}\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_SortableTable', self || global, () => {\n\tfunction WPTB_SortTable(options = {}) {\n\t\tconst table = (this.table = options.table);\n\t\tWPTB_RecalculateIndexes(table);\n\t\tconst thisObject = this;\n\t\tthis.itemsPerHeader = 0;\n\t\tthis.tableMaxCols = table.maxCols;\n\t\tthis.cellsStylesScheme = {};\n\t\tthis.rowsStylesScheme = {};\n\n\t\t/**\n\t\t * sets the table to sort mode\n\t\t *\n\t\t * @param {string} type\n\t\t * @param {boolean} active\n\t\t * @param {number} number\n\t\t */\n\t\tthis.sortModeSwitcher = function (type, active) {\n\t\t\tif(active) {\n\t\t\t\tthis.sortModeSwitcher('horizontal', false);\n\t\t\t\tthis.sortModeSwitcher('vertical', false);\n\t\t\t}\n\n\t\t\tif (type === 'vertical') {\n\t\t\t\tthis.table.removeEventListener('click', this.sortableTableVerticalStart, false);\n\n\t\t\t\tif (active) {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('vertical', true);\n\t\t\t\t\tthis.table.addEventListener('click', this.sortableTableVerticalStart, false);\n\t\t\t\t\tthis.table.dataset.wptbSortableTableVertical = '1';\n\t\t\t\t\tthis.createTableElementsStylesScheme('td');\n\t\t\t\t\tthis.createTableElementsStylesScheme('tr');\n\t\t\t\t} else {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('vertical', false);\n\t\t\t\t\tdelete this.table.dataset.wptbSortableTableVertical;\n\t\t\t\t}\n\t\t\t} else if (type === 'horizontal') {\n\t\t\t\tthis.table.removeEventListener('click', this.sortableTableHorizontalStart, false);\n\n\t\t\t\tif (active) {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('horizontal', true);\n\t\t\t\t\tthis.table.addEventListener('click', this.sortableTableHorizontalStart, false);\n\t\t\t\t\tthis.table.dataset.wptbSortableTableHorizontal = '1';\n\t\t\t\t\tthis.createTableElementsStylesScheme('td');\n\t\t\t\t\tthis.createTableElementsStylesScheme('tr');\n\t\t\t\t} else {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('horizontal', false);\n\t\t\t\t\tdelete this.table.dataset.wptbSortableTableHorizontal;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * changes table object for old reconstruction table type\n\t\t *\n\t\t * @param {boolean}start\n\t\t * @returns {*}\n\t\t */\n\t\tthis.tableObjectChange = function (start = true) {\n\t\t\tif(this.table.classList.contains('wptb-mobile-view-active') && start) {\n\t\t\t\tthis.table = table.parentNode.parentNode.querySelector('.wptb-preview-table-mobile');\n\t\t\t} else if(this.table.classList.contains('wptb-preview-table-mobile') && !start) {\n\t\t\t\tthis.table = table.parentNode.querySelector('.wptb-preview-table');\n\t\t\t}\n\t\t\treturn this.table;\n\t\t}\n\n\t\t/**\n\t\t * fills the object with data about cell styles for all locations (create scheme)\n\t\t *\n\t\t * @param elemSelector\n\t\t */\n\t\tthis.createTableElementsStylesScheme = function (elemSelector) {\n\t\t\tthis.tableObjectChange();\n\t\t\tlet elements = this.table.querySelectorAll(elemSelector);\n\t\t\tif(elements.length) {\n\t\t\t\tfor(let i = 0; i < elements.length; i++) {\n\t\t\t\t\tlet elem = elements[i];\n\t\t\t\t\tlet cellFullStyleObj = window.getComputedStyle(elem, null);\n\t\t\t\t\tlet backgroundColor = cellFullStyleObj.getPropertyValue( 'background-color' );\n\t\t\t\t\tlet objectKey = '';\n\t\t\t\t\tif(elemSelector === 'td') {\n\t\t\t\t\t\tobjectKey = elem.dataset.xIndex + '-' + elem.dataset.yIndex;\n\t\t\t\t\t\tthis.cellsStylesScheme[objectKey] = {backgroundColor};\n\t\t\t\t\t} else if(elemSelector === 'tr') {\n\t\t\t\t\t\tobjectKey = String(i);\n\t\t\t\t\t\tthis.rowsStylesScheme[objectKey] = {backgroundColor};\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.tableObjectChange(false);\n\t\t}\n\n\t\t/**\n\t\t * applies saved cell styles data to all cells\n\t\t *\n\t\t * @param elemSelector\n\t\t */\n\t\tthis.reassignElementsStyles = function (elemSelector) {\n\t\t\tthis.tableObjectChange();\n\t\t\tlet elements = this.table.querySelectorAll(elemSelector);\n\t\t\tlet elementsStylesScheme;\n\t\t\tif(elemSelector === 'td') {\n\t\t\t\telementsStylesScheme = this.cellsStylesScheme;\n\t\t\t} else if(elemSelector === 'tr') {\n\t\t\t\telementsStylesScheme = this.rowsStylesScheme;\n\t\t\t}\n\t\t\tif(elements.length) {\n\t\t\t\tfor(let i = 0; i < elements.length; i++) {\n\t\t\t\t\tlet elem = elements[i];\n\t\t\t\t\tlet objectKey = '';\n\t\t\t\t\tif(elemSelector === 'td') {\n\t\t\t\t\t\tobjectKey = elem.dataset.xIndex + '-' + elem.dataset.yIndex;\n\t\t\t\t\t} else if(elemSelector === 'tr') {\n\t\t\t\t\t\tobjectKey = i;\n\t\t\t\t\t}\n\t\t\t\t\tif(elementsStylesScheme.hasOwnProperty(objectKey)) {\n\t\t\t\t\t\tlet elemStyles = elementsStylesScheme[objectKey];\n\t\t\t\t\t\tfor(let key in elemStyles) {\n\t\t\t\t\t\t\telem.style[key] = elemStyles[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tableObjectChange(false);\n\t\t}\n\n\t\t/**\n\t\t * checks whether the table should be in the sort state\n\t\t * and connects the necessary handlers\n\t\t *\n\t\t * @param {object} responsiveFront\n\t\t */\n\t\tthis.sortableTableInitialization = function (responsiveFront) {\n\t\t\tlet type = '';\n\t\t\tlet typeFirst;\n\t\t\tlet typeSecond;\n\t\t\tif (this.table.dataset.wptbSortableTableVertical && this.table.dataset.wptbSortableTableVertical === '1') {\n\t\t\t\ttypeFirst = 'vertical';\n\t\t\t\ttypeSecond = 'horizontal';\n\t\t\t} else if (\n\t\t\t\tthis.table.dataset.wptbSortableTableHorizontal &&\n\t\t\t\tthis.table.dataset.wptbSortableTableHorizontal === '1'\n\t\t\t) {\n\t\t\t\ttypeFirst = 'horizontal';\n\t\t\t\ttypeSecond = 'vertical';\n\t\t\t}\n\n\t\t\tconst switchMode = {};\n\t\t\tif (responsiveFront && responsiveFront.getDirective(this.table)) {\n\t\t\t\tswitchMode.switch = function (e) {\n\t\t\t\t\tconst directives = responsiveFront.getDirective(this.table)\n\n\t\t\t\t\tlet sizeRangeId = 'desktop';\n\t\t\t\t\tif (e && e.detail) {\n\t\t\t\t\t\tsizeRangeId = e.detail.sizeRangeId;\n\t\t\t\t\t}\n\t\t\t\t\ttype = typeFirst;\n\t\t\t\t\tif (sizeRangeId !== 'desktop') {\n\t\t\t\t\t\tif (directives.hasOwnProperty('modeOptions')) {\n\t\t\t\t\t\t\tconst mode = directives.responsiveMode;\n\t\t\t\t\t\t\tconst modeOptions = directives.modeOptions[mode];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodeOptions.hasOwnProperty('topRowAsHeader') &&\n\t\t\t\t\t\t\t\tmodeOptions.topRowAsHeader.hasOwnProperty(sizeRangeId) &&\n\t\t\t\t\t\t\t\tmodeOptions.topRowAsHeader[sizeRangeId]\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tmodeOptions.hasOwnProperty('cellStackDirection') &&\n\t\t\t\t\t\t\t\t\tmodeOptions.cellStackDirection.hasOwnProperty(sizeRangeId)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tif (modeOptions.cellStackDirection[sizeRangeId] === 'row') {\n\t\t\t\t\t\t\t\t\t\ttype = typeSecond;\n\t\t\t\t\t\t\t\t\t\tthis.itemsPerHeader = this.tableMaxCols - 1;\n\t\t\t\t\t\t\t\t\t} else if (modeOptions.cellStackDirection[sizeRangeId] === 'column') {\n\t\t\t\t\t\t\t\t\t\tif (modeOptions.hasOwnProperty('cellsPerRow')) {\n\t\t\t\t\t\t\t\t\t\t\tthis.itemsPerHeader = modeOptions.cellsPerRow[sizeRangeId];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.itemsPerHeader = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.itemsPerHeader = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis.sortModeSwitcher(type, true);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tswitchMode.switch = function (e) {\n\t\t\t\t\tlet type = typeFirst;\n\t\t\t\t\tif (this.table.classList.contains('wptb-mobile-view-active')) {\n\t\t\t\t\t\tif (this.table.classList.contains('wptb-table-preview-head')) {\n\t\t\t\t\t\t\ttype = typeSecond;\n\t\t\t\t\t\t\tif(type === 'vertical') {\n\t\t\t\t\t\t\t\tthis.itemsPerHeader = this.tableMaxCols - 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst { table } = this;\n\t\t\t\t\t\tthis.table = table.parentNode.parentNode.querySelector('.wptb-preview-table-mobile');\n\t\t\t\t\t\tthis.sortModeSwitcher(type, true);\n\t\t\t\t\t\tthis.table = table;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.sortModeSwitcher(type, true);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tswitchMode.switch.call(thisObject);\n\t\t\tthis.table.addEventListener(\n\t\t\t\t'table:rebuilt',\n\t\t\t\tfunction (e) {\n\t\t\t\t\tswitchMode.switch.call(thisObject, e);\n\t\t\t\t},\n\t\t\t\tfalse\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * adds and deletes mousemove and mouseleave events handlers when happens switch sorting mode\n\t\t * and also can add necessary attributes\n\t\t *\n\t\t * @param {string} type\n\t\t * @param {boolean} active\n\t\t */\n\t\tthis.sortingCellMouseMoveSwitcher = function (type, active) {\n\t\t\t/**\n\t\t\t * removes and adds mousemove and mouseleave events handlers\n\t\t\t *\n\t\t\t * @param {HTMLElement} td\n\t\t\t * @param {func} sCMM\n\t\t\t * @param {boolean} active\n\t\t\t */\n\t\t\tfunction s(td, sCMM, active) {\n\t\t\t\ttd.removeEventListener('mousemove', sCMM, false);\n\t\t\t\ttd.removeEventListener('mouseleave', tdMouseLeave, false);\n\t\t\t\tif (active) {\n\t\t\t\t\ttd.addEventListener('mousemove', sCMM, false);\n\t\t\t\t\ttd.addEventListener('mouseleave', tdMouseLeave, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * removes and adds data sorted attributes\n\t\t\t *\n\t\t\t * @param {HTMLElement} td\n\t\t\t * @param {string} dataAttr\n\t\t\t * @param {boolean} active\n\t\t\t */\n\t\t\tfunction dataAttrSortChange(td, dataAttr, active) {\n\t\t\t\tif (active) {\n\t\t\t\t\tif (!td.dataset[dataAttr] || td.dataset[dataAttr] !== 'desk-disabled') {\n\t\t\t\t\t\ttd.dataset[dataAttr] = 'ask';\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttd.dataset[dataAttr] = 'desk';\n\t\t\t\t\t}\n\t\t\t\t} else if (td.dataset[dataAttr] === 'ask') {\n\t\t\t\t\ttd.dataset[dataAttr] = 'ask-disabled';\n\t\t\t\t} else if (td.dataset[dataAttr] === 'desk') {\n\t\t\t\t\ttd.dataset[dataAttr] = 'desk-disabled';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// removes all mousemove and mouseleave events handlers\n\t\t\t// and also removes all data sorted attributes from all cells\n\t\t\tlet tds = this.table.querySelectorAll('td');\n\t\t\tif (tds.length) {\n\t\t\t\ttds = [...tds];\n\t\t\t\ttds.map((td) => {\n\t\t\t\t\ts(td, sortingCellMouseMoveVertical, false);\n\t\t\t\t\tdataAttrSortChange(td, 'sortedVertical', false);\n\t\t\t\t\ts(td, sortingCellMouseMoveHorizontal, false);\n\t\t\t\t\tdataAttrSortChange(td, 'sortedHorizontal', false);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if active === true sets sorted events handlers\n\t\t\t// and data sorted attributes for all cells\n\t\t\tif (active) {\n\t\t\t\tif (type === 'vertical') {\n\t\t\t\t\tlet rowsLength = this.table.rows.length;\n\t\t\t\t\tlet dataYIndexStart = 0;\n\t\t\t\t\twhile (rowsLength > 0) {\n\t\t\t\t\t\tlet tds = this.table.querySelectorAll(`[data-y-index=\"${dataYIndexStart}\"]`);\n\t\t\t\t\t\ttds = [...tds];\n\t\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\t\ts(td, sortingCellMouseMoveVertical, active);\n\t\t\t\t\t\t\tdataAttrSortChange(td, 'sortedVertical', active);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (this.itemsPerHeader) {\n\t\t\t\t\t\t\trowsLength -= this.itemsPerHeader + 1;\n\t\t\t\t\t\t\tdataYIndexStart += this.itemsPerHeader + 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trowsLength = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (type === 'horizontal') {\n\t\t\t\t\tlet tds = this.table.querySelectorAll('[data-x-index=\"0\"]');\n\t\t\t\t\ttds = [...tds];\n\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\tlet tdsPerAfter = this.table.querySelectorAll(`[data-y-index=\"${td.dataset.yIndex}\"]`);\n\t\t\t\t\t\tif(tdsPerAfter.length > 2) {\n\t\t\t\t\t\t\ts(td, sortingCellMouseMoveHorizontal, active);\n\t\t\t\t\t\t\tdataAttrSortChange(td, 'sortedHorizontal', active);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * adds a sortable-hover class for a cell when the cursor is over the sort icon (arrow)\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {string} type\n\t\t * @param {HTMLElement} element td\n\t\t */\n\t\tfunction sortingCellMouseMov(e, type, element) {\n\t\t\tif (e.target.tagName === 'TD') {\n\t\t\t\tconst x = e.offsetX == undefined ? e.layerX : e.offsetX;\n\t\t\t\tconst y = e.offsetY == undefined ? e.layerY : e.offsetY;\n\t\t\t\tlet xMatch = false;\n\t\t\t\tif ((type === 'vertical' && e.target.clientWidth - x <= 35) || (type === 'horizontal' && x <= 35)) {\n\t\t\t\t\txMatch = true;\n\t\t\t\t}\n\t\t\t\tif (xMatch && (e.target.clientHeight - 35) / 2 < y && (e.target.clientHeight + 35) / 2 > y) {\n\t\t\t\t\telement.classList.add('sortable-hover');\n\t\t\t\t} else {\n\t\t\t\t\telement.classList.remove('sortable-hover');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telement.classList.remove('sortable-hover');\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * calls sortingCellMouseMov with the type parameter set to vertical\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tfunction sortingCellMouseMoveVertical(e) {\n\t\t\tsortingCellMouseMov(e, 'vertical', this);\n\t\t}\n\n\t\t/**\n\t\t * calls sortingCellMouseMov with the type parameter set to horizontal\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tfunction sortingCellMouseMoveHorizontal(e) {\n\t\t\tsortingCellMouseMov(e, 'horizontal', this);\n\t\t}\n\n\t\t/**\n\t\t * remove sortable-hover class from cell when cursor leave cell\n\t\t */\n\t\tfunction tdMouseLeave() {\n\t\t\tthis.classList.remove('sortable-hover');\n\t\t}\n\n\t\t/**\n\t\t * function for sorting the table vertically by the numeric content of cells\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {HTMLElement} table\n\t\t * @param {string} type\n\t\t */\n\t\tfunction sortableTable(e, type) {\n\t\t\tif (\n\t\t\t\te.target &&\n\t\t\t\te.target.tagName === 'TD' &&\n\t\t\t\t!table.parentNode.classList.contains('wptb-preview-table-manage-cells')\n\t\t\t) {\n\t\t\t\tconst table = e.currentTarget;\n\t\t\t\tlet tableWasSorted = false;\n\t\t\t\tif (type === 'vertical' && e.target.dataset.hasOwnProperty('sortedVertical')) {\n\t\t\t\t\t/**\n\t\t\t\t\t * if table have enabled param topRowAsHeader and sellsStackDirection is column\n\t\t\t\t\t * the top and bottom rows that will not be sorted are temporarily removed from the table\n\t\t\t\t\t */\n\t\t\t\t\tconst tableRowsBefore = [];\n\t\t\t\t\tconst tableRowsAfter = [];\n\t\t\t\t\tif (this.itemsPerHeader && this.itemsPerHeader < table.rows.length) {\n\t\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\t\t\t\t\t\tconst tableRowsArr = [...table.rows];\n\t\t\t\t\t\tconst tableLastCont = table.querySelector('tbody') ? table.querySelector('tbody') : table;\n\t\t\t\t\t\tfor (let i = 0; i < tableRowsArr.length; i++) {\n\t\t\t\t\t\t\tif (i < e.target.dataset.yIndex) {\n\t\t\t\t\t\t\t\ttableRowsBefore.push(tableRowsArr[i]);\n\t\t\t\t\t\t\t\ttableLastCont.removeChild(tableRowsArr[i]);\n\t\t\t\t\t\t\t} else if (i > parseInt(e.target.dataset.yIndex, 10) + this.itemsPerHeader) {\n\t\t\t\t\t\t\t\ttableRowsAfter.push(tableRowsArr[i]);\n\t\t\t\t\t\t\t\ttableLastCont.removeChild(tableRowsArr[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet tds = table.querySelectorAll(`[data-x-index=\"${e.target.dataset.xIndex}\"]`);\n\t\t\t\t\ttds = [...tds];\n\n\t\t\t\t\t/**\n\t\t\t\t\t * preparing table for sorting\n\t\t\t\t\t */\n\t\t\t\t\tlet rowspan;\n\t\t\t\t\tlet rowNum;\n\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\tif (!(rowspan = parseInt(td.rowSpan, 10))) {\n\t\t\t\t\t\t\trowspan = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trowNum = td.dataset.yIndex;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableHorizontally(rowNum, table);\n\t\t\t\t\t\trowNum += rowspan;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableHorizontally(rowNum, table);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rowsValuesArr = [];\n\t\t\t\t\tlet rowsTdFirst;\n\t\t\t\t\tlet tdYCoordsRowSpanPrevious = 0;\n\t\t\t\t\tconst tableRowsPushed = [];\n\t\t\t\t\tfor (let i = 0; i < tds.length; i++) {\n\t\t\t\t\t\tconst tdsChanged = changeSortingTdsCollection(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\ttds,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\ttdYCoordsRowSpanPrevious,\n\t\t\t\t\t\t\t'vertical'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (tdsChanged && tdsChanged.hasOwnProperty('i')) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t\ti = tdsChanged.i;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (tdsChanged) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst td = tds[i];\n\n\t\t\t\t\t\tlet tdRowspan = parseInt(td.rowSpan, 10);\n\t\t\t\t\t\tif (!tdRowspan) tdRowspan = 1;\n\n\t\t\t\t\t\ttdYCoordsRowSpanPrevious = parseInt(td.dataset.yIndex, 10) + tdRowspan;\n\n\t\t\t\t\t\tconst textElementsValues = textElementsValuesGet(td);\n\n\t\t\t\t\t\tconst rowsTd = [];\n\t\t\t\t\t\tfor (let j = 0; j < tdRowspan; j++) {\n\t\t\t\t\t\t\trowsTd.push(table.rows[parseInt(td.dataset.yIndex, 10) + j]);\n\t\t\t\t\t\t\ttableRowsPushed.push(parseInt(td.dataset.yIndex, 10) + j);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (td.dataset.yIndex > 0) {\n\t\t\t\t\t\t\trowsValuesArr.push({\n\t\t\t\t\t\t\t\trowsTd,\n\t\t\t\t\t\t\t\tvalue: textElementsValues,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trowsTdFirst = rowsTd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst orderBy = setSortedAscDataAttr(e, 'sortedVertical');\n\t\t\t\t\tif (!orderBy) return;\n\n\t\t\t\t\tif (rowsValuesArr.length) rowsValuesArr.sort((prev, next) => sortOrder(orderBy, prev, next));\n\n\t\t\t\t\trowsValuesArr.unshift({ rowsTd: rowsTdFirst });\n\n\t\t\t\t\tif (rowsValuesArr.length < table.rows.length) {\n\t\t\t\t\t\tfor (let i = 0; i < table.rows.length; i++) {\n\t\t\t\t\t\t\tif (tableRowsPushed.indexOf(i) > -1) continue;\n\t\t\t\t\t\t\tconst rowsTd = [];\n\t\t\t\t\t\t\trowsTd.push(table.rows[i]);\n\n\t\t\t\t\t\t\trowsValuesArr.push({\n\t\t\t\t\t\t\t\trowsTd,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tBody = table.querySelector('tbody');\n\t\t\t\t\ttBody.innerHTML = '';\n\n\t\t\t\t\trowsValuesArr.map((rowsValObj) => {\n\t\t\t\t\t\trowsValObj.rowsTd.map((row) => {\n\t\t\t\t\t\t\ttBody.appendChild(row);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t/**\n\t\t\t\t\t * returning previously deleted rows\n\t\t\t\t\t */\n\t\t\t\t\tif (tableRowsBefore.length) {\n\t\t\t\t\t\tconst tableLastCont = table.querySelector('tbody') ? table.querySelector('tbody') : table;\n\t\t\t\t\t\tif (tableLastCont) {\n\t\t\t\t\t\t\tconst trRef = tableLastCont.querySelector('tr');\n\t\t\t\t\t\t\ttableRowsBefore.map((tr) => {\n\t\t\t\t\t\t\t\ttableLastCont.insertBefore(tr, trRef);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (tableRowsAfter.length) {\n\t\t\t\t\t\tconst tableLastCont = table.querySelector('tbody') ? table.querySelector('tbody') : table;\n\t\t\t\t\t\tif (tBody) {\n\t\t\t\t\t\t\ttableRowsAfter.map((tr) => {\n\t\t\t\t\t\t\t\ttableLastCont.appendChild(tr);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\n\t\t\t\t\tWPTB_CutGlueTable.glueTableHorizontally(table);\n\n\t\t\t\t\ttableWasSorted = true;\n\t\t\t\t} else if (type === 'horizontal' && e.target.dataset.xIndex === '0') {\n\t\t\t\t\tlet tds = table.querySelectorAll(`[data-y-index=\"${e.target.dataset.yIndex}\"]`);\n\t\t\t\t\ttds = [...tds];\n\n\t\t\t\t\t// preparing table for sorting\n\t\t\t\t\tlet colspan;\n\t\t\t\t\tlet colNum;\n\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\tif (!(colspan = parseInt(td.colSpan, 10))) {\n\t\t\t\t\t\t\tcolspan = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolNum = td.dataset.xIndex;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableVertically(colNum, table);\n\t\t\t\t\t\tcolNum += colspan;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableVertically(colNum, table);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst columnsValuesArr = [];\n\t\t\t\t\tlet columnsTdFirst;\n\n\t\t\t\t\tlet tdXCoordsColSpanPrevious = 0;\n\t\t\t\t\tfor (let i = 0; i < tds.length; i++) {\n\t\t\t\t\t\tconst tdsChanged = changeSortingTdsCollection(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\ttds,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\ttdXCoordsColSpanPrevious,\n\t\t\t\t\t\t\t'horizontal'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (tdsChanged && tdsChanged.hasOwnProperty('i')) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t\ti = tdsChanged.i;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (tdsChanged) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst td = tds[i];\n\t\t\t\t\t\tlet tdColspan = parseInt(td.colSpan, 10);\n\t\t\t\t\t\tif (!tdColspan) tdColspan = 1;\n\n\t\t\t\t\t\ttdXCoordsColSpanPrevious = parseInt(td.dataset.xIndex, 10) + tdColspan;\n\n\t\t\t\t\t\tconst textElementsValues = textElementsValuesGet(td);\n\t\t\t\t\t\tconst columnsTd = [];\n\t\t\t\t\t\tfor (let j = 0; j < tdColspan; j++) {\n\t\t\t\t\t\t\tconst tdsColumn = [\n\t\t\t\t\t\t\t\t...table.querySelectorAll(`[data-x-index=\"${parseInt(td.dataset.xIndex, 10) + j}\"]`),\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tcolumnsTd.push(tdsColumn);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (td.dataset.xIndex > 0) {\n\t\t\t\t\t\t\tcolumnsValuesArr.push({\n\t\t\t\t\t\t\t\tcolumnsTd,\n\t\t\t\t\t\t\t\tvalue: textElementsValues,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcolumnsTdFirst = columnsTd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst orderBy = setSortedAscDataAttr(e, 'sortedHorizontal');\n\t\t\t\t\tif (!orderBy) return;\n\n\t\t\t\t\tif (columnsValuesArr.length) columnsValuesArr.sort((prev, next) => sortOrder(orderBy, prev, next));\n\n\t\t\t\t\tcolumnsValuesArr.unshift({ columnsTd: columnsTdFirst });\n\n\t\t\t\t\tif (columnsValuesArr.length < table.maxCols) {\n\t\t\t\t\t\tconst difference = table.maxCols - columnsValuesArr.length;\n\t\t\t\t\t\tfor (let i = 0; i < difference; i++) {\n\t\t\t\t\t\t\tconst tdsColumn = [\n\t\t\t\t\t\t\t\t...table.querySelectorAll(\n\t\t\t\t\t\t\t\t\t`[data-x-index=\"${parseInt(table.maxCols, 10) - parseInt(difference, 10) + i}\"]`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tcolumnsValuesArr.push({\n\t\t\t\t\t\t\t\tcolumnsTd: [tdsColumn],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < table.rows.length; i++) {\n\t\t\t\t\t\ttable.rows[i].innerHTML = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tcolumnsValuesArr.map((columnsValObj) => {\n\t\t\t\t\t\tcolumnsValObj.columnsTd.map((tdsColumn) => {\n\t\t\t\t\t\t\ttdsColumn.map((td) => {\n\t\t\t\t\t\t\t\ttable.rows[td.dataset.yIndex].appendChild(td);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\n\t\t\t\t\tWPTB_CutGlueTable.glueTableVertically(table);\n\n\t\t\t\t\ttableWasSorted = true;\n\t\t\t\t}\n\n\t\t\t\tif (tableWasSorted) {\n\t\t\t\t\tremoveCellsAttrAfterDivision(table);\n\n\t\t\t\t\tif (table.hasOwnProperty('tableSM')) {\n\t\t\t\t\t\tconst tableSM = table.tableSM();\n\t\t\t\t\t\tnew tableSM().tableStateSet();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.reassignElementsStyles('td');\n\t\t\t\t\tthis.reassignElementsStyles('tr');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Function that sets the data-attribute with the number of the row or column\n\t\t * that the table was sorted by. Returns the number of a row or column\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {string} dataAttr\n\t\t * @returns {null|boolean}\n\t\t */\n\t\tfunction setSortedAscDataAttr(e, dataAttr) {\n\t\t\tif (\n\t\t\t\te.currentTarget &&\n\t\t\t\t(e.currentTarget.classList.contains('wptb-preview-table') ||\n\t\t\t\t\te.currentTarget.classList.contains('wptb-preview-table-mobile'))\n\t\t\t) {\n\t\t\t\tif (!e.target.dataset[dataAttr] || e.target.dataset[dataAttr] === 'ask') {\n\t\t\t\t\te.target.dataset[dataAttr] = 'desk';\n\t\t\t\t} else {\n\t\t\t\t\te.target.dataset[dataAttr] = 'ask';\n\t\t\t\t}\n\n\t\t\t\treturn e.target.dataset[dataAttr];\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * defines the sorting order\n\t\t *\n\t\t * @param {string} orderBy\n\t\t * @param prev\n\t\t * @param next\n\t\t * @returns {number}\n\t\t */\n\t\tfunction sortOrder(orderBy = 'ask', prev, next) {\n\t\t\tlet prevValue = prev.value;\n\t\t\tlet nextValue = next.value;\n\t\t\tif (parseInt(prevValue) && parseInt(nextValue)) {\n\t\t\t\tprevValue = parseInt(prevValue);\n\t\t\t\tnextValue = parseInt(nextValue);\n\t\t\t}\n\n\t\t\tif (orderBy === 'ask') {\n\t\t\t\tif (prevValue < nextValue) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (prevValue === nextValue) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (prevValue < nextValue) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (prevValue === nextValue) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t * return cell text elements values\n\t\t *\n\t\t * @param cell {HTMLElement}\n\t\t * @returns {string}\n\t\t */\n\t\tfunction textElementsValuesGet(cell) {\n\t\t\tlet textElements = cell.querySelectorAll('.wptb-text-container');\n\t\t\ttextElements = [...textElements];\n\t\t\tlet value = '';\n\t\t\tfor (let j = 0; j < textElements.length; j++) {\n\t\t\t\tconst p = textElements[j].querySelector('p');\n\t\t\t\tvalue += p.innerText;\n\t\t\t\tif (j !== textElements.length - 1) value += ' ';\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\t/**\n\t\t * adds cells to the collection of cells in the row or column that the table is sorted by.\n\t\t * These added cells are not originally were added in the collection,\n\t\t * because they are combined with cells from higher rows or left-side columns\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {HTMLElement} table\n\t\t * @param {array} tds\n\t\t * @param {number} i\n\t\t * @param {number} tdIndexSpanPrev\n\t\t * @param {string} type\n\t\t * @returns {{tds: *}|boolean|{tds: *, i: *}}\n\t\t */\n\t\tfunction changeSortingTdsCollection(e, table, tds, i, tdIndexSpanPrev, type) {\n\t\t\tconst td = tds[i];\n\t\t\tlet tdsCollectionChanged = false;\n\t\t\tlet collectionTds;\n\t\t\tlet collectionTdsJSpan;\n\t\t\tlet collectionTdsJSpanProperty;\n\t\t\tlet indexName;\n\t\t\tlet indexNameCamelCase;\n\t\t\tlet indexNamePerpendicularCamelCase;\n\t\t\tlet tdSpanProperty;\n\t\t\t// max rows or columns column\n\t\t\tlet tableGroupCount;\n\n\t\t\tif (type === 'vertical') {\n\t\t\t\tcollectionTdsJSpanProperty = 'colSpan';\n\t\t\t\tindexName = 'data-y-index';\n\t\t\t\tindexNameCamelCase = 'yIndex';\n\t\t\t\tindexNamePerpendicularCamelCase = 'xIndex';\n\t\t\t\ttdSpanProperty = 'rowSpan';\n\t\t\t\ttableGroupCount = table.rows.length;\n\t\t\t} else if (type === 'horizontal') {\n\t\t\t\tcollectionTdsJSpanProperty = 'rowSpan';\n\t\t\t\tindexName = 'data-x-index';\n\t\t\t\tindexNameCamelCase = 'xIndex';\n\t\t\t\tindexNamePerpendicularCamelCase = 'yIndex';\n\t\t\t\ttdSpanProperty = 'colSpan';\n\t\t\t\ttableGroupCount = table.maxCols;\n\t\t\t}\n\n\t\t\tif (td.dataset[indexNameCamelCase] - tdIndexSpanPrev > 0) {\n\t\t\t\tcollectionTds = table.querySelectorAll(`[${indexName}=\"${tdIndexSpanPrev}\"]`);\n\n\t\t\t\tfor (let j = 0; j < collectionTds.length; j++) {\n\t\t\t\t\tcollectionTdsJSpan = collectionTds[j][collectionTdsJSpanProperty];\n\t\t\t\t\tif (!collectionTdsJSpan) collectionTdsJSpan = 1;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tcollectionTds[j].dataset[indexNamePerpendicularCamelCase] <\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase] &&\n\t\t\t\t\t\tparseInt(collectionTds[j].dataset[indexNamePerpendicularCamelCase], 10) +\n\t\t\t\t\t\t\tparseInt(collectionTdsJSpan, 10) >\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase]\n\t\t\t\t\t) {\n\t\t\t\t\t\ttds.splice(i, 0, collectionTds[j]);\n\t\t\t\t\t\ttdsCollectionChanged = true;\n\t\t\t\t\t\ti--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tdsCollectionChanged) return { tds, i };\n\n\t\t\tlet tdSpan = parseInt(td[tdSpanProperty], 10);\n\t\t\tif (!tdSpan) tdSpan = 1;\n\t\t\tif (i == tds.length - 1 && parseInt(td.dataset[indexNameCamelCase], 10) + tdSpan < tableGroupCount) {\n\t\t\t\tcollectionTds = table.querySelectorAll(\n\t\t\t\t\t`[${indexName}=\"${parseInt(td.dataset[indexNameCamelCase], 10) + tdSpan}\"]`\n\t\t\t\t);\n\t\t\t\tfor (let j = 0; j < collectionTds.length; j++) {\n\t\t\t\t\tcollectionTdsJSpan = collectionTds[j][collectionTdsJSpanProperty];\n\t\t\t\t\tif (!collectionTdsJSpan) collectionTdsJSpan = 1;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tcollectionTds[j].dataset[indexNamePerpendicularCamelCase] <\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase] &&\n\t\t\t\t\t\tparseInt(collectionTds[j].dataset[indexNamePerpendicularCamelCase], 10) +\n\t\t\t\t\t\t\tparseInt(collectionTdsJSpan, 10) >\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase]\n\t\t\t\t\t) {\n\t\t\t\t\t\ttds.push(collectionTds[j]);\n\t\t\t\t\t\ttdsCollectionChanged = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tdsCollectionChanged) return { tds };\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * remove cells attributes which were used for division table\n\t\t *\n\t\t * @param {HTMLElement} table\n\t\t */\n\t\tfunction removeCellsAttrAfterDivision(table) {\n\t\t\tconst tdsAll = [...table.getElementsByTagName('td')];\n\t\t\tfor (let i = 0; i < tdsAll.length; i++) {\n\t\t\t\tif (tdsAll[i].hasAttribute('data-same-cell-before-division')) {\n\t\t\t\t\ttdsAll[i].removeAttribute('data-same-cell-before-division');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * function for run sorting table vertically\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tthis.sortableTableVerticalStart = function (e) {\n\t\t\tsortableTable.call(thisObject, e, 'vertical');\n\t\t};\n\n\t\t/**\n\t\t * function for run sorting table horizontally\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tthis.sortableTableHorizontalStart = function (e) {\n\t\t\tsortableTable.call(thisObject, e, 'horizontal');\n\t\t};\n\n\t\treturn this;\n\t}\n\n\treturn WPTB_SortTable;\n});\n","const WPTB_RecalculateIndexes = function (table) {\n    let trs = table.getElementsByTagName( 'tr' ),\n        tds, maxCols = 0, maxColsFull = 0, tdsArr = [];\n\n    for ( let i = 0; i < trs.length; i++ ) {\n        tds = trs[i].getElementsByTagName( 'td' );\n\n        if ( tdsArr[i] == undefined ) {\n            tdsArr[i] = [];\n        }\n\n        let jMainIter = 0;\n        for ( let j = 0; j < tds.length; j++ ) {\n            if ( tdsArr[i][j] != undefined ) {\n                for ( let y = 0; y < 100; y++ ) {\n                    if ( tdsArr[i][jMainIter] != undefined ) {\n                        jMainIter++;\n                        continue;\n                    }\n                    tdsArr[i][jMainIter] = tds[j];\n                    tds[j].dataset.xIndex = jMainIter;\n                    break;\n                }\n            } else {\n                tdsArr[i][j] = tds[j];\n                tds[j].dataset.xIndex = jMainIter;\n            }\n            tds[j].dataset.yIndex = i;\n\n            if ( tds[j].colSpan > 1 ) {\n                for ( let k = 1; k < tds[j].colSpan; k++ ) {\n                    jMainIter++;\n                    tdsArr[i][jMainIter] = 'tdDummy';\n                }\n            }\n\n            if ( tds[j].rowSpan > 1 ) {\n                for ( let x = 1; x < tds[j].rowSpan; x++ ) {\n                    if ( tdsArr[i + x] == undefined ) {\n                        tdsArr[i + x] = [];\n                    }\n                    for ( let z = 0; z < tds[j].colSpan; z++ ) {\n                        tdsArr[i + x][jMainIter - tds[j].colSpan + 1 + z ] = 'tdDummy';\n                    }\n                }\n            }\n            jMainIter++;\n        }\n\n        if ( tds.length > maxCols ) {\n            maxCols = tds.length;\n        }\n\n        if( i == 0 ) {\n            maxColsFull = jMainIter;\n        }\n    }\n    table.columns = maxCols;\n    table.maxCols = maxColsFull;\n}\n","/**\n * UMD for data table generator.\n *\n * @param {string} key property name to assign to context\n * @param {Object} context context object\n * @param {Function} factory factory function\n */\n(function assignToGlobal(key, context, factory) {\n\tif (typeof module !== 'undefined' && typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t}\n\t// eslint-disable-next-line no-param-reassign\n\tcontext[key] = factory();\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_DataTableGenerator', self || global, () => {\n\t/**\n\t * Default mappings for element value binds.\n\t *\n\t * @type {Object}\n\t */\n\tconst defaultMappings = {\n\t\tdefault: ['text'],\n\t\tbutton: ['link'],\n\t\tstar_rating: ['rating'],\n\t\timage: ['link'],\n\t\tcircle_rating: ['percentage'],\n\t};\n\n\t/**\n\t * Deep merge object.\n\t *\n\t * @param {Object} source source object\n\t * @param {Object} target target object\n\t * @return {Object} merged object\n\t */\n\t// eslint-disable-next-line import/prefer-default-export\n\tconst objectDeepMerge = (source, target) => {\n\t\t// eslint-disable-next-line array-callback-return\n\t\tObject.keys(target).map((k) => {\n\t\t\tif (Object.prototype.hasOwnProperty.call(target, k)) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, k)) {\n\t\t\t\t\tif (typeof source[k] === 'object') {\n\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\tsource[k] = { ...source[k], ...target[k] };\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\tsource[k] = target[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn source;\n\t};\n\n\t/**\n\t * Get element id from a table element's class.\n\t *\n\t * @param {HTMLElement} tableElement table element\n\t * @return {null|string} null if no id is found\n\t */\n\tconst parseTableElementId = (tableElement) => {\n\t\tif (tableElement) {\n\t\t\tconst activeElementIdArray = tableElement\n\t\t\t\t.getAttribute('class')\n\t\t\t\t.split(' ')\n\t\t\t\t.filter((c) => {\n\t\t\t\t\tconst regExp = new RegExp(/^wptb-element-(.+)-(\\d+)$/, 'g');\n\t\t\t\t\treturn regExp.test(c);\n\t\t\t\t})[0];\n\n\t\t\tif (activeElementIdArray) {\n\t\t\t\treturn activeElementIdArray.replace('wptb-element-', '');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t/**\n\t * Find table element type from its class.\n\t *\n\t * @param {HTMLElement} tableElement table element\n\t * @return {null|string} null if no type is found\n\t */\n\tconst parseElementType = (tableElement) => {\n\t\tif (tableElement) {\n\t\t\tconst activeElementKindArray = tableElement\n\t\t\t\t.getAttribute('class')\n\t\t\t\t.split(' ')\n\t\t\t\t.filter((c) => {\n\t\t\t\t\tconst regExp = new RegExp(/^wptb-element-(.+)-(\\d+)$/, 'g');\n\t\t\t\t\treturn regExp.test(c);\n\t\t\t\t})[0];\n\n\t\t\tif (activeElementKindArray) {\n\t\t\t\tconst regExp = new RegExp(/^wptb-element-(.+)-(\\d+)$/, 'g');\n\t\t\t\tconst [, elementType] = regExp.exec(activeElementKindArray);\n\t\t\t\treturn elementType;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t/**\n\t * Operator type.\n\t *\n\t * @param {Object} options options object\n\t * @param {DataManager} dataManager data manager instance\n\t * @param {Object} factoryContext operator factory context\n\t * @class\n\t */\n\tfunction OperatorType(options, dataManager, factoryContext) {\n\t\tconst defaultOptions = {\n\t\t\tname: 'default',\n\t\t\tmethods: {\n\t\t\t\t/**\n\t\t\t\t *\n\t\t\t\t * @param {Object} bindingOptions an object of row binding options\n\t\t\t\t * @return {number} maximum amount of rows this operator will generate.\n\t\t\t\t */\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\tcalculateMaxRows(bindingOptions) {\n\t\t\t\t\treturn this.getOperatorResult(bindingOptions).length;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Get operator result values.\n\t\t\t\t *\n\t\t\t\t * @param {Object} operatorOptions operator options to use\n\t\t\t\t * @return {Array} generated values array based on operator\n\t\t\t\t */\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\tgetOperatorResult(operatorOptions) {\n\t\t\t\t\treturn [];\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// merge default options with the supplied ones\n\t\tthis.options = objectDeepMerge(defaultOptions, options);\n\n\t\t// data manager\n\t\tthis.dataManager = dataManager;\n\n\t\t// factory context\n\t\tthis.factory = factoryContext;\n\n\t\t/**\n\t\t * Raise option methods to instance context to use context related properties.\n\t\t */\n\t\tconst upliftMethodsToInstanceContext = () => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tObject.keys(this.options.methods).map((method) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(this.options.methods, method)) {\n\t\t\t\t\tthis[method === 'getOperatorResult' ? 'innerOperatorResult' : method] = this.options.methods[\n\t\t\t\t\t\tmethod\n\t\t\t\t\t].bind(this);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Slice operator results according to demanded row amounts.\n\t\t *\n\t\t * @param {Array} results operator results\n\t\t * @param {{rowAmount, rowCustomAmount}} options object\n\t\t * @return {Array} sliced results array\n\t\t */\n\t\tconst sliceResult = (results, { rowAmount, rowCustomAmount }) => {\n\t\t\tconst sliceAmount =\n\t\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\t\trowAmount === 'all'\n\t\t\t\t\t? results.length\n\t\t\t\t\t: rowCustomAmount > results.length\n\t\t\t\t\t? results.length\n\t\t\t\t\t: rowCustomAmount;\n\n\t\t\treturn results.slice(0, sliceAmount);\n\t\t};\n\n\t\t/**\n\t\t * Get operator process results.\n\t\t *\n\t\t * @param {Object} options options object\n\t\t * @return {Array} final operator results\n\t\t */\n\t\t// eslint-disable-next-line no-shadow\n\t\tthis.getOperatorResult = (options) => {\n\t\t\t// eslint-disable-next-line prefer-spread\n\t\t\treturn sliceResult(this.innerOperatorResult(options), options);\n\t\t};\n\n\t\tupliftMethodsToInstanceContext();\n\t}\n\n\t/**\n\t * Highest/lowest operator options.\n\t *\n\t * @type {Object}\n\t */\n\tconst highestLowest = {\n\t\tmethods: {\n\t\t\tgetOperatorResult({ compareColumn, operatorType }) {\n\t\t\t\tconst newValuesArray = this.dataManager.getValues();\n\t\t\t\tnewValuesArray.sort((a, b) => {\n\t\t\t\t\tconst aVal = Number.parseFloat(this.dataManager.getColumnValueByIndex(0, compareColumn, [a]));\n\t\t\t\t\tconst bVal = Number.parseFloat(this.dataManager.getColumnValueByIndex(0, compareColumn, [b]));\n\n\t\t\t\t\treturn (aVal - bVal) * (operatorType === 'highest' ? -1 : 1);\n\t\t\t\t});\n\n\t\t\t\treturn [newValuesArray[0]];\n\t\t\t},\n\t\t},\n\t};\n\n\t/**\n\t * Operator type options that will be used to generator operators in operator factory.\n\t *\n\t * @type {Object}\n\t */\n\tconst operatorTypeOptions = {\n\t\thighest: highestLowest,\n\t\tlowest: highestLowest,\n\t\tnot: {\n\t\t\tmethods: {\n\t\t\t\tnotOperation(options) {\n\t\t\t\t\tconst notOperator = options.operatorType2;\n\t\t\t\t\tconst notOperatorOptions = { ...options, operatorType: notOperator };\n\n\t\t\t\t\t// execute second operator process to find generated rows for that operator\n\t\t\t\t\tconst notOperationValues = this.factory\n\t\t\t\t\t\t.getOperator(notOperator)\n\t\t\t\t\t\t.getOperatorResult(notOperatorOptions)[0];\n\n\t\t\t\t\tconst dataRowId = notOperationValues.rowId;\n\n\t\t\t\t\t// filter out rows generated by second operator process to perform not operation\n\t\t\t\t\treturn this.dataManager.getValues().filter((row) => {\n\t\t\t\t\t\treturn row.rowId !== dataRowId;\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tgetOperatorResult(options) {\n\t\t\t\t\treturn this.notOperation(options);\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\t/**\n\t * Operator factory for easy operator functions.\n\t *\n\t * @param {Object} operatorOptions individual operator options.\n\t * @param {DataManager} dataManager DataManager instance\n\t * @class\n\t */\n\tfunction OperatorFactory(operatorOptions, dataManager) {\n\t\t/**\n\t\t * Operator type instances.\n\t\t *\n\t\t * Operator name will be used as key and its instance will be used at its value.\n\t\t * This object will be populated with instances based on OperatorType object at factory instance generation.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tlet operatorTypeInstances = {};\n\n\t\t/**\n\t\t * Get operator type instance.\n\t\t *\n\t\t * @param {string} operatorName operator name\n\t\t * @return {Object} operator type instance\n\t\t */\n\t\tthis.getOperator = (operatorName) => {\n\t\t\treturn operatorTypeInstances[operatorName];\n\t\t};\n\n\t\t/**\n\t\t * Create operator type instances.\n\t\t */\n\t\tconst createOperators = () => {\n\t\t\toperatorTypeInstances = {};\n\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tObject.keys(operatorOptions).map((optionName) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(operatorOptions, optionName)) {\n\t\t\t\t\toperatorTypeInstances[optionName] = new OperatorType(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: optionName,\n\t\t\t\t\t\t\t...operatorOptions[optionName],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdataManager,\n\t\t\t\t\t\tthis\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Operator factory startup hook\n\t\t */\n\t\tconst startUp = () => {\n\t\t\tcreateOperators();\n\t\t};\n\n\t\t// start operator factory initialization\n\t\tstartUp();\n\t}\n\n\t/**\n\t * Data manager for various data operations.\n\t *\n\t * @param {Array} values values array\n\t * @param {Object} bindings bindings object\n\t * @class\n\t */\n\tfunction DataManager(values = [], bindings = {}) {\n\t\tlet innerValues = values;\n\t\tlet innerBindings = bindings;\n\n\t\t/**\n\t\t * Update values.\n\t\t *\n\t\t * @param {Array} newValues new values array\n\t\t */\n\t\tthis.updateValues = (newValues) => {\n\t\t\tinnerValues = newValues;\n\t\t};\n\n\t\t/**\n\t\t * Update bindings.\n\t\t *\n\t\t * @param {Object} newBindings\n\t\t */\n\t\tthis.updateBindings = (newBindings) => {\n\t\t\tinnerBindings = newBindings;\n\t\t};\n\n\t\t/**\n\t\t * Get id of a data column from index.\n\t\t *\n\t\t * @param {number} index column index\n\t\t * @return {string} column id\n\t\t */\n\t\tthis.getColumnIdFromIndex = (index) => {\n\t\t\treturn innerValues[0].values[index]?.colId;\n\t\t};\n\n\t\t/**\n\t\t * Get all values of a column in data table.\n\t\t *\n\t\t * @param {string} columnId data table column id\n\t\t * @param {Array} customValues custom values to use\n\t\t * @return {Array} all values related to that column\n\t\t */\n\t\tthis.getColumnValues = (columnId, customValues = null) => {\n\t\t\tconst valuesToUse = customValues || innerValues;\n\t\t\treturn valuesToUse.reduce((carry, row) => {\n\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\trow.values.map((cell) => {\n\t\t\t\t\tif (cell.colId === columnId) {\n\t\t\t\t\t\tcarry.push(cell.value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn carry;\n\t\t\t}, []);\n\t\t};\n\n\t\t/**\n\t\t * Get a column value by index.\n\t\t *\n\t\t * @param {number} index index\n\t\t * @param {string} columnId column id\n\t\t * @param {Array} customValues custom value array, is supplied values will be selected from here instead of store values\n\t\t * @return {null|string} column value, null if none found on index or column id\n\t\t */\n\t\tthis.getColumnValueByIndex = (index, columnId, customValues = null) => {\n\t\t\tconst columnValues = this.getColumnValues(columnId, customValues);\n\n\t\t\tlet value = null;\n\t\t\tif (columnValues) {\n\t\t\t\tif (columnValues[index]) {\n\t\t\t\t\tvalue = columnValues[index];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\t/**\n\t\t * Get a row object by its id.\n\t\t *\n\t\t * @param {string} rowId row id\n\t\t * @return {Object} row object\n\t\t */\n\t\tthis.getRowById = (rowId) => {\n\t\t\treturn innerValues.filter((row) => row.rowId === rowId)[0];\n\t\t};\n\n\t\t/**\n\t\t * Get binding with a specific id.\n\t\t *\n\t\t * @param {string} id id for the target binding\n\t\t * @param {string|null} type binding type, null for none\n\t\t */\n\t\tthis.getBinding = (id, type) => {\n\t\t\tif (innerBindings[type]) {\n\t\t\t\treturn innerBindings[type][id];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Get values of data manager.\n\t\t * This function will return immutable version of values.\n\t\t *\n\t\t * @return {Array} values array\n\t\t */\n\t\tthis.getValues = () => {\n\t\t\treturn Array.from(innerValues);\n\t\t};\n\n\t\t/**\n\t\t * Get values of a data row from its index.\n\t\t *\n\t\t * @param {number} rowIndex row index\n\t\t * @return {Array} row values\n\t\t */\n\t\tthis.getRowValuesByIndex = (rowIndex) => {\n\t\t\treturn Array.from(innerValues)[rowIndex];\n\t\t};\n\t}\n\n\t/**\n\t * Data table generator for frontend usage.\n\t *\n\t * @class\n\t */\n\tfunction DataTableGenerator() {\n\t\t/**\n\t\t * Data manager instance\n\t\t *\n\t\t * @type {DataManager}\n\t\t */\n\t\tthis.dataManager = {\n\t\t\t_dataManager: null,\n\t\t\tget instance() {\n\t\t\t\t/* eslint-disable no-underscore-dangle */\n\t\t\t\tif (!this._dataManager) {\n\t\t\t\t\tthis._dataManager = new DataManager();\n\t\t\t\t}\n\n\t\t\t\treturn this._dataManager;\n\t\t\t\t/* eslint-enable no-underscore-dangle */\n\t\t\t},\n\t\t};\n\n\t\t/**\n\t\t * Operator factory instance.\n\t\t *\n\t\t * @type {OperatorFactory}\n\t\t */\n\t\tthis.operatorFactory = new OperatorFactory(operatorTypeOptions, this.dataManager.instance);\n\n\t\t/**\n\t\t * Update data manager instance.\n\t\t *\n\t\t * @param {Array} values values array\n\t\t * @param {Object} bindings bindings object\n\t\t */\n\t\tthis.updateDataManager = (values = [], bindings = {}) => {\n\t\t\tthis.dataManager.instance.updateValues(values);\n\t\t\tthis.dataManager.instance.updateBindings(bindings);\n\t\t};\n\n\t\t/**\n\t\t * Current bindings to be used for current generate process.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.currentBindings = {};\n\n\t\t/**\n\t\t * Current values to be used for current generate process.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.currentValues = {};\n\n\t\t/**\n\t\t * Parse target element into its cells and rows.\n\t\t *\n\t\t * @param {HTMLElement} table table element to be parsed\n\t\t */\n\t\tconst parseTable = (table) => {\n\t\t\treturn Array.from(table.querySelectorAll('tr'));\n\t\t};\n\n\t\t/**\n\t\t * Clear table body contents of a table.\n\t\t *\n\t\t * @param {HTMLElement} table table to be cleared\n\t\t */\n\t\tconst clearTable = (table) => {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\ttable.querySelector('tbody').innerHTML = '';\n\t\t};\n\n\t\t/**\n\t\t * Get data table related id of a row element.\n\t\t *\n\t\t * @param {HTMLElement} rowElement row element\n\t\t * @return {string|null} row element id, null if no id found\n\t\t */\n\t\tconst getRowId = (rowElement) => {\n\t\t\treturn rowElement.dataset.dataTableRowId;\n\t\t};\n\n\t\t/**\n\t\t * Get binding of a table element.\n\t\t *\n\t\t * @param {HTMLElement} tableElement table element\n\t\t * @param {string} type binding type\n\t\t * @return {null | string} binding\n\t\t */\n\t\tconst getTableElementBinding = (tableElement, type) => {\n\t\t\tconst elementId = parseTableElementId(tableElement);\n\t\t\tlet binding = null;\n\n\t\t\tif (elementId) {\n\t\t\t\tbinding = this.dataManager.instance.getBinding(elementId, type);\n\t\t\t}\n\n\t\t\treturn binding;\n\t\t};\n\n\t\t/**\n\t\t * Get associated row binding for the given row element.\n\t\t *\n\t\t * @param {HTMLElement} rowElement row element\n\t\t * @return {Object|null} binding for supplied row, null if no binding found\n\t\t */\n\t\tconst getRowBinding = (rowElement) => {\n\t\t\tconst rowId = getRowId(rowElement);\n\n\t\t\tlet binding = null;\n\n\t\t\tif (rowId) {\n\t\t\t\tbinding = this.dataManager.instance.getBinding(rowId, 'row');\n\t\t\t}\n\n\t\t\treturn binding;\n\t\t};\n\n\t\t/**\n\t\t * Calculate maximum amount of rows that can be populated from a blueprint row.\n\t\t *\n\t\t * @param {HTMLElement} rowElement row element\n\t\t */\n\t\tconst calculateMaxRows = (rowElement) => {\n\t\t\tconst rowBindingMode = getRowBinding(rowElement)?.mode;\n\n\t\t\t// if row binding mode is not defined for the row element, use auto as default\n\t\t\tif (rowBindingMode === 'auto' || !rowBindingMode) {\n\t\t\t\treturn this.currentValues.length;\n\t\t\t}\n\t\t\t// max row calculations for operator mode\n\t\t\tif (rowBindingMode === 'operator') {\n\t\t\t\tconst rowBindingOperatorObject = getRowBinding(rowElement).operator;\n\n\t\t\t\treturn this.operatorFactory\n\t\t\t\t\t.getOperator(rowBindingOperatorObject.operatorType)\n\t\t\t\t\t.calculateMaxRows(rowBindingOperatorObject);\n\t\t\t}\n\n\t\t\tconst cells = Array.from(rowElement.querySelectorAll('td'));\n\n\t\t\treturn cells.reduce((carry, cell) => {\n\t\t\t\tconst tableElements = Array.from(cell.querySelectorAll('.wptb-ph-element'));\n\n\t\t\t\t// max amount of column values can be applied to this cell\n\t\t\t\tlet maxValue = 0;\n\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\ttableElements.map((element) => {\n\t\t\t\t\tconst colBinding = getTableElementBinding(element, 'column');\n\n\t\t\t\t\tif (colBinding) {\n\t\t\t\t\t\tmaxValue = Object.keys(colBinding)\n\t\t\t\t\t\t\t// TODO [erdembircan] rewrite this with filter > map\n\t\t\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(colBinding, key)) {\n\t\t\t\t\t\t\t\t\treturn colBinding[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\t\t\t.reduce((carry, binding) => {\n\t\t\t\t\t\t\t\tconst values = this.dataManager.instance.getColumnValues(binding);\n\t\t\t\t\t\t\t\treturn Math.max(values.length, carry);\n\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn Math.max(maxValue, carry);\n\t\t\t}, 1);\n\t\t};\n\n\t\t/**\n\t\t * Value apply list for different table elements.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tconst valueApplyList = {\n\t\t\ttext: (tableElement, value) => {\n\t\t\t\tconst { text } = value;\n\t\t\t\tif (text) {\n\t\t\t\t\tconst pElement = tableElement.querySelector('p');\n\t\t\t\t\t// since tinyMCE wraps text content with native font style elements, should be applying text value to first child node of paragraph element\n\t\t\t\t\tpElement.childNodes[0].textContent = value.text;\n\t\t\t\t}\n\t\t\t},\n\t\t\tbutton: (tableElement, value) => {\n\t\t\t\tconst { text, link } = value;\n\t\t\t\tif (text) {\n\t\t\t\t\tconst pElement = tableElement.querySelector('p');\n\t\t\t\t\t// since tinyMCE wraps text content with native font style elements, should be applying text value to first child node of paragraph element\n\t\t\t\t\tpElement.childNodes[0].textContent = value.text;\n\t\t\t\t}\n\t\t\t\tif (link) {\n\t\t\t\t\tconst anchorElement = tableElement.querySelector('a');\n\t\t\t\t\tif (anchorElement) {\n\t\t\t\t\t\tanchorElement.href = link;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tstar_rating: (tableElement, { rating }) => {\n\t\t\t\tif (rating) {\n\t\t\t\t\tconst maxStarCount = Number.parseInt(tableElement.dataset.starCount, 10);\n\t\t\t\t\tconst parsedValue = Number.parseFloat(rating);\n\n\t\t\t\t\t// limit star rating between maximum stars available on element and current rating\n\t\t\t\t\tconst limitedRating = Math.min(maxStarCount, parsedValue);\n\t\t\t\t\tconst roundedRating = Math.floor(limitedRating);\n\n\t\t\t\t\tconst emptyStars = Array.from(tableElement.querySelectorAll('li.wptb-rating-star'));\n\n\t\t\t\t\tconst fullStars = Array.from(tableElement.querySelectorAll('li.wptb-rating-star')).filter(\n\t\t\t\t\t\t(star, index) => {\n\t\t\t\t\t\t\t// clear any star rating on rating element\n\t\t\t\t\t\t\tstar.classList.remove('wptb-rating-star-selected-full');\n\t\t\t\t\t\t\tstar.classList.remove('wptb-rating-star-selected-half');\n\n\t\t\t\t\t\t\treturn index < roundedRating;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\tfullStars.map((star) => {\n\t\t\t\t\t\tstar.classList.add('wptb-rating-star-selected-full');\n\t\t\t\t\t});\n\n\t\t\t\t\t// add any remaining half star\n\t\t\t\t\tif (roundedRating !== limitedRating) {\n\t\t\t\t\t\temptyStars[fullStars.length].classList.add('wptb-rating-star-selected-half');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\timage: (tableElement, { link }) => {\n\t\t\t\tif (link) {\n\t\t\t\t\tlet imageElement = tableElement.querySelector('img');\n\t\t\t\t\tif (!imageElement) {\n\t\t\t\t\t\timageElement = document.createElement('img');\n\t\t\t\t\t\tconst imageParentAnchor = tableElement.querySelector('a');\n\t\t\t\t\t\timageParentAnchor.innerHTML = '';\n\n\t\t\t\t\t\timageParentAnchor.appendChild(imageElement);\n\t\t\t\t\t\timageElement.width = 200;\n\t\t\t\t\t\timageElement.height = 200;\n\t\t\t\t\t}\n\n\t\t\t\t\timageElement.src = link;\n\t\t\t\t}\n\t\t\t},\n\t\t\tcircle_rating: (tableElement, { percentage }) => {\n\t\t\t\tif (percentage) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\ttableElement.dataset.percentageCount = percentage;\n\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\ttableElement.querySelector('.wptb-rating-circle-wrapper span').textContent = `${percentage}%`;\n\n\t\t\t\t\tconst circleSlice = tableElement.querySelector('.wptb-rating-circle-slice');\n\n\t\t\t\t\tcircleSlice.style.clip =\n\t\t\t\t\t\tpercentage <= 50 ? 'rect(0em, 1em, 1em, 0.5em)' : 'rect(auto, auto, auto, auto)';\n\n\t\t\t\t\tcircleSlice.querySelector('.wptb-rating-circle-bar').style.transform = `rotate(${\n\t\t\t\t\t\tpercentage > 50 ? 180 : 0\n\t\t\t\t\t}deg)`;\n\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tconst limitedPercentage = Math.max(100, percentage) == percentage ? 100 : percentage;\n\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tcircleSlice.querySelector('.wptb-rating-circle-fill').style.transform = `rotate(${\n\t\t\t\t\t\t(360 / 100) * limitedPercentage\n\t\t\t\t\t}deg)`;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttext_icon_element: (tableElement, { text }) => {\n\t\t\t\tif (text) {\n\t\t\t\t\tconst textElement = tableElement.querySelector('#wptbTextIconMainText');\n\t\t\t\t\tif (textElement) {\n\t\t\t\t\t\ttextElement.textContent = text;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\t/**\n\t\t * Add value to a table element.\n\t\t *\n\t\t * @param {HTMLElement} tableElement table element\n\t\t * @param {*} value value\n\t\t * @param {Object} mapper mapper object to map values to certain element properties\n\t\t */\n\t\tconst addValueToTableElement = (tableElement, value, mapper = null) => {\n\t\t\tconst tableElementType = parseElementType(tableElement);\n\n\t\t\tlet elementValue = value;\n\n\t\t\tif (mapper) {\n\t\t\t\t// decide which mapper object to use, if no mapper property is defined for current table element type, use default mapper object\n\t\t\t\tconst mapperIndex = mapper[tableElementType] ?? mapper.default ?? ['text'];\n\n\t\t\t\t// create a new value object with mapped properties\n\t\t\t\telementValue = {};\n\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\tmapperIndex.map((mapIndex) => {\n\t\t\t\t\telementValue[mapIndex] = value;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (valueApplyList[tableElementType]) {\n\t\t\t\tvalueApplyList[tableElementType](tableElement, elementValue);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Sort row data values.\n\t\t *\n\t\t * @param {Object} sortOptions options object\n\t\t * @param {Array} rowValues row data values\n\t\t * @return {Array} sorted row data values\n\t\t */\n\t\tconst sortRowDataValues = (sortOptions, rowValues) => {\n\t\t\t// immutable row value array\n\t\t\tconst sortedValues = Array.from(rowValues);\n\n\t\t\tif (sortOptions) {\n\t\t\t\tconst { sortType, sortDirection, sortTarget } = sortOptions;\n\n\t\t\t\tif (sortType && sortDirection && sortType && sortTarget !== 'none') {\n\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\tsortedValues.sort((a, b) => {\n\t\t\t\t\t\tlet aVal = this.dataManager.instance.getColumnValueByIndex(0, sortTarget, [a]);\n\t\t\t\t\t\tlet bVal = this.dataManager.instance.getColumnValueByIndex(0, sortTarget, [b]);\n\n\t\t\t\t\t\t// sorting direction constant\n\t\t\t\t\t\tconst directionVal = sortDirection === 'asc' ? 1 : -1;\n\n\t\t\t\t\t\t// sort by numbers\n\t\t\t\t\t\tif (sortType === '123') {\n\t\t\t\t\t\t\taVal = Number.parseFloat(aVal);\n\t\t\t\t\t\t\tbVal = Number.parseFloat(bVal);\n\n\t\t\t\t\t\t\treturn (aVal - bVal) * directionVal;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sort by letters\n\t\t\t\t\t\tif (aVal > bVal) {\n\t\t\t\t\t\t\treturn directionVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bVal < aVal) {\n\t\t\t\t\t\t\treturn -1 * directionVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sortedValues;\n\t\t};\n\n\t\t/**\n\t\t * Batch populate table elements with their assigned binding values.\n\t\t *\n\t\t * @param {Array} tableElements an array of table elements\n\t\t * @param {number} rowIndex index of current row this table elements belongs to\n\t\t * @param {Object} rowBindings row bindings for the parent row of the supplied table elements\n\t\t * @param {Array} customValues custom values to use for populate operation\n\t\t * @param {Object} customBindings custom bindings to use instead of element and rows defined ones\n\t\t */\n\t\tconst batchPopulateTableElements = (\n\t\t\ttableElements,\n\t\t\trowIndex,\n\t\t\trowBindings,\n\t\t\tcustomValues = null,\n\t\t\tcustomBindings = null\n\t\t) => {\n\t\t\tconst sortedValues = sortRowDataValues(\n\t\t\t\trowBindings?.sort,\n\t\t\t\tcustomValues || this.dataManager.instance.getValues()\n\t\t\t);\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\ttableElements.map((tableElement) => {\n\t\t\t\tconst bindingColIdObject =\n\t\t\t\t\tcustomBindings?.column[parseTableElementId(tableElement)] ||\n\t\t\t\t\tgetTableElementBinding(tableElement, 'column');\n\n\t\t\t\tif (bindingColIdObject) {\n\t\t\t\t\tconst value = {};\n\n\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\tObject.keys(bindingColIdObject).map((key) => {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(bindingColIdObject, key)) {\n\t\t\t\t\t\t\tvalue[key] = this.dataManager.instance.getColumnValueByIndex(\n\t\t\t\t\t\t\t\trowIndex,\n\t\t\t\t\t\t\t\tbindingColIdObject[key],\n\t\t\t\t\t\t\t\tsortedValues\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\taddValueToTableElement(tableElement, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Get table elements from a supplied row element.\n\t\t *\n\t\t * @param {HTMLElement} rowElement row element\n\t\t * @return {Array} table element array\n\t\t *\n\t\t */\n\t\tconst getTableElementsFromRow = (rowElement) => {\n\t\t\treturn Array.from(rowElement.querySelectorAll('.wptb-ph-element'));\n\t\t};\n\n\t\t/**\n\t\t * Get table elements from a supplied table cell.\n\t\t *\n\t\t * @param {HTMLElement} cellElement cell element\n\t\t * @return {Array} table element array\n\t\t *\n\t\t */\n\t\tconst getTableElementsFromCell = (cellElement) => {\n\t\t\treturn Array.from(cellElement.querySelectorAll('.wptb-ph-element'));\n\t\t};\n\n\t\t/**\n\t\t * Logic for different row bindings.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tconst rowBindingLogicList = {\n\t\t\tauto: (rowElement, rowIndex) => {\n\t\t\t\tconst cells = Array.from(rowElement.querySelectorAll('td'));\n\n\t\t\t\tconst rowElements = [];\n\t\t\t\tconst autoBindings = cells.reduce((carry, cell, cellIndex) => {\n\t\t\t\t\tconst cellTableElements = getTableElementsFromCell(cell);\n\n\t\t\t\t\t// add cell elements to row elements array\n\t\t\t\t\trowElements.push(...cellTableElements);\n\n\t\t\t\t\t// get column value based on the index of the cell\n\t\t\t\t\tconst currentColumnId = this.dataManager.instance.getColumnIdFromIndex(cellIndex);\n\n\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\tcellTableElements.map((tableElement) => {\n\t\t\t\t\t\tif (currentColumnId) {\n\t\t\t\t\t\t\tconst elementId = parseTableElementId(tableElement);\n\n\t\t\t\t\t\t\tconst elementBindings = {};\n\t\t\t\t\t\t\tconst elementType = parseElementType(tableElement);\n\n\t\t\t\t\t\t\tconst availableBindingProperties = defaultMappings[elementType] || defaultMappings.default;\n\n\t\t\t\t\t\t\t// map element bindings to default binding\n\t\t\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\t\t\tavailableBindingProperties.map((prop) => {\n\t\t\t\t\t\t\t\telementBindings[prop] = currentColumnId;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// assign bindings relative to current cell this element resides in\n\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\tcarry[elementId] = elementBindings;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn carry;\n\t\t\t\t}, {});\n\n\t\t\t\tbatchPopulateTableElements(rowElements, rowIndex, getRowBinding(rowElement), null, {\n\t\t\t\t\tcolumn: autoBindings,\n\t\t\t\t});\n\t\t\t},\n\t\t\toperator: (rowElement, rowIndex) => {\n\t\t\t\tconst rowBindings = getRowBinding(rowElement);\n\t\t\t\tconst operatorOptions = rowBindings.operator;\n\n\t\t\t\tbatchPopulateTableElements(\n\t\t\t\t\tgetTableElementsFromRow(rowElement),\n\t\t\t\t\trowIndex,\n\t\t\t\t\trowBindings,\n\t\t\t\t\tthis.operatorFactory.getOperator(operatorOptions.operatorType).getOperatorResult(operatorOptions)\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\n\t\t/**\n\t\t * Generate necessary data for table elements based on binding row mode\n\t\t *\n\t\t * @param {string} mode row binding mode type\n\t\t * @param {HTMLElement} rowElement row element\n\t\t * @param {number} rowIndex current row index\n\t\t * @param {Object} modeOptions extra mode options if necessary\n\t\t */\n\t\tconst applyRowBindings = (mode, rowElement, rowIndex, modeOptions = {}) => {\n\t\t\trowBindingLogicList[mode](rowElement, rowIndex, modeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Populate and generate a row element based on blueprint row.\n\t\t *\n\t\t * @param {number} index current index of row\n\t\t * @param {HTMLElement} blueprintRow blueprint row element\n\t\t * @return {HTMLElement} generated row\n\t\t */\n\t\tconst populateRow = (index, blueprintRow) => {\n\t\t\tconst clonedRow = blueprintRow.cloneNode(true);\n\n\t\t\tconst rowBinding = getRowBinding(clonedRow);\n\n\t\t\t// give priority to row auto mode over element column bindings\n\t\t\tif (rowBinding && rowBinding.mode && rowBinding.mode !== 'none') {\n\t\t\t\tapplyRowBindings(rowBinding.mode, clonedRow, index);\n\t\t\t} else {\n\t\t\t\tconst rowElements = getTableElementsFromRow(clonedRow);\n\t\t\t\tbatchPopulateTableElements(rowElements, index, rowBinding);\n\t\t\t}\n\n\t\t\treturn clonedRow;\n\t\t};\n\n\t\t/**\n\t\t * Populate a blueprint row.\n\t\t *\n\t\t * @param {HTMLElement} row blueprint row\n\t\t * @return {Array} populated blueprint rows\n\t\t */\n\t\tconst populateBlueprint = (row) => {\n\t\t\tconst maxRows = calculateMaxRows(row);\n\t\t\tconst populatedRows = [];\n\t\t\tfor (let i = 0; i < maxRows; i += 1) {\n\t\t\t\tpopulatedRows.push(populateRow(i, row));\n\t\t\t}\n\n\t\t\treturn populatedRows;\n\t\t};\n\n\t\t/**\n\t\t * Generate a data table\n\t\t *\n\t\t * @param {HTMLElement} sourceTable source table to be generated with data\n\t\t * @param {Object} bindings data bindings\n\t\t * @param {Object} values data cell values\n\t\t * @return {HTMLElement} generated data table\n\t\t */\n\t\tthis.generateDataTable = (sourceTable, bindings, values) => {\n\t\t\tthis.updateDataManager(values, bindings);\n\t\t\tthis.currentBindings = bindings;\n\t\t\tthis.currentValues = values;\n\n\t\t\tconst clonedTable = sourceTable.cloneNode(true);\n\t\t\tconst tableBody = clonedTable.querySelector('tbody');\n\n\t\t\tconst parsedRows = parseTable(clonedTable);\n\t\t\tclearTable(clonedTable);\n\n\t\t\tconst populatedRows = parsedRows.reduce((carry, blueprintRow) => {\n\t\t\t\tconst pR = populateBlueprint(blueprintRow);\n\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tcarry = [...carry, ...pR];\n\n\t\t\t\treturn carry;\n\t\t\t}, []);\n\n\t\t\tpopulatedRows.map((r) => tableBody.appendChild(r));\n\n\t\t\treturn clonedTable;\n\t\t};\n\n\t\t/**\n\t\t * Prepare data table for frontend.\n\t\t *\n\t\t * @param {HTMLElement} targetTable target table\n\t\t */\n\t\tconst prepareFrontendTable = (targetTable) => {\n\t\t\t// parse data table options from table dataset\n\t\t\tconst dataTableOptions = JSON.parse(atob(targetTable.dataset.wptbDataTableOptions));\n\n\t\t\tconst generatedTable = this.generateDataTable(\n\t\t\t\ttargetTable,\n\t\t\t\tdataTableOptions.dataManager.bindings,\n\t\t\t\tdataTableOptions.dataManager.tempData.parsedData.values\n\t\t\t);\n\n\t\t\tconst mainWrapper = targetTable.parentNode;\n\n\t\t\t// remove blueprint table from DOM\n\t\t\ttargetTable.remove();\n\n\t\t\t// add generated table as our new table to DOM\n\t\t\tmainWrapper.appendChild(generatedTable);\n\t\t};\n\n\t\t/**\n\t\t * Generate data tables for frontend.\n\t\t */\n\t\tthis.frontendGenerateTables = () => {\n\t\t\tconst tables = Array.from(document.querySelectorAll('.wptb-preview-table[data-wptb-data-table=\"true\"]'));\n\t\t\ttables.map((table) => prepareFrontendTable(table));\n\t\t};\n\t}\n\n\treturn new DataTableGenerator();\n});\n","/**\n * Responsive class assignment for frontend operations.\n *\n * This file can be used as an UMD.\n */\n(function assignToGlobal(key, context, factory) {\n\tif (typeof exports === 'object' && typeof module !== 'undefined') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tcontext[key] = factory();\n\t}\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_ResponsiveFrontend', self || global, () => {\n\t/**\n\t * Log a message to console.\n\t *\n\t * @param {string} message message to be logged\n\t * @param {string} type console log type (e.g info, warn, error)\n\t * @throws An error will be given for invalid type value\n\t */\n\tfunction logToConsole(message, type = 'log') {\n\t\tif (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n\t\t\tif (console[type]) {\n\t\t\t\tconsole[type](`[WPTB]: ${message}`);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`no logging type found with given type value of [${type}]`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Object implementation for cell element operations.\n\t * If an empty cellElement parameter is given, a fresh cell element will be created.\n\t *\n\t * @param {HTMLElement | null} cellElement cell element\n\t * @param {null | CellObject} [isReference=null] main cell object if the current cell is a reference to that cell in cases like merged cells\n\t * @param reference\n\t * @class\n\t */\n\tfunction CellObject(cellElement, reference = null) {\n\t\t// cell element\n\t\tthis.element = cellElement;\n\n\t\tthis.referenceObject = reference;\n\n\t\t// variable for deciding part of merged cells to be visible or not\n\t\tthis.mergedRenderStatus = true;\n\n\t\t// connected merged cell references\n\t\tthis.mergedCells = {\n\t\t\trow: [],\n\t\t\tcolumn: [],\n\t\t};\n\n\t\t/**\n\t\t * Get merged render status.\n\t\t *\n\t\t * @return {boolean} render status\n\t\t */\n\t\tthis.getMergedRenderStatus = () => {\n\t\t\treturn this.mergedRenderStatus;\n\t\t};\n\n\t\t/**\n\t\t * Set merged render status.\n\t\t *\n\t\t * @param {boolean} status render status\n\t\t */\n\t\tthis.setMergedRenderStatus = (status) => {\n\t\t\tthis.mergedRenderStatus = status;\n\t\t};\n\n\t\t/**\n\t\t * Add merged cells.\n\t\t *\n\t\t * @param {string} mergeType merge type\n\t\t * @param {CellObject} cellObj cell object instance\n\t\t */\n\t\tthis.addToMergedCells = (mergeType, cellObj) => {\n\t\t\tthis.mergedCells[mergeType].push(cellObj);\n\t\t};\n\n\t\t/**\n\t\t * Determine if current cell is a reference to a main cell.\n\t\t *\n\t\t * @return {boolean} a reference or not\n\t\t */\n\t\tthis.isReference = () => {\n\t\t\treturn this.referenceObject !== null;\n\t\t};\n\n\t\tif (this.isReference()) {\n\t\t\tthis.element = cellElement.cloneNode(true);\n\t\t}\n\n\t\t// modifications object\n\t\t// this object will keep track of the modifications that has done to the cell to make sure we can roll them back to their original values\n\t\tthis.modifications = {};\n\n\t\t// spans object for cell's original merge values\n\t\tthis.spans = {\n\t\t\trow: 1,\n\t\t\tcol: 1,\n\t\t};\n\n\t\tthis.remainingSpans = {\n\t\t\trow: 0,\n\t\t\tcol: 0,\n\t\t};\n\n\t\t/**\n\t\t * Cache cell element's original span values.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tthis.cacheSpanValues = () => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tObject.keys(this.spans).map((k) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(this.spans, k)) {\n\t\t\t\t\tconst defaultVal = this.spans[k];\n\n\t\t\t\t\tthis.spans[k] = this.element.getAttribute(`${k}Span`) || defaultVal;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tthis.cacheSpanValues();\n\n\t\t/**\n\t\t * Get original span value of cell object.\n\t\t *\n\t\t * @param {string} spanType span type, available values are row-column\n\t\t * @param {boolean} fromElement, instead of original value, get the assigned span value from HTMLElement itself\n\t\t * @param fromElement\n\t\t * @throws An error will be given for invalid span type\n\t\t */\n\t\tthis.getSpan = (spanType, fromElement = false) => {\n\t\t\tconst spanVal = fromElement ? this.getElement().getAttribute(`${spanType}Span`) : this.spans[spanType];\n\t\t\tif (spanVal) {\n\t\t\t\treturn spanVal;\n\t\t\t}\n\t\t\tthrow new Error(`no span value found with the given type of [${spanType}]`);\n\t\t};\n\n\t\tthis.getRemainingSpans = (spanType) => {\n\t\t\treturn this.remainingSpans[spanType];\n\t\t};\n\n\t\tthis.setRemainingSpans = (spanType, value) => {\n\t\t\tthis.remainingSpans[spanType] = value;\n\t\t};\n\n\t\t/**\n\t\t * Get cell element.\n\t\t *\n\t\t * @return {HTMLElement} cell element\n\t\t */\n\t\tthis.getElement = () => {\n\t\t\treturn this.element;\n\t\t};\n\n\t\t/**\n\t\t * Create a cell element.\n\t\t *\n\t\t * @private\n\t\t * @return {HTMLTableDataCellElement}\n\t\t */\n\t\tthis.createCellElement = () => {\n\t\t\treturn document.createElement('td');\n\t\t};\n\n\t\t// create a new cell element if no cellElement argument is given with constructor function\n\t\tif (!cellElement) {\n\t\t\tthis.element = this.createCellElement();\n\t\t}\n\n\t\t/**\n\t\t * Add attribute to cell element.\n\t\t *\n\t\t * This function have the ability to add/remove attributes from cell element.\n\t\t * All attributes modified with this function will be cached with their before value for an easy reset on demand.\n\t\t *\n\t\t * @param {string} attributeKey attribute name in camelCase format, for sub-keys, use dot object notation\n\t\t * @param {any} attributeValue attribute value\n\t\t * @param {boolean} [append=false] append the value or replace it\n\t\t * @param {string} [glue=,] glue to join attribute value if append option is enabled\n\t\t */\n\t\tthis.setAttribute = (attributeKey, attributeValue, append = false, glue = ',') => {\n\t\t\tlet defaultVal = this.getElement()[attributeKey];\n\n\t\t\t// if attribute value is a function or an object, it means we pulled a whole declaration instead of only inline attribute values, in that case, use getAttribute to get only inline values related to that attribute\n\t\t\tif (typeof defaultVal === 'function' || typeof defaultVal === 'object') {\n\t\t\t\tdefaultVal = this.getElement().getAttribute(attributeKey);\n\t\t\t}\n\n\t\t\t// if there is already a default value defined, use that instead\n\t\t\tif (this.modifications[attributeKey]) {\n\t\t\t\tdefaultVal = this.modifications[attributeKey].default;\n\t\t\t}\n\n\t\t\tlet currentVal = defaultVal;\n\n\t\t\t// join attributes\n\t\t\tif (append) {\n\t\t\t\tcurrentVal += `${currentVal}${glue}${attributeValue}`;\n\t\t\t} else {\n\t\t\t\tcurrentVal = attributeValue;\n\t\t\t}\n\n\t\t\tthis.modifications[attributeKey] = { value: currentVal, default: defaultVal };\n\n\t\t\tthis.getElement()[attributeKey] = currentVal;\n\t\t};\n\n\t\t/**\n\t\t * Set row/colspan for cell.\n\t\t *\n\t\t * @param {string} spanType span type\n\t\t * @param {number} value value to assign to span\n\t\t * @return {boolean} if any space left to render the element\n\t\t */\n\t\tthis.setSpan = (spanType, value) => {\n\t\t\t// working on main cell\n\t\t\tif (!this.isReference()) {\n\t\t\t\tconst valueToApply = this.getSpan(spanType) - value < 0 ? this.getSpan(spanType) : value;\n\n\t\t\t\tthis.setAttribute(`${spanType}Span`, valueToApply);\n\n\t\t\t\t// calculate remaining cells amount to merge in this span type\n\t\t\t\tthis.setRemainingSpans(spanType, this.getSpan(spanType) - valueToApply);\n\n\t\t\t\t// set visibility of connected merge group cells to false to not render them since we added necessary span values to main cell which will leak into their position\n\t\t\t\tfor (let mc = 0; mc < valueToApply - 1; mc += 1) {\n\t\t\t\t\tif (this.mergedCells[spanType] && this.mergedCells[spanType][mc]) {\n\t\t\t\t\t\tthis.mergedCells[spanType][mc].setMergedRenderStatus(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// working on reference\n\n\t\t\tif (!this.getMergedRenderStatus()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst remainingVal = this.referenceObject.getRemainingSpans(spanType);\n\n\t\t\t// no space left to put cell\n\t\t\tif (remainingVal === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst valueToApply = remainingVal - value < 0 ? remainingVal : value;\n\n\t\t\tconst remainingParentSpans = remainingVal - valueToApply;\n\t\t\tthis.referenceObject.setRemainingSpans(spanType, remainingParentSpans);\n\n\t\t\tthis.setAttribute(`${spanType}Span`, valueToApply);\n\n\t\t\t// change render status of remaining connected merge cells\n\t\t\tif (remainingParentSpans !== 0) {\n\t\t\t\tconst totalConnectedCells = this.referenceObject.mergedCells[spanType].length;\n\t\t\t\tconst startIndex = totalConnectedCells - remainingVal + 1;\n\t\t\t\tconst endIndex = startIndex + valueToApply - 1;\n\n\t\t\t\tfor (let mc = startIndex; mc < endIndex; mc += 1) {\n\t\t\t\t\tthis.mergedCells[spanType][mc].setMergedRenderStatus(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t/**\n\t\t * Reset a modified attribute to its default value\n\t\t *\n\t\t * @param {string} attributeKey attribute name\n\t\t */\n\t\tthis.resetAttribute = (attributeKey) => {\n\t\t\tif (this.modifications[attributeKey]) {\n\t\t\t\tthis.getElement()[attributeKey] = this.modifications[attributeKey].default;\n\t\t\t\tthis.modifications[attributeKey] = undefined;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Reset all modified attributes of cell element to their default values.\n\t\t */\n\t\tthis.resetAllAttributes = () => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tObject.keys(this.modifications).map((k) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(this.modifications, k)) {\n\t\t\t\t\tthis.resetAttribute(k);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\treturn {\n\t\t\tgetElement: this.getElement,\n\t\t\tel: this.element,\n\t\t\tsetAttribute: this.setAttribute,\n\t\t\tresetAllAttributes: this.resetAllAttributes,\n\t\t\tgetSpan: this.getSpan,\n\t\t\tsetSpan: this.setSpan,\n\t\t\tgetRemainingSpans: this.getRemainingSpans,\n\t\t\tsetRemainingSpans: this.setRemainingSpans,\n\t\t\tisReference: this.isReference,\n\t\t\taddToMergedCells: this.addToMergedCells,\n\t\t\tmergedCells: this.mergedCells,\n\t\t\tsetMergedRenderStatus: this.setMergedRenderStatus,\n\t\t\tgetMergedRenderStatus: this.getMergedRenderStatus,\n\t\t};\n\t}\n\n\tCellObject.spanTypes = { row: 'row', column: 'col' };\n\n\t/**\n\t * Object implementation for table element operations.\n\t *\n\t * @param {HTMLElement} tableEl table element\n\t * @return {Object} instance\n\t * @class\n\t */\n\tfunction TableObject(tableEl) {\n\t\t/**\n\t\t * Table element.\n\t\t *\n\t\t * @private\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.tableElement = tableEl;\n\n\t\t/**\n\t\t * Parsed table object.\n\t\t *\n\t\t * @private\n\t\t * @type {Array}\n\t\t */\n\t\tthis.parsedTable = [];\n\n\t\t/**\n\t\t * An array of created table rows elements that are id'd according to their index in array.\n\t\t *\n\t\t * @type {[HTMLElement]}\n\t\t */\n\t\tthis.rowCache = [];\n\n\t\t/**\n\t\t * Original table elements minus the cells.\n\t\t *\n\t\t * @type {{rows: []}}\n\t\t * @private\n\t\t */\n\t\tthis.originals = { rows: [] };\n\n\t\t/**\n\t\t * Row colors of original table.\n\t\t *\n\t\t * @type {{even: string, header: string, odd: string}}\n\t\t */\n\t\tthis.rowColors = {\n\t\t\theader: null,\n\t\t\teven: null,\n\t\t\todd: null,\n\t\t};\n\n\t\t/**\n\t\t * Add cell to parsed array.\n\t\t *\n\t\t * @private\n\t\t * @param {number} r row id\n\t\t * @param {number} c column id\n\t\t * @param {CellObject} cellObject cell object to add to parsed array\n\t\t */\n\t\tthis.addToParsed = (r, c, cellObject) => {\n\t\t\tif (!this.parsedTable[r]) {\n\t\t\t\tthis.parsedTable[r] = [];\n\t\t\t}\n\n\t\t\tthis.parsedTable[r][c] = cellObject;\n\t\t};\n\n\t\t/**\n\t\t * Assign table cells into row and column numbers.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tthis.parseTable = () => {\n\t\t\tconst rows = Array.from(this.tableElement.querySelectorAll('tr'));\n\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\trows.map((r, ri) => {\n\t\t\t\t// cache original rows for future use\n\t\t\t\tthis.originals.rows.push(r);\n\n\t\t\t\tconst cells = Array.from(r.querySelectorAll('td'));\n\n\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\tcells.map((c, ci) => {\n\t\t\t\t\tconst currentCellObject = new CellObject(c);\n\t\t\t\t\tthis.addToParsed(ri, ci, currentCellObject);\n\n\t\t\t\t\tconst spanRow = currentCellObject.getSpan(CellObject.spanTypes.row);\n\t\t\t\t\tconst spanCol = currentCellObject.getSpan(CellObject.spanTypes.column);\n\n\t\t\t\t\tif (spanRow > 1) {\n\t\t\t\t\t\tfor (let sr = 1; sr < spanRow; sr += 1) {\n\t\t\t\t\t\t\tconst referenceCell = new CellObject(c, currentCellObject);\n\t\t\t\t\t\t\tcurrentCellObject.addToMergedCells('row', referenceCell);\n\t\t\t\t\t\t\tthis.addToParsed(ri + sr, ci, referenceCell);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (spanCol > 1) {\n\t\t\t\t\t\tfor (let sc = 1; sc < spanCol; sc += 1) {\n\t\t\t\t\t\t\tconst referenceCell = new CellObject(c, currentCellObject);\n\t\t\t\t\t\t\tcurrentCellObject.addToMergedCells('column', referenceCell);\n\t\t\t\t\t\t\tthis.addToParsed(ri, ci + sc, referenceCell);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.parseRowColors(rows);\n\t\t};\n\n\t\t/**\n\t\t * Parse row colors of original table for futures uses.\n\t\t *\n\t\t * @param {[HTMLElement]} rows html row elements\n\t\t * @private\n\t\t */\n\t\tthis.parseRowColors = (rows) => {\n\t\t\tif (!rows || rows.length <= 0) {\n\t\t\t\tlogToConsole('no rows are found to parse their colors', 'error');\n\t\t\t}\n\n\t\t\t// get row colors if they are defined as datasets on table element\n\t\t\tconst headerDatasetColor = this.tableElement.dataset.wptbHeaderBackgroundColor;\n\t\t\tconst evenRowDatasetColor = this.tableElement.dataset.wptbEvenRowBackgroundColor;\n\t\t\tconst oddRowDatasetColor = this.tableElement.dataset.wptbOddRowBackgroundColor;\n\n\t\t\t// header row color\n\t\t\tthis.rowColors.header =\n\t\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\t\theaderDatasetColor !== undefined\n\t\t\t\t\t? headerDatasetColor\n\t\t\t\t\t: rows[0].style.backgroundColor === ''\n\t\t\t\t\t? null\n\t\t\t\t\t: rows[0].style.backgroundColor;\n\n\t\t\t// calculate needed number of rows to get even and odd row background colors\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\tconst rowsNeeded = rows.length / 3 >= 1 ? 0 : rows.length === 1 ? 2 : (rows.length - 1) % 2;\n\n\t\t\t// create additional rows and add them to table to get their row background colors since table row count may be lower to get even/odd rows\n\t\t\tfor (let rn = 0; rn < rowsNeeded; rn += 1) {\n\t\t\t\tconst tempRow = document.createElement('tr');\n\n\t\t\t\tthis.tableElement.querySelector('tbody').appendChild(tempRow);\n\t\t\t\trows.push(tempRow);\n\t\t\t}\n\n\t\t\t// even & odd row colors\n\t\t\t// dataset colors have priority over colors gathered from computed row styles\n\t\t\tthis.rowColors.even = evenRowDatasetColor || getComputedStyle(rows[1]).backgroundColor;\n\t\t\tthis.rowColors.odd = evenRowDatasetColor ? oddRowDatasetColor : getComputedStyle(rows[2]).backgroundColor;\n\n\t\t\t// remove created rows from DOM\n\t\t\tfor (let r = 0; r < rowsNeeded; r += 1) {\n\t\t\t\trows[rows.length - (r + 1)].remove();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Add a row to the table.\n\t\t *\n\t\t * @param {Array} classList an array of class names to be added to row\n\t\t * @param {boolean} fromOriginals use rows from original table instead of creating a new one\n\t\t * @param {number} originalIndex original row index\n\t\t */\n\t\tthis.addRow = (classList, fromOriginals = false, originalIndex = 0) => {\n\t\t\tif (!Array.isArray(classList)) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tclassList = [classList];\n\t\t\t}\n\n\t\t\tconst tableBody = this.tableElement.querySelector('tbody');\n\t\t\tlet tempRow;\n\n\t\t\tif (!fromOriginals) {\n\t\t\t\tconst range = document.createRange();\n\t\t\t\trange.setStart(tableBody, 0);\n\t\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\t\ttempRow = range.createContextualFragment(`<tr class=\"${classList.join(' ')}\"></tr>`).childNodes[0];\n\t\t\t} else {\n\t\t\t\ttempRow = this.originals.rows[originalIndex];\n\t\t\t}\n\n\t\t\t// add row to table body\n\t\t\ttableBody.appendChild(tempRow);\n\n\t\t\t// cache row for future use\n\t\t\tthis.rowCache.push(tempRow);\n\n\t\t\treturn { el: tempRow, id: this.rowCache.length - 1 };\n\t\t};\n\n\t\t/**\n\t\t * Clear the contents of table element.\n\t\t */\n\t\tthis.clearTable = () => {\n\t\t\t// clear row cache\n\t\t\tthis.rowCache = [];\n\n\t\t\t// clear children of `tbody` element\n\t\t\tthis.tableElement.querySelector('tbody').innerHTML = '';\n\t\t};\n\n\t\t/**\n\t\t * Get row element from cache.\n\t\t *\n\t\t * @param {number} id row id\n\t\t * @return {null|HTMLElement} row element if present or null if not\n\t\t */\n\t\tthis.getRow = (id) => {\n\t\t\tif (this.rowCache[id]) {\n\t\t\t\treturn this.rowCache[id];\n\t\t\t}\n\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tlogToConsole(`no row with id [${id}] found in the cache.`, 'warn');\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Get maximum number of rows available at table.\n\t\t *\n\t\t * @return {number} maximum amount of rows\n\t\t */\n\t\tthis.maxRows = () => {\n\t\t\treturn this.parsedTable.length;\n\t\t};\n\n\t\t/**\n\t\t * Get the number of maximum available column count in the table.\n\t\t *\n\t\t * @return {number} maximum available column count\n\t\t */\n\t\tthis.maxColumns = () => {\n\t\t\treturn this.parsedTable.reduce((p, c) => {\n\t\t\t\tif (c.length > p) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tp = c.length;\n\t\t\t\t}\n\n\t\t\t\treturn p;\n\t\t\t}, 0);\n\t\t};\n\n\t\t/**\n\t\t * Get the table cell at specified row-column location.\n\t\t *\n\t\t * As in arrays, row and column numbering starts from number 0.\n\t\t *\n\t\t * @param {number} r row number\n\t\t * @param {number} c column number\n\t\t * @param {boolean} returnObject return object instead of HTMLElement\n\t\t * @return {HTMLElement | null | CellObject} element if address is possible, null if not\n\t\t */\n\t\tthis.getCell = (r, c, returnObject = false) => {\n\t\t\ttry {\n\t\t\t\tif (this.parsedTable[r][c]) {\n\t\t\t\t\tif (returnObject) {\n\t\t\t\t\t\treturn this.parsedTable[r][c];\n\t\t\t\t\t}\n\t\t\t\t\treturn this.parsedTable[r][c].el;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tlogToConsole(`no cell found at the given address of [${r}-${c}]`, 'warn');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tlogToConsole(`no cell found at the given address of [${r}-${c}]`, 'warn');\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Get cells at a given row.\n\t\t *\n\t\t * @param {number} rowId row id\n\t\t * @param {boolean} returnObj return an array of CellObject instead\n\t\t * @return {Array} cells in row\n\t\t */\n\t\tthis.getCellsAtRow = (rowId, returnObj = false) => {\n\t\t\tconst cells = [];\n\t\t\tfor (let c = 0; c < this.maxColumns(); c += 1) {\n\t\t\t\tconst tempCell = this.getCell(rowId, c, returnObj);\n\t\t\t\tif (tempCell) {\n\t\t\t\t\tcells.push(tempCell);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cells;\n\t\t};\n\n\t\t/**\n\t\t * Append the cell with given ids to a cached row\n\t\t *\n\t\t * @param {number} cellRowId cell row id\n\t\t * @param {number} cellColumnId cell column id\n\t\t * @param {number} rowId id of row in row cache\n\t\t */\n\t\tthis.appendToRow = (cellRowId, cellColumnId, rowId) => {\n\t\t\tconst cachedRow = this.getRow(rowId);\n\t\t\tconst cell = this.getCell(cellRowId, cellColumnId, true);\n\n\t\t\tif (cell && cachedRow) {\n\t\t\t\tcachedRow.appendChild(cell.getElement());\n\t\t\t}\n\t\t\treturn cell;\n\t\t};\n\n\t\t/**\n\t\t * Append html element to a cached row.\n\t\t *\n\t\t * @param {HTMLElement} el element\n\t\t * @param {number} rowId if of row in row cache\n\t\t */\n\t\tthis.appendElementToRow = (el, rowId) => {\n\t\t\tconst cachedRow = this.getRow(rowId);\n\n\t\t\tif (el && cachedRow) {\n\t\t\t\tcachedRow.appendChild(el);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Add cell object to a cached row.\n\t\t *\n\t\t * @param {CellObject} cellObj cell object\n\t\t * @param {number} rowId row id\n\t\t */\n\t\tthis.appendObjectToRow = (cellObj, rowId) => {\n\t\t\tconst cachedRow = this.getRow(rowId);\n\t\t\tif (cellObj && cachedRow) {\n\t\t\t\tcachedRow.appendChild(cellObj.getElement());\n\t\t\t}\n\t\t};\n\n\t\tthis.parseTable();\n\n\t\treturn {\n\t\t\tmaxRows: this.maxRows,\n\t\t\tmaxColumns: this.maxColumns,\n\t\t\taddRow: this.addRow,\n\t\t\tclearTable: this.clearTable,\n\t\t\tgetCell: this.getCell,\n\t\t\tappendToRow: this.appendToRow,\n\t\t\tappendElementToRow: this.appendElementToRow,\n\t\t\tappendObjectToRow: this.appendObjectToRow,\n\t\t\tgetCellsAtRow: this.getCellsAtRow,\n\t\t\tel: this.tableElement,\n\t\t\trowColors: this.rowColors,\n\t\t};\n\t}\n\n\t// default options for responsive class\n\tconst responsiveClassDefaultOptions = {\n\t\tquery: '.wptb-preview-table',\n\t\tdefaultClasses: ['wptb-plugin-responsive-base'],\n\t\tbindToResize: false,\n\t};\n\n\t/**\n\t * Class for handling operations related to responsive functionalities of tables.\n\t *\n\t * @class\n\t * @param {Object} options options object\n\t */\n\tfunction ResponsiveFront(options = {}) {\n\t\t// merge default options with user sent options\n\t\t// this.options = { ...responsiveClassDefaultOptions, ...options };\n\t\tthis.options = { ...responsiveClassDefaultOptions, ...options };\n\n\t\tthis.elements = Array.from(document.querySelectorAll(this.options.query));\n\n\t\tthis.elementObjects = this.elements.map((e) => {\n\t\t\treturn {\n\t\t\t\tel: e,\n\t\t\t\ttableObject: new TableObject(e),\n\t\t\t};\n\t\t});\n\n\t\t/**\n\t\t * Bind rebuilding of tables to window resize event.\n\t\t */\n\t\tthis.bindRebuildToResize = () => {\n\t\t\twindow.addEventListener('resize', () => {\n\t\t\t\tthis.rebuildTables();\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Get responsive directives of table element.\n\t\t *\n\t\t * @private\n\t\t * @param {HTMLElement} el table element\n\t\t * @return {Object | null} JSON representation of the directive element, if not available, null will be returned\n\t\t */\n\t\tthis.getDirective = (el) => {\n\t\t\tconst directiveString = el.dataset.wptbResponsiveDirectives;\n\n\t\t\tif (!directiveString) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn JSON.parse(atob(directiveString));\n\t\t};\n\n\t\t/**\n\t\t * Add default classes to rebuilt tables.\n\t\t *\n\t\t * This classes are added to lay out a base style for the responsive table.\n\t\t *\n\t\t * @param {HTMLElement} el table element\n\t\t */\n\t\tthis.addDefaultClasses = (el) => {\n\t\t\tel.classList.add(this.options.defaultClasses);\n\t\t};\n\n\t\t/**\n\t\t * Remove default classes from target table.\n\t\t *\n\t\t * @param {HTMLElement} el table element\n\t\t */\n\t\tthis.removeDefaultClasses = (el) => {\n\t\t\tel.classList.remove(this.options.defaultClasses);\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table in auto mode.\n\t\t *\n\t\t * Main characteristic of auto mode is table is rebuilt by stacking rows/columns on top of each other, leaving minimal effort from user to create a responsive table at breakpoints.\n\t\t *\n\t\t * @param {HTMLElement} tableEl table element\n\t\t * @param {string} sizeRange range id for current screen size\n\t\t * @param {Object} autoOption mode options\n\t\t * @param {TableObject} tableObj table object\n\t\t */\n\t\tthis.autoBuild = (tableEl, sizeRange, autoOption, tableObj) => {\n\t\t\t// base options\n\t\t\tconst direction = autoOption.cellStackDirection[sizeRange];\n\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\tconst topRowAsHeader = autoOption.topRowAsHeader[sizeRange];\n\t\t\tconst cellsPerRow = autoOption.cellsPerRow[sizeRange];\n\n\t\t\t// new options\n\t\t\tconst staticTopRow = autoOption.staticTopRow ? autoOption.staticTopRow[sizeRange] : false;\n\n\t\t\ttableObj.clearTable();\n\n\t\t\tif (sizeRange === 'desktop') {\n\t\t\t\tthis.buildDefault(tableObj);\n\t\t\t\tthis.removeDefaultClasses(tableEl);\n\t\t\t} else {\n\t\t\t\tthis.autoDirectionBuild(tableObj, direction, topRowAsHeader, staticTopRow, cellsPerRow);\n\t\t\t\tthis.addDefaultClasses(tableEl);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table with a direction to read cells.\n\t\t *\n\t\t * Direction in question in here is either by row or column:\n\t\t * * row: cells will be read row by row, in each row starting from the first column\n\t\t * * column: cells will be read column by column, in each column starting from the first row of the table\n\t\t *\n\t\t * @param {TableObject} tableObj table object\n\t\t * @param {string} direction direction to read cells, possible options [row, column]\n\t\t * @param {boolean} topRowAsHeader use top row as header\n\t\t * @param {boolean} staticTopRow use top row as static\n\t\t * @param {number} cellsPerRow cells per row\n\t\t */\n\t\tthis.autoDirectionBuild = (\n\t\t\ttableObj,\n\t\t\tdirection,\n\t\t\ttopRowAsHeader = false,\n\t\t\tstaticTopRow = false,\n\t\t\tcellsPerRow = 1\n\t\t) => {\n\t\t\tconst rows = tableObj.maxRows();\n\t\t\tconst columns = tableObj.maxColumns();\n\t\t\tconst isRowStacked = direction === 'row';\n\n\t\t\t// build table with top row as header\n\t\t\tif (topRowAsHeader) {\n\t\t\t\tthis.headerBuild(tableObj, direction, cellsPerRow);\n\t\t\t} else {\n\t\t\t\t// cell stack direction is selected as row\n\t\t\t\t// for future new functionality additions, keep different cell stack direction logic separate instead of generalizing the inner logic\n\t\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\t\tif (isRowStacked) {\n\t\t\t\t\tconst allCellsByRow = [];\n\t\t\t\t\tlet rowStartIndex = 0;\n\n\t\t\t\t\t// static top row option is enabled\n\t\t\t\t\tif (staticTopRow) {\n\t\t\t\t\t\tconst topCells = tableObj.getCellsAtRow(0, true);\n\n\t\t\t\t\t\tconst baseCells = topCells.filter((c) => !c.isReference());\n\n\t\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\t\tbaseCells.map((b) => {\n\t\t\t\t\t\t\trowStartIndex += 1;\n\t\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\t\t\t\t\t\t\trowObj.el.style.backgroundColor = tableObj.rowColors.header;\n\n\t\t\t\t\t\t\ttableObj.appendObjectToRow(b, rowObj.id);\n\n\t\t\t\t\t\t\tb.setAttribute('colSpan', cellsPerRow);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// get cells by reading row by row\n\t\t\t\t\tfor (let r = rowStartIndex; r < rows; r += 1) {\n\t\t\t\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t\t\t\ttableObj.getCellsAtRow(r, true).forEach((c) => {\n\t\t\t\t\t\t\t// only use non reference cells to avoid duplication for non top row as header tables\n\t\t\t\t\t\t\tif (!c.isReference()) {\n\t\t\t\t\t\t\t\tallCellsByRow.push(c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cellCount = allCellsByRow.length;\n\n\t\t\t\t\tfor (let c = 0, r = 0; c < cellCount; c += cellsPerRow, r += 1) {\n\t\t\t\t\t\t// const rowId = tableObj.addRow('wptb-row').id;\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t// preserve original row colors for even and odd rows\n\t\t\t\t\t\trowObj.el.style.backgroundColor = tableObj.rowColors[r % 2 === 0 ? 'odd' : 'even'];\n\n\t\t\t\t\t\t// place cells by 'cells by row' option value\n\t\t\t\t\t\tfor (let pR = 0; pR < cellsPerRow; pR += 1) {\n\t\t\t\t\t\t\tconst tempCell = allCellsByRow[c + pR];\n\n\t\t\t\t\t\t\tif (tempCell) {\n\t\t\t\t\t\t\t\ttableObj.appendElementToRow(tempCell.getElement(), rowObj.id);\n\n\t\t\t\t\t\t\t\ttempCell.resetAllAttributes();\n\t\t\t\t\t\t\t\ttempCell.setAttribute('style', 'width: 100% !important', true, ';');\n\t\t\t\t\t\t\t\ttempCell.setAttribute('colSpan', 1);\n\t\t\t\t\t\t\t\ttempCell.setAttribute('rowSpan', 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// cell stack direction is selected as column\n\t\t\t\telse {\n\t\t\t\t\tconst allCellsByCol = [];\n\t\t\t\t\tlet rowStartIndex = 0;\n\n\t\t\t\t\t// static top row option is enabled\n\t\t\t\t\tif (staticTopRow) {\n\t\t\t\t\t\tconst topCells = tableObj.getCellsAtRow(0, true);\n\n\t\t\t\t\t\tconst baseCells = topCells.filter((t) => !t.isReference());\n\n\t\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\t\tbaseCells.map((b) => {\n\t\t\t\t\t\t\trowStartIndex += 1;\n\t\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\t\t\t\t\t\t\trowObj.el.style.backgroundColor = tableObj.rowColors.header;\n\n\t\t\t\t\t\t\ttableObj.appendObjectToRow(b, rowObj.id);\n\n\t\t\t\t\t\t\tb.setAttribute('colSpan', cellsPerRow);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// read all cells column by column\n\t\t\t\t\tfor (let c = 0; c < columns; c += 1) {\n\t\t\t\t\t\tfor (let r = rowStartIndex; r < rows; r += 1) {\n\t\t\t\t\t\t\tconst tCell = tableObj.getCell(r, c, true);\n\t\t\t\t\t\t\t// only use non reference cells to avoid duplication for non top row as header tables\n\t\t\t\t\t\t\tif (tCell && !tCell.isReference()) {\n\t\t\t\t\t\t\t\tallCellsByCol.push(tCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cellCount = allCellsByCol.length;\n\n\t\t\t\t\tfor (let c = 0, r = 0; c < cellCount; c += cellsPerRow, r += 1) {\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t// preserve original row colors for even and odd rows\n\t\t\t\t\t\trowObj.el.style.backgroundColor = tableObj.rowColors[r % 2 === 0 ? 'odd' : 'even'];\n\n\t\t\t\t\t\tfor (let cR = 0; cR < cellsPerRow; cR += 1) {\n\t\t\t\t\t\t\tconst tempCell = allCellsByCol[c + cR];\n\n\t\t\t\t\t\t\tif (tempCell) {\n\t\t\t\t\t\t\t\ttableObj.appendElementToRow(tempCell.getElement(), rowObj.id);\n\n\t\t\t\t\t\t\t\ttempCell.resetAllAttributes();\n\t\t\t\t\t\t\t\ttempCell.setAttribute('style', 'width: 100% !important', true, ';');\n\t\t\t\t\t\t\t\ttempCell.setAttribute('colSpan', 1);\n\t\t\t\t\t\t\t\ttempCell.setAttribute('rowSpan', 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Build table with top row assigned as header.\n\t\t *\n\t\t * @param {TableObject} tableObj table object\n\t\t * @param {string} direction cell stack direction, possible options are [row, column]\n\t\t * @param {number} itemsPerHeader items bound to each header element\n\t\t */\n\t\tthis.headerBuild = (tableObj, direction, itemsPerHeader = 1) => {\n\t\t\t// cells at header\n\t\t\t// applying header row color to cells\n\t\t\tconst headerCells = tableObj.getCellsAtRow(0, true).map((h) => {\n\t\t\t\th.setAttribute('style', `background-color: ${tableObj.rowColors.header}`, true, ';');\n\t\t\t\treturn h;\n\t\t\t});\n\n\t\t\tconst stackedAsColumn = direction === 'column';\n\n\t\t\t// row count\n\t\t\tconst rows = tableObj.maxRows();\n\t\t\t// column count\n\t\t\tconst columns = tableObj.maxColumns();\n\n\t\t\tconst rowBorderStyle = '3px solid gray';\n\n\t\t\t// stack direction is column\n\t\t\tif (stackedAsColumn) {\n\t\t\t\t/**\n\t\t\t\t * Add header cells as new row to table.\n\t\t\t\t *\n\t\t\t\t * @param {boolean} addBorder add top border to header row\n\t\t\t\t */\n\t\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\t\tfunction addHeaderCells(addBorder = false) {\n\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\tif (addBorder) {\n\t\t\t\t\t\trowObj.el.style.borderTop = rowBorderStyle;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\theaderCells.map((h) => {\n\t\t\t\t\t\t// clone header cell to reuse it for multiple rows\n\t\t\t\t\t\ttableObj.appendElementToRow(h.el.cloneNode(true), rowObj.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// count of header rows that will be created\n\t\t\t\tconst headerCount = Math.ceil((rows - 1) / itemsPerHeader);\n\t\t\t\t// row index on original table\n\t\t\t\tlet currentOriginalRow = 1;\n\t\t\t\tfor (let r = 0; r < headerCount; r += 1) {\n\t\t\t\t\t// create header row and add to table\n\t\t\t\t\taddHeaderCells(r > 0);\n\t\t\t\t\tfor (let c = 0; c < itemsPerHeader; c += 1) {\n\t\t\t\t\t\t// break iteration when current row surpasses original row amount\n\t\t\t\t\t\tif (currentOriginalRow >= rows) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t// apply row color relative to current header row\n\t\t\t\t\t\trowObj.el.style.backgroundColor = tableObj.rowColors[c % 2 === 0 ? 'even' : 'odd'];\n\t\t\t\t\t\tfor (let cc = 0; cc < columns; cc += 1) {\n\t\t\t\t\t\t\tconst currentCell = tableObj.getCell(currentOriginalRow, cc, true);\n\n\t\t\t\t\t\t\tif (currentCell) {\n\t\t\t\t\t\t\t\tcurrentCell.resetAllAttributes();\n\n\t\t\t\t\t\t\t\t// status to decide whether render cell or not\n\t\t\t\t\t\t\t\tlet cellAddStatus = true;\n\n\t\t\t\t\t\t\t\tconst rowSpan = currentCell.getSpan(CellObject.spanTypes.row);\n\t\t\t\t\t\t\t\tconst colSpan = currentCell.getSpan(CellObject.spanTypes.column);\n\n\t\t\t\t\t\t\t\tif (rowSpan > 1) {\n\t\t\t\t\t\t\t\t\t// items remaining in current header\n\t\t\t\t\t\t\t\t\tconst remainingItems = itemsPerHeader - c;\n\n\t\t\t\t\t\t\t\t\t// calculate whether to apply full rowspan value or remaining item value depending on the current position of the cell\n\t\t\t\t\t\t\t\t\tconst currentRowSpan = Math.min(rowSpan, remainingItems);\n\n\t\t\t\t\t\t\t\t\tcellAddStatus = currentCell.setSpan(CellObject.spanTypes.row, currentRowSpan);\n\t\t\t\t\t\t\t\t\t// reset render status of cell to visible for future use\n\t\t\t\t\t\t\t\t\tcurrentCell.setMergedRenderStatus(true);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (cellAddStatus) {\n\t\t\t\t\t\t\t\t\ttableObj.appendObjectToRow(currentCell, rowObj.id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentOriginalRow += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// stack direction is row\n\t\t\t\t// number of headers that will be created\n\t\t\t\tconst headerCount = Math.ceil((rows - 1) / itemsPerHeader);\n\n\t\t\t\tlet currentOriginalRow = 1;\n\n\t\t\t\tfor (let hc = 0; hc < headerCount; hc += 1) {\n\t\t\t\t\tfor (let c = 0; c < columns; c += 1) {\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t// clear out row color to override row color with cell colors\n\t\t\t\t\t\trowObj.el.style.backgroundColor = 'none';\n\n\t\t\t\t\t\tif (hc > 0 && c === 0) {\n\t\t\t\t\t\t\trowObj.el.style.borderTop = rowBorderStyle;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst clonedHeaderCell = headerCells[c].el.cloneNode(true);\n\n\t\t\t\t\t\t// apply header row color to header cell\n\t\t\t\t\t\tclonedHeaderCell.style.backgroundColor = `${tableObj.rowColors.header} !important`;\n\n\t\t\t\t\t\ttableObj.appendElementToRow(clonedHeaderCell, rowObj.id);\n\n\t\t\t\t\t\tfor (let r = 0; r < itemsPerHeader; r += 1) {\n\t\t\t\t\t\t\tif (currentOriginalRow + r >= rows) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// const currentCell = tableObj.appendToRow(currentOriginalRow + r, c, rowObj.id);\n\t\t\t\t\t\t\tconst currentCell = tableObj.getCell(currentOriginalRow + r, c, true);\n\n\t\t\t\t\t\t\tif (currentCell) {\n\t\t\t\t\t\t\t\tcurrentCell.resetAllAttributes();\n\n\t\t\t\t\t\t\t\tlet cellAddStatus = true;\n\n\t\t\t\t\t\t\t\tconst rowSpan = currentCell.getSpan(CellObject.spanTypes.row);\n\t\t\t\t\t\t\t\tconst colSpan = currentCell.getSpan(CellObject.spanTypes.column);\n\n\t\t\t\t\t\t\t\tif (rowSpan > 1) {\n\t\t\t\t\t\t\t\t\tconst remainingItems = itemsPerHeader - r;\n\n\t\t\t\t\t\t\t\t\tconst currentRowSpan = Math.min(rowSpan, remainingItems);\n\n\t\t\t\t\t\t\t\t\tcellAddStatus = currentCell.setSpan(CellObject.spanTypes.row, currentRowSpan);\n\n\t\t\t\t\t\t\t\t\tconst rS = currentCell.el.getAttribute('rowSpan');\n\t\t\t\t\t\t\t\t\tconst cS = currentCell.el.getAttribute('colSpan');\n\n\t\t\t\t\t\t\t\t\t// switch span values\n\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute('rowSpan', cS);\n\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute('colSpan', rS);\n\n\t\t\t\t\t\t\t\t\tcurrentCell.setMergedRenderStatus(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (cellAddStatus) {\n\t\t\t\t\t\t\t\t\t// color index for the cell, this will be used to reflect table row colors to cells. currently, grouping up the same items with the same color code\n\t\t\t\t\t\t\t\t\tlet colorIndex = (currentOriginalRow + r + hc) % 2 === 0 ? 'even' : 'odd';\n\n\t\t\t\t\t\t\t\t\t// for better visuals and distinction for tables with 1 item per header, using this calculation for color index\n\t\t\t\t\t\t\t\t\tif (itemsPerHeader === 1) {\n\t\t\t\t\t\t\t\t\t\tcolorIndex = currentOriginalRow % 2 === 0 ? 'even' : 'odd';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute(\n\t\t\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t\t\t`background-color: ${tableObj.rowColors[colorIndex]}`,\n\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t';'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\ttableObj.appendObjectToRow(currentCell, rowObj.id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentOriginalRow += itemsPerHeader;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Build table in its default form.\n\t\t *\n\t\t * Default form of table is the layout it has in desktop breakpoint.\n\t\t *\n\t\t * @param {TableObject} tableObj table object\n\t\t */\n\t\tthis.buildDefault = (tableObj) => {\n\t\t\tconst rows = tableObj.maxRows();\n\t\t\tconst columns = tableObj.maxColumns();\n\n\t\t\tfor (let r = 0; r < rows; r += 1) {\n\t\t\t\tconst rowId = tableObj.addRow('', true, r).id;\n\t\t\t\tfor (let c = 0; c < columns; c += 1) {\n\t\t\t\t\tconst tempCell = tableObj.getCell(r, c, true);\n\n\t\t\t\t\t// only render cell if a valid cell is found and it is not a reference\n\t\t\t\t\tif (tempCell && !tempCell.isReference()) {\n\t\t\t\t\t\t// reset all modified attributes of cell to their default values\n\t\t\t\t\t\ttempCell.resetAllAttributes();\n\t\t\t\t\t\ttableObj.appendElementToRow(tempCell.getElement(), rowId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Calculate range id for given size value.\n\t\t *\n\t\t * @param {number} val value\n\t\t * @param {Object} stops an object containing stop ids as keys and respective sizes as values\n\t\t * @return {string} range id\n\t\t */\n\t\tthis.calculateRangeId = (val, stops) => {\n\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\tconst sortedStops = Object.keys(stops).sort((a, b) => stops[a].width - stops[b].width);\n\n\t\t\tlet rangeId = sortedStops[0];\n\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tsortedStops.map((s) => {\n\t\t\t\tif (val >= stops[s].width) {\n\t\t\t\t\trangeId = s;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn rangeId;\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table according to its responsive directives.\n\t\t *\n\t\t * @private\n\t\t * @param {HTMLElement} el table element\n\t\t * @param {number} size size in pixels\n\t\t * @param {TableObject} tableObj table object instance\n\t\t * @throws An error will be given for invalid mode name\n\t\t */\n\t\tthis.rebuildTable = (el, size, tableObj) => {\n\t\t\tconst directive = this.getDirective(el);\n\n\t\t\tif (directive) {\n\t\t\t\tif (!directive.responsiveEnabled) {\n\t\t\t\t\t// this.buildDefault(tableObj);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mode = directive.responsiveMode;\n\n\t\t\t\t// main build logic for different responsive modes should be named in the format of `{modeName}Build` to automatically call the associated function from here\n\t\t\t\tconst buildCallable = this[`${mode}Build`];\n\n\t\t\t\tif (!size) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tsize = el.getBoundingClientRect().width;\n\t\t\t\t}\n\n\t\t\t\tconst sizeRangeId = this.calculateRangeId(size, directive.breakpoints);\n\n\t\t\t\tif (buildCallable) {\n\t\t\t\t\tconst modeOptions = directive.modeOptions[mode];\n\t\t\t\t\tbuildCallable.call(this, el, sizeRangeId, modeOptions, tableObj);\n\n\t\t\t\t\tWPTB_RecalculateIndexes(el);\n\t\t\t\t\tconst tabEvent = new CustomEvent('table:rebuilt', {\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tsizeRangeId,\n\t\t\t\t\t\t\ttopRowAsHeader: directive.modeOptions[mode].topRowAsHeader,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tel.dispatchEvent(tabEvent);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`No build mode named as [${mode}] found.`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Rebuild tables with the given screen size.\n\t\t *\n\t\t * @param {number} size screen size\n\t\t */\n\t\tthis.rebuildTables = (size) => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tthis.elementObjects.map((o) => {\n\t\t\t\tlet innerSize = size;\n\t\t\t\tif (!size) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tinnerSize = window.innerWidth;\n\n\t\t\t\t\tconst directives = this.getDirective(o.el);\n\t\t\t\t\t// calculate size according to relative width directive\n\t\t\t\t\tif (directives && directives.relativeWidth) {\n\t\t\t\t\t\tswitch (directives.relativeWidth) {\n\t\t\t\t\t\t\tcase 'window':\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tinnerSize = window.innerWidth;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'container':\n\t\t\t\t\t\t\t\t// get the size of the container table is in\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tinnerSize = o.el.parentNode.parentNode.parentNode.clientWidth;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tinnerSize = window.innerWidth;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.rebuildTable(o.el, innerSize, o.tableObject);\n\t\t\t});\n\t\t};\n\n\t\tif (this.options.bindToResize) {\n\t\t\tthis.bindRebuildToResize();\n\t\t}\n\n\t\treturn {\n\t\t\trebuildTables: this.rebuildTables,\n\t\t\tgetDirective: this.getDirective,\n\t\t\tcalculateRangeId: this.calculateRangeId,\n\t\t};\n\t}\n\n\treturn ResponsiveFront;\n});\n","/**\n * Attach style pass component to global space.\n */\n(function attachToGlobal(globalKey, context, factory) {\n\t// eslint-disable-next-line no-param-reassign\n\tcontext[globalKey] = factory();\n})('WPTB_StylePass', self || global, function () {\n\t/**\n\t * Style pass component\n\t * This component will be used to either let or block theme related styling to affect table styles.\n\t *\n\t * @class\n\t */\n\tfunction StylePass() {\n\t\tthis.options = { stylesheets: {} };\n\n\t\t/**\n\t\t * Maintain the same position of table container and insert shadow root container to exact same index.\n\t\t *\n\t\t * @param {HTMLElement} shadowRootContainer\n\t\t * @param {HTMLElement} tableContainer\n\t\t *\n\t\t */\n\t\tthis.insertShadowRoot = (shadowRootContainer, tableContainer) => {\n\t\t\tconst mainParent = tableContainer.parentNode;\n\t\t\tconst parentChildren = Array.from(mainParent.children);\n\t\t\tconst tableIndex = parentChildren.indexOf(tableContainer);\n\t\t\tconst upSibling = tableIndex - 1 > 0 ? null : parentChildren[tableIndex - 1];\n\t\t\tconst downSibling = tableIndex + 1 >= parentChildren.length ? null : parentChildren[tableIndex + 1];\n\n\t\t\tthis.prepareAllStylesheets(this.options.stylesheets, shadowRootContainer.shadowRoot);\n\t\t\tthis.borrowFromTheme(tableContainer);\n\n\t\t\tshadowRootContainer.shadowRoot.appendChild(tableContainer);\n\n\t\t\tif (upSibling) {\n\t\t\t\tupSibling.insertAdjacentElement('afterend', shadowRootContainer);\n\t\t\t} else if (downSibling) {\n\t\t\t\tdownSibling.insertAdjacentElement('beforebegin', shadowRootContainer);\n\t\t\t} else {\n\t\t\t\tmainParent.appendChild(shadowRootContainer);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Borrow some theme styles and reflect them to table.\n\t\t *\n\t\t * @param {HTMLElement} tableContainer table container element\n\t\t */\n\t\tthis.borrowFromTheme = (tableContainer) => {\n\t\t\tconst table = tableContainer.querySelector('table');\n\t\t\tconst { fontFamily } = getComputedStyle(table);\n\t\t\ttable.style.fontFamily = fontFamily;\n\t\t};\n\n\t\t/**\n\t\t * Initialize and start style pass.\n\t\t *\n\t\t * @param {Object} options style pass options\n\t\t */\n\t\tthis.init = (options) => {\n\t\t\tthis.options = { ...this.options, ...options };\n\t\t\tconst tableContainers = Array.from(document.querySelectorAll('div .wptb-table-container'));\n\n\t\t\tif (tableContainers.length > 0) {\n\t\t\t\ttableContainers.map(this.setupStylePass);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Check if style pass is enabled for current table.\n\t\t *\n\t\t * @param {HTMLElement} tableContainer table container\n\t\t * @return {string} status null for disabled, true for enabled\n\t\t */\n\t\tthis.checkTableEligibility = (tableContainer) => {\n\t\t\tconst table = tableContainer.querySelector('table');\n\t\t\treturn table.dataset.disableThemeStyles;\n\t\t};\n\n\t\t/**\n\t\t * Prepare containers for necessary style pass operations.\n\t\t *\n\t\t * @param {HTMLElement} tableContainer table container\n\t\t */\n\t\tthis.setupStylePass = (tableContainer) => {\n\t\t\t// abort if style pass is not enabled for table\n\t\t\tif (!this.checkTableEligibility(tableContainer)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst container = document.createElement('div');\n\t\t\tconst maxWidth = tableContainer.querySelector('table').dataset.wptbTableContainerMaxWidth;\n\t\t\tif (maxWidth) {\n\t\t\t\tcontainer.style.maxWidth = `${maxWidth}px`;\n\t\t\t}\n\n\t\t\tcontainer.attachShadow({ mode: 'open' });\n\n\t\t\tthis.insertShadowRoot(container, tableContainer);\n\t\t};\n\n\t\tthis.prepareAllStylesheets = (stylesheetsObj, root) => {\n\t\t\tObject.keys(stylesheetsObj).map((s) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(stylesheetsObj, s)) {\n\t\t\t\t\tthis.prepareStylesheet(s, stylesheetsObj[s], root);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tthis.prepareStylesheet = (handler, url, root) => {\n\t\t\tconst linkElement = document.createElement('link');\n\t\t\tlinkElement.setAttribute('id', handler);\n\t\t\tlinkElement.setAttribute('href', url);\n\t\t\tlinkElement.setAttribute('rel', 'stylesheet');\n\t\t\tlinkElement.setAttribute('media', 'all');\n\n\t\t\troot.appendChild(linkElement);\n\t\t};\n\t}\n\n\treturn new StylePass();\n});\n","(function ($) {\n\t/**\n\t * All of the code for your public-facing JavaScript source\n\t * should reside in this file.\n\t *\n\t * Note: It has been assumed you will write jQuery code here, so the\n\t * $ function reference has been prepared for usage within the scope\n\t * of this function.\n\t *\n\t * This enables you to define handlers, for when the DOM is ready:\n\t *\n\t * $(function() {\n\t *\n\t * });\n\t *\n\t * When the window is loaded:\n\t *\n\t * $( window ).load(function() {\n\t *\n\t * });\n\t *\n\t * ...and/or other possibilities.\n\t *\n\t * Ideally, it is not considered best practise to attach more than a\n\t * single DOM-ready or window-load handler for a particular page.\n\t * Although scripts in the WordPress core, Plugins and Themes may be\n\t * practising this, we should strive to set a better example in our own work.\n\t *\n\t * The file is enqueued from inc/frontend/class-frontend.php.\n\t */\n\n\tjQuery(document).ready(function ($) {\n\t\tWPTB_DataTableGenerator.frontendGenerateTables();\n\n\t\tconst tableContainers = document.getElementsByClassName('wptb-table-container');\n\t\t/**\n\t\t * Adds hover color change support for supported button elements.\n\t\t *\n\t\t * @param querySelector\n\t\t */\n\t\tfunction addHoverSupport(querySelector) {\n\t\t\tconst buttons = Array.from(document.querySelectorAll(querySelector));\n\n\t\t\tbuttons.map((b) => {\n\t\t\t\tb.addEventListener('mouseenter', (e) => {\n\t\t\t\t\tconst el = e.target;\n\t\t\t\t\t// hover background-color\n\t\t\t\t\tif (el.dataset.wptbElementHoverBgColor) {\n\t\t\t\t\t\tel.style.backgroundColor = el.dataset.wptbElementHoverBgColor;\n\t\t\t\t\t}\n\t\t\t\t\t// hover color\n\t\t\t\t\tif (el.dataset.wptbElementHoverTextColor) {\n\t\t\t\t\t\tel.style.color = el.dataset.wptbElementHoverTextColor;\n\t\t\t\t\t}\n\t\t\t\t\t// hover scale\n\t\t\t\t\tif (el.dataset.wptbElementHoverScale) {\n\t\t\t\t\t\tel.style.transform = `scale(${b.dataset.wptbElementHoverScale})`;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tb.addEventListener('mouseleave', (e) => {\n\t\t\t\t\t// reset all supported hover properties to their default value\n\t\t\t\t\tconst el = e.target;\n\t\t\t\t\tif (el.dataset.wptbElementHoverBgColor) {\n\t\t\t\t\t\tel.style.backgroundColor = el.dataset.wptbElementBgColor;\n\t\t\t\t\t}\n\t\t\t\t\tif (el.dataset.wptbElementHoverTextColor) {\n\t\t\t\t\t\tel.style.color = el.dataset.wptbElementColor;\n\t\t\t\t\t}\n\t\t\t\t\tif (el.dataset.wptbElementHoverScale) {\n\t\t\t\t\t\tel.style.transform = 'scale(1)';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// add all kind of functions that have event listeners before responsive table reconstruction to make sure those event listeners are carried over to their clones\n\t\taddHoverSupport('.wptb-preview-table .wptb-button');\n\n\t\t/**\n\t\t * function wptb_tableContainerSectionSmall\n\t\t * add class ( wptb-section-small ) in small width\n\t\t * remove this class in large width\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tfunction wptb_tableContainerSectionSmall() {\n\t\t\tconst wptbTableContainer = jQuery('.wptb-table-container');\n\t\t\tconst sw = wptbTableContainer.width();\n\t\t\tif (wptbTableContainer.length > 0) {\n\t\t\t\tif (sw < 480) {\n\t\t\t\t\twptbTableContainer.addClass('wptb-section-small');\n\t\t\t\t} else {\n\t\t\t\t\twptbTableContainer.removeClass('wptb-section-small');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * function wptb_tableGenerateMobile\n\t\t * generates a mobile view of the table\n\t\t * when the top row of the table is not a heading\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tfunction wptb_tableGenerateMobile() {\n\t\t\tconst wptbTableContainer = document.getElementsByClassName('wptb-table-container');\n\t\t\tconst wptbPreviewTable = document.getElementsByClassName('wptb-preview-table');\n\t\t\tconst wptbPreviewTableMobile = document.getElementsByClassName('wptb-preview-table-mobile');\n\t\t\tif (wptbTableContainer.length > 0 && wptbPreviewTable.length > 0) {\n\t\t\t\tconst sw = wptbTableContainer[0].offsetWidth;\n\t\t\t\tif (sw < 480) {\n\t\t\t\t\twptbPreviewTable[0].style.display = 'none';\n\n\t\t\t\t\tif (wptbPreviewTableMobile.length == 0) {\n\t\t\t\t\t\tconst tableRows = wptbPreviewTable[0].rows;\n\t\t\t\t\t\tconst tableRowTop = tableRows[0];\n\t\t\t\t\t\tconst tableRowTopChildren = tableRowTop.children;\n\t\t\t\t\t\tlet columnCount = 0;\n\n\t\t\t\t\t\tfor (let i = 0; i < tableRowTopChildren.length; i++) {\n\t\t\t\t\t\t\tcolumnCount += tableRowTopChildren[i].colSpan;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newTableArray = [];\n\n\t\t\t\t\t\tfor (let i = 0; i < columnCount; i++) {\n\t\t\t\t\t\t\tnewTableArray[i] = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (let i = 0; i < tableRows.length; i++) {\n\t\t\t\t\t\t\tconst rowChildren = tableRows[i].children;\n\n\t\t\t\t\t\t\tfor (let j = 0; j < columnCount; j++) {\n\t\t\t\t\t\t\t\tif (rowChildren[j].dataset.xIndex == j) {\n\t\t\t\t\t\t\t\t\tconst tdNew = rowChildren[j].cloneNode(true);\n\t\t\t\t\t\t\t\t\tif (tableRows[i].style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\ttdNew.style.backgroundColor = tableRows[i].style.backgroundColor;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnewTableArray[j].push(tdNew);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewTableArray[j].push('');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst table = document.createElement('table');\n\t\t\t\t\t\ttable.classList.add('wptb-preview-table-mobile');\n\t\t\t\t\t\tconst tableStyle = wptbPreviewTable[0].getAttribute('style');\n\t\t\t\t\t\ttable.setAttribute('style', tableStyle);\n\t\t\t\t\t\ttable.style.display = 'table';\n\t\t\t\t\t\tfor (let i = 0; i < columnCount; i++) {\n\t\t\t\t\t\t\tconst row = table.insertRow(-1);\n\t\t\t\t\t\t\trow.classList.add('wptb-row');\n\n\t\t\t\t\t\t\tfor (let j = 0; j < tableRows.length; j++) {\n\t\t\t\t\t\t\t\tif (newTableArray[i][j]) {\n\t\t\t\t\t\t\t\t\trow.appendChild(newTableArray[i][j]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twptbTableContainer[0].appendChild(table);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twptbPreviewTableMobile[0].style.display = 'table';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twptbPreviewTable[0].style.display = 'table';\n\t\t\t\t\tif (wptbPreviewTableMobile.length > 0) {\n\t\t\t\t\t\twptbPreviewTableMobile[0].style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twptb_tdDefaultWidth();\n\t\twptb_tableReconstraction();\n\n\t\t// when window resize call wpcd_archiveSectionSmall and wptb_tableGenerateMobile\n\t\t$(window).resize(function () {\n\t\t\twptb_tdDefaultWidth();\n\t\t\twptb_tableReconstraction();\n\t\t});\n\n\t\tfunction wptb_tableReconstraction() {\n\t\t\tfor (let i = 0; i < tableContainers.length; i++) {\n\t\t\t\tconst tableContainer = tableContainers[i];\n\n\t\t\t\t// Set default indicator of creating a new table in true\n\t\t\t\tlet createNewTableIndic = true;\n\n\t\t\t\tlet previewTable = tableContainer.getElementsByClassName('wptb-preview-table');\n\t\t\t\tlet tableContainerMatrix = tableContainer.getElementsByClassName('wptb-table-container-matrix');\n\n\t\t\t\tif (previewTable.length > 0 && tableContainerMatrix.length > 0) {\n\t\t\t\t\tpreviewTable = previewTable[0];\n\t\t\t\t\ttableContainerMatrix = tableContainerMatrix[0];\n\t\t\t\t\tpreviewTable.style.display = 'table';\n\n\t\t\t\t\tif (previewTable.dataset.wptbTableAlignment) {\n\t\t\t\t\t\tconst { wptbTableAlignment } = previewTable.dataset;\n\n\t\t\t\t\t\tconst wptbTableContainerWidth = tableContainer.offsetWidth;\n\t\t\t\t\t\tif (wptbTableContainerWidth < previewTable.offsetWidth) {\n\t\t\t\t\t\t\tpreviewTable.style.float = null;\n\t\t\t\t\t\t} else if (wptbTableAlignment == 'center') {\n\t\t\t\t\t\t\tpreviewTable.style.float = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpreviewTable.style.float = wptbTableAlignment;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (wptbTableAlignment == 'center') {\n\t\t\t\t\t\t\ttableContainer.style.float = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttableContainer.style.float = wptbTableAlignment;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// check data parametrs reconstraction and wptbAdaptiveTable if they are both equal 1 then continue\n\t\t\t\t\tif (previewTable.dataset.reconstraction == 1 && previewTable.dataset.wptbAdaptiveTable == 1) {\n\t\t\t\t\t\t// get widths for wptb-table-container and wptb-preview-table\n\t\t\t\t\t\tconst tableContainerWidth = tableContainer.offsetWidth;\n\t\t\t\t\t\tconst previewTableWidth = previewTable.offsetWidth;\n\n\t\t\t\t\t\t// get count of table columns\n\t\t\t\t\t\tlet tableColumns;\n\t\t\t\t\t\tconst previewTableRows = previewTable.rows;\n\t\t\t\t\t\tif (previewTableRows.length > 0) {\n\t\t\t\t\t\t\tconst firstRow = previewTableRows[0];\n\t\t\t\t\t\t\tconst tdsRow = firstRow.querySelectorAll('td');\n\n\t\t\t\t\t\t\ttableColumns = tdsRow.length;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// check the top line if it is presented as a title\n\t\t\t\t\t\tconst tablePreviewHeadIndic = previewTable.classList.contains('wptb-table-preview-head');\n\n\t\t\t\t\t\t// check conditions: if table top row is as \"header\" - table must have more that two columns,\n\t\t\t\t\t\t// otherwise table must have more taht one columns\n\t\t\t\t\t\tlet tableReconstructed = false;\n\t\t\t\t\t\tlet wptbPreviewTableMobile;\n\t\t\t\t\t\tif ((!tablePreviewHeadIndic || tableColumns > 2) && tableColumns > 1) {\n\t\t\t\t\t\t\t// if width of wptb-table-container less then width of wptb-preview-table -\n\t\t\t\t\t\t\t// continue the way creation new mobile table\n\t\t\t\t\t\t\tif (tableContainerWidth < previewTableWidth) {\n\t\t\t\t\t\t\t\ttableContainer.style.overflow = 'unset';\n\n\t\t\t\t\t\t\t\t// hide wptb-table-container-matrix\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttableContainerMatrix &&\n\t\t\t\t\t\t\t\t\t!tableContainerMatrix.classList.contains('wptb-matrix-hide')\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\ttableContainerMatrix.classList.add('wptb-matrix-hide');\n\t\t\t\t\t\t\t\t\ttableReconstructed = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpreviewTable.classList.add('wptb-mobile-view-active');\n\n\t\t\t\t\t\t\t\tif (previewTable.rows && tableColumns) {\n\t\t\t\t\t\t\t\t\t// we get the estimated cell width\n\t\t\t\t\t\t\t\t\tconst tdWidth = previewTableWidth / tableColumns;\n\n\t\t\t\t\t\t\t\t\t// get the quantity of whole Columns that are can placed in the container\n\t\t\t\t\t\t\t\t\tlet wholeColumnsInContainer = Math.floor(tableContainerWidth / tdWidth);\n\t\t\t\t\t\t\t\t\tif (wholeColumnsInContainer < 1) wholeColumnsInContainer = 1;\n\n\t\t\t\t\t\t\t\t\t// check for the existence of a mobile table\n\t\t\t\t\t\t\t\t\t// if it available, check this table for compliance\n\t\t\t\t\t\t\t\t\t// with our conditions. If it compliance, remain this table\n\t\t\t\t\t\t\t\t\t// and cancel creating a new table ( createNewTableIndic = false ).\n\t\t\t\t\t\t\t\t\tif (tableContainer.getElementsByClassName('wptb-preview-table-mobile').length > 0) {\n\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile = tableContainer.getElementsByClassName(\n\t\t\t\t\t\t\t\t\t\t\t'wptb-preview-table-mobile'\n\t\t\t\t\t\t\t\t\t\t)[0];\n\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile.classList.remove('wptb-mobile-hide');\n\t\t\t\t\t\t\t\t\t\tconst dataWholeColumnInContainer =\n\t\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile.dataset.wholeColumnsInContainer;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tdataWholeColumnInContainer == wholeColumnsInContainer &&\n\t\t\t\t\t\t\t\t\t\t\tpreviewTable.classList.contains('wptb-table-preview-head')\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tcreateNewTableIndic = false;\n\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\tdataWholeColumnInContainer == wholeColumnsInContainer &&\n\t\t\t\t\t\t\t\t\t\t\t!previewTable.classList.contains('wptb-table-preview-head') &&\n\t\t\t\t\t\t\t\t\t\t\t(tableContainerWidth > 480 || wptbPreviewTableMobile.column == 1)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tcreateNewTableIndic = false;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile.parentNode.removeChild(wptbPreviewTableMobile);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// if indicator of creating of table \"true\" - continue\n\t\t\t\t\t\t\t\t\tif (createNewTableIndic) {\n\t\t\t\t\t\t\t\t\t\t// create new table for mobile devices\n\t\t\t\t\t\t\t\t\t\tconst newTable = document.createElement('table');\n\t\t\t\t\t\t\t\t\t\tconst newTableTbody = document.createElement('tbody');\n\t\t\t\t\t\t\t\t\t\tnewTable.appendChild(newTableTbody);\n\n\t\t\t\t\t\t\t\t\t\t// add css class for new mobile table\n\t\t\t\t\t\t\t\t\t\tnewTable.classList.add('wptb-preview-table-mobile');\n\t\t\t\t\t\t\t\t\t\tconst infArr = previewTable.className.match(/wptb-element-main(.+)-(\\d+)/i);\n\t\t\t\t\t\t\t\t\t\tif (infArr && Array.isArray(infArr)) {\n\t\t\t\t\t\t\t\t\t\t\tnewTable.classList.add(infArr[0]);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// get number of rows for wptb-preview-table\n\t\t\t\t\t\t\t\t\t\tconst tableRows = previewTable.rows.length;\n\n\t\t\t\t\t\t\t\t\t\t// In this variable must have quantity columns of the last section of the new table\n\t\t\t\t\t\t\t\t\t\tlet newTableLastSectionFilledColumns;\n\n\t\t\t\t\t\t\t\t\t\t// set valuesIsSaved in 'false'\n\t\t\t\t\t\t\t\t\t\t// if the parameters newTableLastSectionFilledColumns get\n\t\t\t\t\t\t\t\t\t\t// optimal values, valuesIsSaved must have value 'true'\n\t\t\t\t\t\t\t\t\t\tlet valuesIsSaved = false;\n\n\t\t\t\t\t\t\t\t\t\t// check if top row is as \"header\"\n\t\t\t\t\t\t\t\t\t\tif (previewTable.classList.contains('wptb-table-preview-head')) {\n\t\t\t\t\t\t\t\t\t\t\t// quantity rows without top row\n\t\t\t\t\t\t\t\t\t\t\tconst tableRowsWithoutHeader = tableRows - 1;\n\n\t\t\t\t\t\t\t\t\t\t\t// this variable will have quantity columns in new mobile table\n\t\t\t\t\t\t\t\t\t\t\tlet newTableColumnsWithoutLeftHeader;\n\n\t\t\t\t\t\t\t\t\t\t\t// if quantity of rows in desktop table more than\n\t\t\t\t\t\t\t\t\t\t\t// quantity whole columns which are can placed in the container,\n\t\t\t\t\t\t\t\t\t\t\t// execute \"loop for\"\n\t\t\t\t\t\t\t\t\t\t\tif (tableRows > wholeColumnsInContainer) {\n\t\t\t\t\t\t\t\t\t\t\t\t// this code, сyclical reduces the number of columns in the new table,\n\t\t\t\t\t\t\t\t\t\t\t\t// until the optimal view is obtained so that the last block of the new table\n\t\t\t\t\t\t\t\t\t\t\t\t// has more than half the columns compared to the previous blocks\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < tableRowsWithoutHeader; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader = wholeColumnsInContainer - 1 - i;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableColumnsWithoutLeftHeader <= 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader = 1;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableRowsWithoutHeader % newTableColumnsWithoutLeftHeader;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableLastSectionFilledColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader <= 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 * newTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader > 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader <= 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1.8 * newTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader > 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader <= 18 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1.6 * newTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader = tableRowsWithoutHeader;\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns = 0;\n\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// if all necessary values ​​are available (  ), execute\n\t\t\t\t\t\t\t\t\t\t\tif (valuesIsSaved) {\n\t\t\t\t\t\t\t\t\t\t\t\tlet countRows;\n\t\t\t\t\t\t\t\t\t\t\t\tif (newTableColumnsWithoutLeftHeader > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountRows =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableColumns *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMath.ceil(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableRowsWithoutHeader / newTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountRows = tableColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst sectionNumberLast = Math.floor((countRows - 1) / tableColumns);\n\t\t\t\t\t\t\t\t\t\t\t\tlet tdStyles;\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let j = 0; j < countRows; j++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst sectionNumber = Math.floor(j / tableColumns);\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst tdLeftHeader = previewTable.rows[0].children[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tj - sectionNumber * tableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t].cloneNode(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet td;\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst rowFirstStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.rows[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!tdLeftHeader.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.backgroundColor =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trowFirstStyles.backgroundColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.width = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.height = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t// tdLeftHeader.removeAttribute('data-x-index');\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.removeAttribute('data-wptb-css-td-auto-width');\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.querySelector('td')\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (tdStyles.borderTopColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.borderColor = tdStyles.borderTopColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.borderColor = tdStyles.borderBottomColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (sectionNumber > 0 && j % tableColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.borderTopWidth = '5px';\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttr.appendChild(tdLeftHeader);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet k = newTableColumnsWithoutLeftHeader * sectionNumber + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tk < newTableColumnsWithoutLeftHeader * (sectionNumber + 1) + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tk++\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (k < previewTable.rows.length) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd = previewTable.rows[k].children[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj - sectionNumber * tableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].cloneNode(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst rowKStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.rows[k]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!td.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.backgroundColor = rowKStyles.backgroundColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.width = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.height = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// td.removeAttribute('data-x-index');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.removeAttribute('data-wptb-css-td-auto-width');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd = document.createElement('td');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderWidth = '0px';\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.background = '#fff';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.querySelector('td')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (tdStyles.borderTopColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderColor = tdStyles.borderTopColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderColor = tdStyles.borderBottomColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (sectionNumber > 0 && j % tableColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderTopWidth = '5px';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttr.appendChild(td);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableTbody.appendChild(tr);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tlet newTableColumns;\n\t\t\t\t\t\t\t\t\t\t\tif (tableContainerWidth > 480) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < tableColumns; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns = wholeColumnsInContainer - i;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableColumns == 0) newTableColumns = 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns = tableColumns % newTableColumns;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableLastSectionFilledColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns <= 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns - 2 * newTableLastSectionFilledColumns <= 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns < newTableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns > 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns <= 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns - 1.8 * newTableLastSectionFilledColumns <= 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns < newTableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns > 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns <= 18 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns - 1.6 * newTableLastSectionFilledColumns <= 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns < newTableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns = 1;\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns = 0;\n\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\tnewTable.column = 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tconst increaseRatioRows = Math.ceil(tableColumns / newTableColumns);\n\n\t\t\t\t\t\t\t\t\t\t\tconst newTableRows = increaseRatioRows * tableRows;\n\n\t\t\t\t\t\t\t\t\t\t\tif (valuesIsSaved) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < newTableRows; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst sectionNumber = Math.floor(i / tableRows);\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet jMax;\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet jStart;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsectionNumber != increaseRatioRows - 1 ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns == 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjStart = sectionNumber * newTableColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjMax = newTableColumns * (1 + sectionNumber);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjStart = tableColumns - newTableLastSectionFilledColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjMax = tableColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst row = previewTable.rows[i - sectionNumber * tableRows];\n\t\t\t\t\t\t\t\t\t\t\t\t\ttr.classList = row.classList;\n\t\t\t\t\t\t\t\t\t\t\t\t\ttr.style.backgroundColor = row.style.backgroundColor;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let j = jStart; j < jMax; j++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst newTd = row.children[j].cloneNode(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!newTd.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst rowStyles = window.getComputedStyle(row);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.style.backgroundColor = rowStyles.backgroundColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.style.width = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.style.height = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// newTd.removeAttribute('data-x-index');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.removeAttribute('data-wptb-css-td-auto-width');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttr.appendChild(newTd);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableTbody.appendChild(tr);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tnewTable.dataset.wholeColumnsInContainer = wholeColumnsInContainer;\n\t\t\t\t\t\t\t\t\t\tconst images = newTable.querySelectorAll('[srcset]');\n\t\t\t\t\t\t\t\t\t\tif (images.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < images.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\timages[i].removeAttribute('srcset');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile = newTable;\n\t\t\t\t\t\t\t\t\t\ttableContainer.appendChild(newTable);\n\t\t\t\t\t\t\t\t\t\ttableReconstructed = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\ttableContainerMatrix &&\n\t\t\t\t\t\t\t\ttableContainerMatrix.classList.contains('wptb-matrix-hide')\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\ttableContainerMatrix.classList.remove('wptb-matrix-hide');\n\t\t\t\t\t\t\t\ttableReconstructed = true;\n\t\t\t\t\t\t\t\tpreviewTable.classList.remove('wptb-mobile-view-active');\n\t\t\t\t\t\t\t\twptbPreviewTableMobile = tableContainer.querySelector('.wptb-preview-table-mobile');\n\t\t\t\t\t\t\t\tif (wptbPreviewTableMobile) {\n\t\t\t\t\t\t\t\t\ttableContainer\n\t\t\t\t\t\t\t\t\t\t.getElementsByClassName('wptb-preview-table-mobile')[0]\n\t\t\t\t\t\t\t\t\t\t.classList.add('wptb-mobile-hide');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttableContainer.style.overflow = 'auto';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpreviewTable.style.minWidth = 'auto';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tWPTB_RecalculateIndexes(previewTable);\n\n\t\t\t\t\t\tif (tableReconstructed) {\n\t\t\t\t\t\t\tWPTB_RecalculateIndexes(wptbPreviewTableMobile);\n\t\t\t\t\t\t\tconst tabEvent = new CustomEvent('table:rebuilt', { detail: true, bubbles: true });\n\t\t\t\t\t\t\tpreviewTable.dispatchEvent(tabEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction wptb_tdDefaultWidth() {\n\t\t\tconst wptbTableContainers = document.getElementsByClassName('wptb-table-container');\n\t\t\t// let frontendEditLink = document.querySelectorAll( '.wptb-frontend-table-edit-link' );\n\t\t\tfor (let i = 0; i < wptbTableContainers.length; i++) {\n\t\t\t\tconst wptbTableContainer = wptbTableContainers[i];\n\n\t\t\t\twptbTableContainer.classList.add(`wptb-table-container-${i}`);\n\n\t\t\t\tlet table = wptbTableContainer.getElementsByClassName('wptb-preview-table');\n\t\t\t\tif (table.length > 0) {\n\t\t\t\t\ttable = table[0];\n\n\t\t\t\t\tif (table.dataset.wptbTableContainerMaxWidth) {\n\t\t\t\t\t\twptbTableContainer.style.maxWidth = `${table.dataset.wptbTableContainerMaxWidth}px`;\n\t\t\t\t\t}\n\t\t\t\t\ttable.classList.remove('wptb-table-preview-static-indic');\n\n\t\t\t\t\ttable.mergingСellsHorizontally = false;\n\t\t\t\t\tconst tds = table.querySelectorAll('td');\n\t\t\t\t\tfor (let j = 0; j < tds.length; j++) {\n\t\t\t\t\t\tif (tds[j].colSpan > 1) {\n\t\t\t\t\t\t\ttable.mergingСellsHorizontally = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst wptbTableContainerWidth = wptbTableContainer.offsetWidth;\n\n\t\t\t\t\tconst td = table.querySelector('td');\n\t\t\t\t\tconst tdStyleObj = window.getComputedStyle(td, null);\n\t\t\t\t\tconst tdBorderLeftWidth = tdStyleObj.getPropertyValue('border-left-width');\n\t\t\t\t\tconst tdBorderRightWidth = tdStyleObj.getPropertyValue('border-right-width');\n\t\t\t\t\tconst tdPaddingLeftWidth = tdStyleObj.getPropertyValue('padding-left');\n\t\t\t\t\tconst tdPaddingRightWidth = tdStyleObj.getPropertyValue('padding-left');\n\t\t\t\t\tconst tdPaddingCommon = parseFloat(tdPaddingLeftWidth, 10) + parseFloat(tdPaddingRightWidth, 10);\n\t\t\t\t\tconst tableTdBorderCommonWidth =\n\t\t\t\t\t\tparseFloat(tdBorderLeftWidth, 10) + parseFloat(tdBorderRightWidth, 10);\n\t\t\t\t\tconst { wptbTableTdsSumMaxWidth } = table.dataset;\n\t\t\t\t\tconst { wptbFixedWidthSize } = table.dataset;\n\t\t\t\t\tconst { wptbCellsWidthAutoCount } = table.dataset;\n\t\t\t\t\tlet styleElementCreate = false;\n\t\t\t\t\tlet tableTdWidthAuto;\n\t\t\t\t\tif (wptbTableTdsSumMaxWidth < wptbTableContainerWidth) {\n\t\t\t\t\t\tif (wptbCellsWidthAutoCount) {\n\t\t\t\t\t\t\ttable.style.minWidth = '100%';\n\n\t\t\t\t\t\t\t//                        if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.minWidth = wptbTableTdsSumMaxWidth + 'px';\n\t\t\t\t\t\t\t//                        }\n\n\t\t\t\t\t\t\tif (table.mergingСellsHorizontally) {\n\t\t\t\t\t\t\t\ttable.style.width = 'auto';\n\t\t\t\t\t\t\t\tconst tableTdsWidthAutoCommon = wptbTableContainerWidth - wptbFixedWidthSize;\n\t\t\t\t\t\t\t\ttableTdWidthAuto = tableTdsWidthAutoCommon / wptbCellsWidthAutoCount;\n\t\t\t\t\t\t\t\ttableTdWidthAuto = tableTdWidthAuto - tdPaddingCommon - tableTdBorderCommonWidth;\n\t\t\t\t\t\t\t\tstyleElementCreate = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttable.style.width = '100%';\n\n\t\t\t\t\t\t\t\t//                            if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t\t\t//                                frontendEditLink[i].style.width = '100%';\n\t\t\t\t\t\t\t\t//                                frontendEditLink[i].style.maxWidth = '100%';\n\t\t\t\t\t\t\t\t//                            }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttable.style.width = 'auto';\n\t\t\t\t\t\t\ttable.style.minWidth = null;\n\t\t\t\t\t\t\ttable.style.maxWidth = `${wptbTableTdsSumMaxWidth}px`;\n\n\t\t\t\t\t\t\t//                        if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.width = null;\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.minWidth = null;\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.maxWidth = wptbTableTdsSumMaxWidth + 'px';\n\t\t\t\t\t\t\t//                        }\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttable.style.maxWidth = null;\n\t\t\t\t\t\ttable.style.minWidth = `${table.dataset.wptbTableTdsSumMaxWidth}px`;\n\t\t\t\t\t\ttable.style.width = 'auto';\n\t\t\t\t\t\ttableTdWidthAuto = table.dataset.wptbTdWidthAuto ? table.dataset.wptbTdWidthAuto : '100';\n\t\t\t\t\t\tstyleElementCreate = true;\n\n\t\t\t\t\t\t//                    if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t//                        frontendEditLink[i].style.maxWidth = '100%';\n\t\t\t\t\t\t//                        frontendEditLink[i].style.minWidth = table.dataset.wptbTableTdsSumMaxWidth + 'px';\n\t\t\t\t\t\t//                        frontendEditLink[i].style.width = null;\n\t\t\t\t\t\t//                    }\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { head } = document;\n\t\t\t\t\tif (head) {\n\t\t\t\t\t\tconst cssForTdsWidthAutoOld = head.querySelector(`style[data-wptb-td-auto-width-${i}=\"true\"]`);\n\n\t\t\t\t\t\tif (cssForTdsWidthAutoOld) {\n\t\t\t\t\t\t\thead.removeChild(cssForTdsWidthAutoOld);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (styleElementCreate) {\n\t\t\t\t\t\tconst cssForTdsWidthAuto = document.createElement('style');\n\t\t\t\t\t\tcssForTdsWidthAuto.setAttribute(`data-wptb-td-auto-width-${i}`, true);\n\t\t\t\t\t\tcssForTdsWidthAuto.innerHTML = `.wptb-table-container-${i} table td[data-wptb-css-td-auto-width=true]{width:${tableTdWidthAuto}px}`;\n\t\t\t\t\t\tif (head) {\n\t\t\t\t\t\t\thead.appendChild(cssForTdsWidthAuto);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// code for adding of old css styles for correct view\n\t\tconst elements = document.getElementsByClassName('wptb-ph-element');\n\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\tconst element = elements[i];\n\t\t\tif (element.classList.contains('wptb-list-item-container')) {\n\t\t\t\telement.classList.remove('wptb-list-item-container');\n\t\t\t\telement.classList.add('wptb-list-container');\n\t\t\t}\n\n\t\t\tif (element.classList.contains('wptb-button-container')) {\n\t\t\t\tconst infArr = element.className.match(/wptb-size-([A-Z]+)/i);\n\t\t\t\tif (infArr && Array.isArray(infArr)) {\n\t\t\t\t\tconst wptbSize = infArr[0];\n\t\t\t\t\tconst wptbSizeNew = wptbSize.toLowerCase();\n\n\t\t\t\t\telement.classList.remove(wptbSize);\n\n\t\t\t\t\tconst wptbButtonWrapper = element.querySelector('.wptb-button-wrapper');\n\t\t\t\t\tif (wptbButtonWrapper) {\n\t\t\t\t\t\twptbButtonWrapper.classList.add(wptbSizeNew);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// responsive setup\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tconst responsiveFront = new WPTB_ResponsiveFrontend({\n\t\t\tquery: '.wptb-preview-table',\n\t\t\tbindToResize: true,\n\t\t});\n\n\t\t// sorting table\n\t\tfunction sortingTable() {\n\t\t\tconst tables = document.querySelectorAll('.wptb-preview-table');\n\t\t\tfor (let i = 0; i < tables.length; i++) {\n\t\t\t\tconst sortableTable = new WPTB_SortableTable({ table: tables[i] });\n\t\t\t\tsortableTable.sortableTableInitialization(responsiveFront);\n\t\t\t}\n\t\t}\n\t\tsortingTable();\n\t\tresponsiveFront.rebuildTables();\n\n\t\tWPTB_StylePass.init(WptbFrontendData.stylePass);\n\t});\n})(jQuery);\n"]}