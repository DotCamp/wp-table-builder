{"version":3,"sources":["WPTB_CutGlueTable.js","WPTB_GetDirectionAfterReconstruction.js","WPTB_SortableTable.js","WPTB_RecalculateIndexes.js","WPTB_ResponsiveFrontend.js","WPTB_StylePass.js","wp-table-builder-frontend.js"],"names":["WPTB_CutGlueTable","cutTableHorizontally","rowBefore","table","rows","i","tableRowsIChildren","children","j","length","rowSpan","newTdRowspan","dataset","sameCellBeforeDivision","td","hasOwnProperty","wptbCell","mark","getDOMElement","document","createElement","tdTopStyle","getAttribute","setAttribute","colSpan","dataXIndex","xIndex","dataXIndexNext","parseInt","beforeTd","maxCols","querySelector","insertBefore","WPTB_RecalculateIndexes","glueTableHorizontally","tds","_toConsumableArray","getElementsByTagName","hasAttribute","dataSameCellBeforeDivision","tdsSameBeforeDivision","querySelectorAll","parentNode","classList","contains","yIndex","tdsSameBeforeDivisionJPlusChildren","k","appendChild","removeChild","cutTableVertically","col","rowSpanNewTd","colSpanOld","colSpanNewTd","rowChildren","rowChildrenLength","afterTd","tdLeftStyle","tdAnalogThisX","style","width","tdAnalogThisY","height","glueTableVertically","jFirstTdGlue","WPTB_GetDirectionAfterReconstruction","typeFirst","typeSecond","verticalProp","responsiveFront","itemsPerHeader","tableMaxCols","switchMode","type","getDirective","e","directives","sizeRangeId","detail","mode","responsiveMode","modeOptions","topRowAsHeader","cellStackDirection","cellsPerRow","newTable","key","context","factory","exports","_typeof","module","self","global","options","arguments","undefined","this","thisObject","sortingCellMouseMov","element","x","y","xMatch","target","tagName","offsetX","layerX","offsetY","layerY","clientWidth","clientHeight","add","remove","sortingCellMouseMoveVertical","sortingCellMouseMoveHorizontal","tdMouseLeave","sortableTable","currentTarget","tableWasSorted","tableRowsBefore","tableRowsAfter","tableRowsArr","tableLastCont","push","rowspan","rowNum","concat","map","rowsTdFirst","rowsValuesArr","tdYCoordsRowSpanPrevious","tableRowsPushed","tdsChanged","changeSortingTdsCollection","tdRowspan","textElementsValues","textElementsValuesGet","rowsTd","value","orderBy","setSortedAscDataAttr","sort","prev","next","sortOrder","unshift","indexOf","trRef","tBody","innerHTML","rowsValObj","row","tr","colspan","colNum","columnsTdFirst","columnsValuesArr","tdXCoordsColSpanPrevious","tdColspan","columnsTd","tdsColumn","difference","columnsValObj","tdsAll","removeAttribute","removeCellsAttrAfterDivision","tableSM","tableStateSet","reassignElementsStyles","dataAttr","prevValue","nextValue","cell","textElements","innerText","tdIndexSpanPrev","collectionTds","collectionTdsJSpan","collectionTdsJSpanProperty","indexName","indexNameCamelCase","indexNamePerpendicularCamelCase","tableGroupCount","tdsCollectionChanged","tdSpanProperty","splice","tdSpan","cellsStylesScheme","rowsStylesScheme","sortModeSwitcher","active","removeEventListener","sortableTableVerticalStart","sortingCellMouseMoveSwitcher","addEventListener","wptbSortableTableVertical","createTableElementsStylesScheme","sortableTableHorizontalStart","wptbSortableTableHorizontal","tableObjectChange","start","elemSelector","elements","elem","backgroundColor","window","getComputedStyle","getPropertyValue","objectKey","String","elementsStylesScheme","elemStyles","sortableTableInitialization","sortModeSwitcherRun","switchModeObj","tableOld","call","_this","s","sCMM","dataAttrSortChange","rowsLength","dataYIndexStart","trs","maxColsFull","tdsArr","jMainIter","z","columns","logToConsole","message","process","env","NODE_ENV","console","Error","CellObject","cellElement","reference","referenceObject","mergedRenderStatus","mergedCells","column","getMergedRenderStatus","setMergedRenderStatus","status","addToMergedCells","mergeType","cellObj","isReference","cloneNode","modifications","spans","remainingSpans","cacheSpanValues","Object","keys","defaultVal","prototype","getSpan","spanType","spanVal","getElement","getRemainingSpans","setRemainingSpans","createCellElement","attributeKey","attributeValue","append","glue","currentVal","default","setSpan","valueToApply","mc","remainingVal","remainingParentSpans","startIndex","endIndex","resetAttribute","resetAllAttributes","el","TableObject","tableEl","_this2","tableElement","parsedTable","rowCache","originals","rowColors","header","even","odd","addToParsed","r","c","cellObject","parseTable","Array","from","ri","cells","currentIndex","ci","currentCellObject","spanRow","spanTypes","spanCol","sr","referenceCell","sc","parseRowColors","headerDatasetColor","wptbHeaderBackgroundColor","evenRowDatasetColor","wptbEvenRowBackgroundColor","oddRowDatasetColor","wptbOddRowBackgroundColor","rowsNeeded","rn","tempRow","addRow","fromOriginals","originalIndex","isArray","tableBody","range","createRange","setStart","createContextualFragment","join","childNodes","id","clearTable","getRow","maxRows","maxColumns","mergedHeader","reduce","p","getCell","returnObject","getCellsAtRow","rowId","returnObj","tempCell","appendToRow","cellRowId","cellColumnId","cachedRow","appendElementToRow","appendObjectToRow","getParsedTable","responsiveClassDefaultOptions","query","defaultClasses","bindToResize","_this3","_objectSpread","elementObjects","tableObject","bindRebuildToResize","rebuildTables","directiveString","wptbResponsiveDirectives","JSON","parse","atob","addDefaultClasses","removeDefaultClasses","autoBuild","sizeRange","autoOption","tableObj","direction","staticTopRow","repeatMergedHeader","buildDefault","autoDirectionBuild","isRowStacked","headerBuild","allCellsByRow","rowStartIndex","filter","b","bgColor","rowObj","forEach","cellCount","pR","currentTableColor","allCellsByCol","t","tCell","cR","headerCells","h","stackedAsColumn","rowBorderStyle","headerCount","Math","ceil","currentOriginalRow","addBorder","borderTop","cellClone","addHeaderCells","cc","currentRowSpan","cellAddStatus","currentCell","remainingItems","min","hc","headerCellObject","clonedHeaderCell","rS","cS","colorIndex","calculateRangeId","val","stops","sortedStops","a","rangeId","rebuildTable","size","directive","responsiveEnabled","buildCallable","getBoundingClientRect","breakpoints","tabEvent","CustomEvent","dispatchEvent","o","innerSize","innerWidth","relativeWidth","globalKey","stylesheets","insertShadowRoot","shadowRootContainer","tableContainer","mainParent","parentChildren","tableIndex","upSibling","downSibling","prepareAllStylesheets","shadowRoot","borrowFromTheme","insertAdjacentElement","fontFamily","init","tableContainers","setupStylePass","checkTableEligibility","disableThemeStyles","container","maxWidth","wptbTableContainerMaxWidth","attachShadow","stylesheetsObj","root","prepareStylesheet","handler","url","linkElement","getElementsByClassName","wptb_tableReconstraction","createNewTableIndic","previewTable","tableContainerMatrix","display","wptbTableAlignment","offsetWidth","reconstraction","wptbAdaptiveTable","tableContainerWidth","previewTableWidth","tableColumns","previewTableRows","tableReconstructed","wptbPreviewTableMobile","overflow","tdWidth","wholeColumnsInContainer","floor","dataWholeColumnInContainer","newTableTbody","infArr","className","match","tableRows","newTableLastSectionFilledColumns","valuesIsSaved","tableRowsWithoutHeader","newTableColumnsWithoutLeftHeader","countRows","tdStyles","sectionNumber","tdLeftHeader","rowFirstStyles","borderTopColor","borderColor","borderBottomColor","borderTopWidth","rowKStyles","borderWidth","background","newTableColumns","increaseRatioRows","newTableRows","jMax","jStart","rowStyles","newTd","images","minWidth","bubbles","wptb_tdDefaultWidth","wptbTableContainers","wptbTableContainer","merging–°ellsHorizontally","wptbTableContainerWidth","tdStyleObj","tdBorderLeftWidth","tdBorderRightWidth","tdPaddingLeftWidth","tdPaddingRightWidth","tdPaddingCommon","parseFloat","tableTdBorderCommonWidth","wptbTableTdsSumMaxWidth","wptbFixedWidthSize","wptbCellsWidthAutoCount","styleElementCreate","tableTdWidthAuto","wptbTdWidthAuto","head","cssForTdsWidthAutoOld","cssForTdsWidthAuto","wptbElementHoverBgColor","wptbElementHoverTextColor","color","wptbElementHoverScale","transform","wptbElementBgColor","wptbElementColor","wptbSize","wptbSizeNew","toLowerCase","wptbButtonWrapper","WPTB_ResponsiveFrontend","tables","WPTB_SortableTable","sortingTable","responsiveFrontReady","WPTB_StylePass","WptbFrontendData","stylePass"],"mappings":"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","file":"wp-table-builder-frontend.js","sourcesContent":["let WPTB_CutGlueTable = {\n    cutTableHorizontally: function (rowBefore, table) {\n        if( table && table.rows[rowBefore] ) {\n            for( let i = 0; i < rowBefore; i++ ) {\n                let tableRowsIChildren = table.rows[i].children;\n\n                for( let j = 0; j < tableRowsIChildren.length; j++ ) {\n                    if ( tableRowsIChildren[j].rowSpan > 1 && tableRowsIChildren[j].rowSpan > rowBefore - i ) {\n                        let newTdRowspan = tableRowsIChildren[j].rowSpan - rowBefore + i;\n                        tableRowsIChildren[j].rowSpan = rowBefore - i;\n                        if( ! tableRowsIChildren[j].dataset.sameCellBeforeDivision ) {\n                            tableRowsIChildren[j].dataset.sameCellBeforeDivision = 'r' + i + 'c' + j;\n                        }\n\n                        let td;\n                        if(table.hasOwnProperty('wptbCell')) {\n                            td = new table.wptbCell( table.mark );\n                            td = td.getDOMElement();\n                        } else {\n                            td = document.createElement('td');\n                        }\n\n                        let tdTopStyle = tableRowsIChildren[j].getAttribute( 'style' );\n                        td.setAttribute( 'style', tdTopStyle );\n                        td.colSpan = tableRowsIChildren[j].colSpan;\n                        td.rowSpan = newTdRowspan;\n                        td.dataset.sameCellBeforeDivision = tableRowsIChildren[j].dataset.sameCellBeforeDivision;\n\n                        let dataXIndex = tableRowsIChildren[j].dataset.xIndex;\n                        let dataXIndexNext = parseInt( dataXIndex ) + parseInt( tableRowsIChildren[j].colSpan );\n                        let beforeTd;\n                        while( ! beforeTd && dataXIndexNext < table.maxCols ) {\n                            beforeTd = table.rows[rowBefore].querySelector( '[data-x-index=\"' + dataXIndexNext + '\"]' );\n                            dataXIndexNext++;\n                        }\n                        table.rows[rowBefore].insertBefore( td, beforeTd );\n\n                        WPTB_RecalculateIndexes(table);\n                    }\n                }\n            }\n        }\n    },\n    glueTableHorizontally: function (table) {\n        if(table) {\n            let tds = [...table.getElementsByTagName( 'td' )];\n            for( let i = 0; i < tds.length; i++ ) {\n                if( tds[i].hasAttribute( 'data-same-cell-before-division' ) ) {\n                    let dataSameCellBeforeDivision = tds[i].dataset.sameCellBeforeDivision;\n                    let tdsSameBeforeDivision = table.querySelectorAll( '[data-same-cell-before-division=\"' + dataSameCellBeforeDivision + '\"]' );\n                    for( let j = 0; j < tdsSameBeforeDivision.length; j++ ) {\n                        if( tdsSameBeforeDivision[j] && tdsSameBeforeDivision[j + 1] ) {\n                            if( tdsSameBeforeDivision[j].parentNode && tdsSameBeforeDivision[j + 1].parentNode &&\n                                ! tdsSameBeforeDivision[j].parentNode.classList.contains( 'wptb-row-moving' ) &&\n                                ! tdsSameBeforeDivision[j + 1].parentNode.classList.contains( 'wptb-row-moving' ) ) {\n                                if( ( tdsSameBeforeDivision[j + 1].dataset.yIndex == parseInt( tdsSameBeforeDivision[j].dataset.yIndex ) +\n                                    parseInt( tdsSameBeforeDivision[j].rowSpan ) ) ) {\n                                    tdsSameBeforeDivision[j].rowSpan += tdsSameBeforeDivision[j + 1].rowSpan;\n\n                                    let tdsSameBeforeDivisionJPlusChildren = [...tdsSameBeforeDivision[j + 1].children];\n\n                                    for( let k = 0; k < tdsSameBeforeDivisionJPlusChildren.length; k++ ) {\n                                        tdsSameBeforeDivision[j].appendChild( tdsSameBeforeDivisionJPlusChildren[k] );\n                                    }\n\n                                    let nextRow = tdsSameBeforeDivision[j + 1].parentNode;\n                                    nextRow.removeChild( tdsSameBeforeDivision[j + 1] );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            WPTB_RecalculateIndexes(table);\n        }\n    },\n    cutTableVertically: function (col, table) {\n        for ( let i = 0; i < table.rows.length; i++ ) {\n            if( col < table.maxCols ) {\n                if( col != 0 && ( ! table.rows[i].querySelector( '[data-x-index=\"' + col + '\"]' ) ) ) {\n                    let rowChildren = table.rows[i].children;\n\n                    let td,\n                        rowChildrenLength = rowChildren.length,\n                        afterTd,\n                        rowSpanNewTd,\n                        colSpanOld,\n                        colSpanNewTd;\n                    for( let j = 0; j < rowChildrenLength; j++ ) {\n                        if( rowChildren[j].colSpan > 1 && parseInt( rowChildren[j].dataset.xIndex ) < col &&\n                            parseInt( rowChildren[j].dataset.xIndex ) + parseInt( rowChildren[j].colSpan ) > col ) {\n                            if(table.hasOwnProperty('wptbCell')) {\n                                td = new table.wptbCell( table.mark );\n                                td = td.getDOMElement();\n                            } else {\n                                td = document.createElement('td');\n                            }\n\n                            rowSpanNewTd = rowChildren[j].rowSpan;\n                            colSpanOld = rowChildren[j].colSpan;\n                            rowChildren[j].colSpan = col - rowChildren[j].dataset.xIndex;\n                            colSpanNewTd = colSpanOld - rowChildren[j].colSpan;\n\n                            if( ! rowChildren[j].dataset.sameCellBeforeDivision ) {\n                                rowChildren[j].dataset.sameCellBeforeDivision = 'r' + i + 'c' + j;\n                            }\n\n                            let tdLeftStyle = rowChildren[j].getAttribute( 'style' );\n                            td.setAttribute( 'style', tdLeftStyle );\n\n                            let tdAnalogThisX = table.querySelector( '[data-x-index=\"' + col + '\"]' );\n                            if( tdAnalogThisX ) {\n                                td.style.width = tdAnalogThisX.style.width;\n                            }\n\n                            let tdAnalogThisY = table.querySelector( '[data-y-index=\"' + i + '\"]' );\n                            if( tdAnalogThisY ) {\n                                td.style.height = tdAnalogThisY.style.height;\n                            }\n                            if( rowChildren[j + 1] ) {\n                                afterTd = rowChildren[j + 1];\n                            } else {\n                                afterTd = null;\n                            }\n\n                            table.rows[i].insertBefore( td, afterTd );\n                            td.colSpan = colSpanNewTd;\n                            td.rowSpan = rowSpanNewTd;\n                            td.dataset.sameCellBeforeDivision = rowChildren[j].dataset.sameCellBeforeDivision;\n                            i += rowSpanNewTd - 1;\n                            break\n                        }\n                    }\n                }\n            }\n            WPTB_RecalculateIndexes(table);\n        }\n    },\n    glueTableVertically: function (table) {\n        if( table ) {\n            let tds = [...table.getElementsByTagName( 'td' )];\n            for( let i = 0; i < tds.length; i++ ) {\n                if( tds[i].hasAttribute( 'data-same-cell-before-division' ) ) {\n                    let dataSameCellBeforeDivision = tds[i].dataset.sameCellBeforeDivision;\n                    let tdsSameBeforeDivision = [...table.querySelectorAll( '[data-same-cell-before-division=\"' + dataSameCellBeforeDivision + '\"]' )];\n\n                    let jFirstTdGlue = null;\n                    for( let j = 0; j < tdsSameBeforeDivision.length; j++ ) {\n                        if( tdsSameBeforeDivision[j] && tdsSameBeforeDivision[j + 1] &&\n                            ! tdsSameBeforeDivision[j].classList.contains( 'wptb-column-moving' ) &&\n                            ! tdsSameBeforeDivision[j + 1].classList.contains( 'wptb-column-moving' ) ) {\n                            if( ( tdsSameBeforeDivision[j + 1].dataset.xIndex == parseInt( tdsSameBeforeDivision[j].dataset.xIndex ) +\n                                parseInt( tdsSameBeforeDivision[j].colSpan ) ) ) {\n                                if( jFirstTdGlue == null ) {\n                                    jFirstTdGlue = j;\n                                }\n                                tdsSameBeforeDivision[jFirstTdGlue].colSpan += tdsSameBeforeDivision[j + 1].colSpan;\n\n                                let tdsSameBeforeDivisionJPlusChildren = [...tdsSameBeforeDivision[j + 1].children];\n\n                                for( let k = 0; k < tdsSameBeforeDivisionJPlusChildren.length; k++ ) {\n                                    tdsSameBeforeDivision[jFirstTdGlue].appendChild( tdsSameBeforeDivisionJPlusChildren[k] );\n                                }\n\n                                let thisRow = tdsSameBeforeDivision[j + 1].parentNode;\n                                thisRow.removeChild( tdsSameBeforeDivision[j + 1] );\n                            }\n                        }\n                    }\n                }\n            }\n\n            WPTB_RecalculateIndexes(table);\n        }\n    }\n}\n","/**\n *\n * @param {HTMLElement} table\n * @param {string} typeFirst\n * @param {strinig} typeSecond\n * @param {func} workFunction\n * @param {object} responsiveFront\n */\nvar WPTB_GetDirectionAfterReconstruction = function (table, typeFirst, typeSecond,verticalProp, responsiveFront) {\n\n    let itemsPerHeader = 0;\n    let tableMaxCols = table.maxCols;\n    const switchMode = {};\n    let type = [];\n    if (responsiveFront && responsiveFront.getDirective(table)) {\n        switchMode.switch = function (e) {\n            const directives = responsiveFront.getDirective(table)\n\n            let sizeRangeId = 'desktop';\n            if (e && e.detail) {\n                sizeRangeId = e.detail.sizeRangeId;\n            }\n            type = [typeFirst, 1];\n            if (sizeRangeId !== 'desktop') {\n                if (directives.hasOwnProperty('modeOptions')) {\n                    const mode = directives.responsiveMode;\n                    const modeOptions = directives.modeOptions[mode];\n\n                    if (\n                        modeOptions.hasOwnProperty('topRowAsHeader') &&\n                        modeOptions.topRowAsHeader.hasOwnProperty(sizeRangeId) &&\n                        modeOptions.topRowAsHeader[sizeRangeId]\n                    ) {\n                        if (\n                            modeOptions.hasOwnProperty('cellStackDirection') &&\n                            modeOptions.cellStackDirection.hasOwnProperty(sizeRangeId)\n                        ) {\n                            if (modeOptions.cellStackDirection[sizeRangeId] === 'row') {\n                                type = [typeSecond, 2];\n                                itemsPerHeader = tableMaxCols - 1;\n                            } else if (modeOptions.cellStackDirection[sizeRangeId] === 'column') {\n                                if (modeOptions.hasOwnProperty('cellsPerRow')) {\n                                    itemsPerHeader = modeOptions.cellsPerRow[sizeRangeId];\n                                }\n                            }\n                        }\n                    } else {\n                        itemsPerHeader = 0;\n                    }\n                }\n            } else {\n                itemsPerHeader = 0;\n            }\n            return {type, itemsPerHeader}\n        };\n    } else {\n        switchMode.switch = function (e) {\n            type = [typeFirst, 1];\n            if (table.classList.contains('wptb-mobile-view-active')) {\n                if (table.classList.contains('wptb-table-preview-head')) {\n                    type = [typeSecond, 2];\n                    if(type === verticalProp) {\n                        itemsPerHeader = tableMaxCols - 1;\n                    }\n                }\n                let newTable = table.parentNode.parentNode.querySelector('.wptb-preview-table-mobile');\n                return {type, itemsPerHeader, newTable};\n            }\n\n            return {type, itemsPerHeader}\n        };\n    }\n\n    return switchMode;\n}\n","/**\n * Responsive class assignment for frontend operations.\n *\n * This file can be used as an UMD.\n */\n(function assignToGlobal(key, context, factory) {\n\tif (typeof exports === 'object' && typeof module !== 'undefined') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tcontext[key] = factory();\n\t}\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_SortableTable', self || global, () => {\n\tfunction WPTB_SortTable(options = {}) {\n\t\tconst table = (this.table = options.table);\n\t\tWPTB_RecalculateIndexes(table);\n\t\tconst thisObject = this;\n\t\tthis.itemsPerHeader = 0;\n\t\tthis.tableMaxCols = table.maxCols;\n\t\tthis.cellsStylesScheme = {};\n\t\tthis.rowsStylesScheme = {};\n\n\t\t/**\n\t\t * sets the table to sort mode\n\t\t *\n\t\t * @param {string} type\n\t\t * @param {boolean} active\n\t\t * @param {number} number\n\t\t */\n\t\tthis.sortModeSwitcher = function (type, active) {\n\t\t\tif(active) {\n\t\t\t\tthis.sortModeSwitcher('horizontal', false);\n\t\t\t\tthis.sortModeSwitcher('vertical', false);\n\t\t\t}\n\n\t\t\tif (type === 'vertical') {\n\t\t\t\tthis.table.removeEventListener('click', this.sortableTableVerticalStart, false);\n\n\t\t\t\tif (active) {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('vertical', true);\n\t\t\t\t\tthis.table.addEventListener('click', this.sortableTableVerticalStart, false);\n\t\t\t\t\tthis.table.dataset.wptbSortableTableVertical = '1';\n\t\t\t\t\tthis.createTableElementsStylesScheme('td');\n\t\t\t\t\tthis.createTableElementsStylesScheme('tr');\n\t\t\t\t} else {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('vertical', false);\n\t\t\t\t\tdelete this.table.dataset.wptbSortableTableVertical;\n\t\t\t\t}\n\t\t\t} else if (type === 'horizontal') {\n\t\t\t\tthis.table.removeEventListener('click', this.sortableTableHorizontalStart, false);\n\n\t\t\t\tif (active) {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('horizontal', true);\n\t\t\t\t\tthis.table.addEventListener('click', this.sortableTableHorizontalStart, false);\n\t\t\t\t\tthis.table.dataset.wptbSortableTableHorizontal = '1';\n\t\t\t\t\tthis.createTableElementsStylesScheme('td');\n\t\t\t\t\tthis.createTableElementsStylesScheme('tr');\n\t\t\t\t} else {\n\t\t\t\t\tthis.sortingCellMouseMoveSwitcher('horizontal', false);\n\t\t\t\t\tdelete this.table.dataset.wptbSortableTableHorizontal;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * changes table object for old reconstruction table type\n\t\t *\n\t\t * @param {boolean}start\n\t\t * @returns {*}\n\t\t */\n\t\tthis.tableObjectChange = function (start = true) {\n\t\t\tif(this.table.classList.contains('wptb-mobile-view-active') && start) {\n\t\t\t\tthis.table = table.parentNode.parentNode.querySelector('.wptb-preview-table-mobile');\n\t\t\t} else if(this.table.classList.contains('wptb-preview-table-mobile') && !start) {\n\t\t\t\tthis.table = table.parentNode.querySelector('.wptb-preview-table');\n\t\t\t}\n\t\t\treturn this.table;\n\t\t}\n\n\t\t/**\n\t\t * fills the object with data about cell styles for all locations (create scheme)\n\t\t *\n\t\t * @param elemSelector\n\t\t */\n\t\tthis.createTableElementsStylesScheme = function (elemSelector) {\n\t\t\tthis.tableObjectChange();\n\t\t\tlet elements = this.table.querySelectorAll(elemSelector);\n\t\t\tif(elements.length) {\n\t\t\t\tfor(let i = 0; i < elements.length; i++) {\n\t\t\t\t\tlet elem = elements[i];\n\t\t\t\t\tlet cellFullStyleObj = window.getComputedStyle(elem, null);\n\t\t\t\t\tlet backgroundColor = cellFullStyleObj.getPropertyValue( 'background-color' );\n\t\t\t\t\tlet objectKey = '';\n\t\t\t\t\tif(elemSelector === 'td') {\n\t\t\t\t\t\tobjectKey = elem.dataset.xIndex + '-' + elem.dataset.yIndex;\n\t\t\t\t\t\tthis.cellsStylesScheme[objectKey] = {backgroundColor};\n\t\t\t\t\t} else if(elemSelector === 'tr') {\n\t\t\t\t\t\tobjectKey = String(i);\n\t\t\t\t\t\tthis.rowsStylesScheme[objectKey] = {backgroundColor};\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.tableObjectChange(false);\n\t\t}\n\n\t\t/**\n\t\t * applies saved cell styles data to all cells\n\t\t *\n\t\t * @param elemSelector\n\t\t */\n\t\tthis.reassignElementsStyles = function (elemSelector) {\n\t\t\tthis.tableObjectChange();\n\t\t\tlet elements = this.table.querySelectorAll(elemSelector);\n\t\t\tlet elementsStylesScheme;\n\t\t\tif(elemSelector === 'td') {\n\t\t\t\telementsStylesScheme = this.cellsStylesScheme;\n\t\t\t} else if(elemSelector === 'tr') {\n\t\t\t\telementsStylesScheme = this.rowsStylesScheme;\n\t\t\t}\n\t\t\tif(elements.length) {\n\t\t\t\tfor(let i = 0; i < elements.length; i++) {\n\t\t\t\t\tlet elem = elements[i];\n\t\t\t\t\tlet objectKey = '';\n\t\t\t\t\tif(elemSelector === 'td') {\n\t\t\t\t\t\tobjectKey = elem.dataset.xIndex + '-' + elem.dataset.yIndex;\n\t\t\t\t\t} else if(elemSelector === 'tr') {\n\t\t\t\t\t\tobjectKey = i;\n\t\t\t\t\t}\n\t\t\t\t\tif(elementsStylesScheme.hasOwnProperty(objectKey)) {\n\t\t\t\t\t\tlet elemStyles = elementsStylesScheme[objectKey];\n\t\t\t\t\t\tfor(let key in elemStyles) {\n\t\t\t\t\t\t\telem.style[key] = elemStyles[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tableObjectChange(false);\n\t\t}\n\n\t\t/**\n\t\t * checks whether the table should be in the sort state\n\t\t * and connects the necessary handlers\n\t\t *\n\t\t * @param {object} responsiveFront\n\t\t */\n\t\tthis.sortableTableInitialization = function (responsiveFront) {\n\t\t\tlet typeFirst;\n\t\t\tlet typeSecond;\n\t\t\tif (this.table.dataset.wptbSortableTableVertical && this.table.dataset.wptbSortableTableVertical === '1') {\n\t\t\t\ttypeFirst = 'vertical';\n\t\t\t\ttypeSecond = 'horizontal';\n\t\t\t} else if (\n\t\t\t\tthis.table.dataset.wptbSortableTableHorizontal &&\n\t\t\t\tthis.table.dataset.wptbSortableTableHorizontal === '1'\n\t\t\t) {\n\t\t\t\ttypeFirst = 'horizontal';\n\t\t\t\ttypeSecond = 'vertical';\n\t\t\t}\n\n\t\t\tif(!typeFirst || typeof typeFirst !== 'string' || !typeSecond || typeof typeSecond !== 'string') return;\n\n\t\t\tlet switchMode = WPTB_GetDirectionAfterReconstruction(this.table, typeFirst, typeSecond, 'vertical', responsiveFront);\n\n\t\t\tif(typeof switchMode === 'object' && switchMode.hasOwnProperty('switch')) {\n\t\t\t\tfunction sortModeSwitcherRun (e) {\n\t\t\t\t\tlet switchModeObj = switchMode.switch(e);\n\t\t\t\t\tif(typeof switchModeObj === 'object') {\n\t\t\t\t\t\tthis.itemsPerHeader = switchModeObj.itemsPerHeader;\n\t\t\t\t\t\tif(switchModeObj.hasOwnProperty('newTable')) {\n\t\t\t\t\t\t\tlet tableOld = this.table;\n\t\t\t\t\t\t\tthis.table = switchModeObj.newTable;\n\t\t\t\t\t\t\tthis.sortModeSwitcher(switchModeObj.type[0], true);\n\t\t\t\t\t\t\tthis.table = tableOld;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.sortModeSwitcher(switchModeObj.type[0], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsortModeSwitcherRun.call(thisObject);\n\t\t\t\tthis.table.addEventListener(\n\t\t\t\t\t'table:rebuilt',\n\t\t\t\t\tfunction (e) {\n\t\t\t\t\t\tsortModeSwitcherRun.call(thisObject, e);\n\t\t\t\t\t},\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * adds and deletes mousemove and mouseleave events handlers when happens switch sorting mode\n\t\t * and also can add necessary attributes\n\t\t *\n\t\t * @param {string} type\n\t\t * @param {boolean} active\n\t\t */\n\t\tthis.sortingCellMouseMoveSwitcher = function (type, active) {\n\t\t\t/**\n\t\t\t * removes and adds mousemove and mouseleave events handlers\n\t\t\t *\n\t\t\t * @param {HTMLElement} td\n\t\t\t * @param {func} sCMM\n\t\t\t * @param {boolean} active\n\t\t\t */\n\t\t\tfunction s(td, sCMM, active) {\n\t\t\t\ttd.removeEventListener('mousemove', sCMM, false);\n\t\t\t\ttd.removeEventListener('mouseleave', tdMouseLeave, false);\n\t\t\t\tif (active) {\n\t\t\t\t\ttd.addEventListener('mousemove', sCMM, false);\n\t\t\t\t\ttd.addEventListener('mouseleave', tdMouseLeave, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * removes and adds data sorted attributes\n\t\t\t *\n\t\t\t * @param {HTMLElement} td\n\t\t\t * @param {string} dataAttr\n\t\t\t * @param {boolean} active\n\t\t\t */\n\t\t\tfunction dataAttrSortChange(td, dataAttr, active) {\n\t\t\t\tif (active) {\n\t\t\t\t\tif (!td.dataset[dataAttr] || td.dataset[dataAttr] !== 'desk-disabled') {\n\t\t\t\t\t\ttd.dataset[dataAttr] = 'ask';\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttd.dataset[dataAttr] = 'desk';\n\t\t\t\t\t}\n\t\t\t\t} else if (td.dataset[dataAttr] === 'ask') {\n\t\t\t\t\ttd.dataset[dataAttr] = 'ask-disabled';\n\t\t\t\t} else if (td.dataset[dataAttr] === 'desk') {\n\t\t\t\t\ttd.dataset[dataAttr] = 'desk-disabled';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// removes all mousemove and mouseleave events handlers\n\t\t\t// and also removes all data sorted attributes from all cells\n\t\t\tlet tds = this.table.querySelectorAll('td');\n\t\t\tif (tds.length) {\n\t\t\t\ttds = [...tds];\n\t\t\t\ttds.map((td) => {\n\t\t\t\t\ts(td, sortingCellMouseMoveVertical, false);\n\t\t\t\t\tdataAttrSortChange(td, 'sortedVertical', false);\n\t\t\t\t\ts(td, sortingCellMouseMoveHorizontal, false);\n\t\t\t\t\tdataAttrSortChange(td, 'sortedHorizontal', false);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if active === true sets sorted events handlers\n\t\t\t// and data sorted attributes for all cells\n\t\t\tif (active) {\n\t\t\t\tif (type === 'vertical') {\n\t\t\t\t\tlet rowsLength = this.table.rows.length;\n\t\t\t\t\tlet dataYIndexStart = 0;\n\t\t\t\t\twhile (rowsLength > 0) {\n\t\t\t\t\t\tlet tds = this.table.querySelectorAll(`[data-y-index=\"${dataYIndexStart}\"]`);\n\t\t\t\t\t\ttds = [...tds];\n\t\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\t\ts(td, sortingCellMouseMoveVertical, active);\n\t\t\t\t\t\t\tdataAttrSortChange(td, 'sortedVertical', active);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (this.itemsPerHeader) {\n\t\t\t\t\t\t\trowsLength -= this.itemsPerHeader + 1;\n\t\t\t\t\t\t\tdataYIndexStart += this.itemsPerHeader + 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trowsLength = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (type === 'horizontal') {\n\t\t\t\t\tlet tds = this.table.querySelectorAll('[data-x-index=\"0\"]');\n\t\t\t\t\ttds = [...tds];\n\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\tlet tdsPerAfter = this.table.querySelectorAll(`[data-y-index=\"${td.dataset.yIndex}\"]`);\n\t\t\t\t\t\tif(tdsPerAfter.length > 2) {\n\t\t\t\t\t\t\ts(td, sortingCellMouseMoveHorizontal, active);\n\t\t\t\t\t\t\tdataAttrSortChange(td, 'sortedHorizontal', active);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * adds a sortable-hover class for a cell when the cursor is over the sort icon (arrow)\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {string} type\n\t\t * @param {HTMLElement} element td\n\t\t */\n\t\tfunction sortingCellMouseMov(e, type, element) {\n\t\t\tif (e.target.tagName === 'TD') {\n\t\t\t\tconst x = e.offsetX == undefined ? e.layerX : e.offsetX;\n\t\t\t\tconst y = e.offsetY == undefined ? e.layerY : e.offsetY;\n\t\t\t\tlet xMatch = false;\n\t\t\t\tif ((type === 'vertical' && e.target.clientWidth - x <= 35) || (type === 'horizontal' && x <= 35)) {\n\t\t\t\t\txMatch = true;\n\t\t\t\t}\n\t\t\t\tif (xMatch && (e.target.clientHeight - 35) / 2 < y && (e.target.clientHeight + 35) / 2 > y) {\n\t\t\t\t\telement.classList.add('sortable-hover');\n\t\t\t\t} else {\n\t\t\t\t\telement.classList.remove('sortable-hover');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telement.classList.remove('sortable-hover');\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * calls sortingCellMouseMov with the type parameter set to vertical\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tfunction sortingCellMouseMoveVertical(e) {\n\t\t\tsortingCellMouseMov(e, 'vertical', this);\n\t\t}\n\n\t\t/**\n\t\t * calls sortingCellMouseMov with the type parameter set to horizontal\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tfunction sortingCellMouseMoveHorizontal(e) {\n\t\t\tsortingCellMouseMov(e, 'horizontal', this);\n\t\t}\n\n\t\t/**\n\t\t * remove sortable-hover class from cell when cursor leave cell\n\t\t */\n\t\tfunction tdMouseLeave() {\n\t\t\tthis.classList.remove('sortable-hover');\n\t\t}\n\n\t\t/**\n\t\t * function for sorting the table vertically by the numeric content of cells\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {HTMLElement} table\n\t\t * @param {string} type\n\t\t */\n\t\tfunction sortableTable(e, type) {\n\t\t\tif (\n\t\t\t\te.target &&\n\t\t\t\te.target.tagName === 'TD' &&\n\t\t\t\t!table.parentNode.classList.contains('wptb-preview-table-manage-cells')\n\t\t\t) {\n\t\t\t\tconst table = e.currentTarget;\n\t\t\t\tlet tableWasSorted = false;\n\t\t\t\tif (type === 'vertical' && e.target.dataset.hasOwnProperty('sortedVertical')) {\n\t\t\t\t\t/**\n\t\t\t\t\t * if table have enabled param topRowAsHeader and sellsStackDirection is column\n\t\t\t\t\t * the top and bottom rows that will not be sorted are temporarily removed from the table\n\t\t\t\t\t */\n\t\t\t\t\tconst tableRowsBefore = [];\n\t\t\t\t\tconst tableRowsAfter = [];\n\t\t\t\t\tif (this.itemsPerHeader && this.itemsPerHeader < table.rows.length) {\n\t\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\t\t\t\t\t\tconst tableRowsArr = [...table.rows];\n\t\t\t\t\t\tconst tableLastCont = table.querySelector('tbody') ? table.querySelector('tbody') : table;\n\t\t\t\t\t\tfor (let i = 0; i < tableRowsArr.length; i++) {\n\t\t\t\t\t\t\tif (i < e.target.dataset.yIndex) {\n\t\t\t\t\t\t\t\ttableRowsBefore.push(tableRowsArr[i]);\n\t\t\t\t\t\t\t\ttableLastCont.removeChild(tableRowsArr[i]);\n\t\t\t\t\t\t\t} else if (i > parseInt(e.target.dataset.yIndex, 10) + this.itemsPerHeader) {\n\t\t\t\t\t\t\t\ttableRowsAfter.push(tableRowsArr[i]);\n\t\t\t\t\t\t\t\ttableLastCont.removeChild(tableRowsArr[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet tds = table.querySelectorAll(`[data-x-index=\"${e.target.dataset.xIndex}\"]`);\n\t\t\t\t\ttds = [...tds];\n\n\t\t\t\t\t/**\n\t\t\t\t\t * preparing table for sorting\n\t\t\t\t\t */\n\t\t\t\t\tlet rowspan;\n\t\t\t\t\tlet rowNum;\n\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\tif (!(rowspan = parseInt(td.rowSpan, 10))) {\n\t\t\t\t\t\t\trowspan = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trowNum = td.dataset.yIndex;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableHorizontally(rowNum, table);\n\t\t\t\t\t\trowNum += rowspan;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableHorizontally(rowNum, table);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rowsValuesArr = [];\n\t\t\t\t\tlet rowsTdFirst;\n\t\t\t\t\tlet tdYCoordsRowSpanPrevious = 0;\n\t\t\t\t\tconst tableRowsPushed = [];\n\t\t\t\t\tfor (let i = 0; i < tds.length; i++) {\n\t\t\t\t\t\tconst tdsChanged = changeSortingTdsCollection(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\ttds,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\ttdYCoordsRowSpanPrevious,\n\t\t\t\t\t\t\t'vertical'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (tdsChanged && tdsChanged.hasOwnProperty('i')) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t\ti = tdsChanged.i;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (tdsChanged) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst td = tds[i];\n\n\t\t\t\t\t\tlet tdRowspan = parseInt(td.rowSpan, 10);\n\t\t\t\t\t\tif (!tdRowspan) tdRowspan = 1;\n\n\t\t\t\t\t\ttdYCoordsRowSpanPrevious = parseInt(td.dataset.yIndex, 10) + tdRowspan;\n\n\t\t\t\t\t\tconst textElementsValues = textElementsValuesGet(td);\n\n\t\t\t\t\t\tconst rowsTd = [];\n\t\t\t\t\t\tfor (let j = 0; j < tdRowspan; j++) {\n\t\t\t\t\t\t\trowsTd.push(table.rows[parseInt(td.dataset.yIndex, 10) + j]);\n\t\t\t\t\t\t\ttableRowsPushed.push(parseInt(td.dataset.yIndex, 10) + j);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (td.dataset.yIndex > 0) {\n\t\t\t\t\t\t\trowsValuesArr.push({\n\t\t\t\t\t\t\t\trowsTd,\n\t\t\t\t\t\t\t\tvalue: textElementsValues,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trowsTdFirst = rowsTd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst orderBy = setSortedAscDataAttr(e, 'sortedVertical');\n\t\t\t\t\tif (!orderBy) return;\n\n\t\t\t\t\tif (rowsValuesArr.length) rowsValuesArr.sort((prev, next) => sortOrder(orderBy, prev, next));\n\n\t\t\t\t\trowsValuesArr.unshift({ rowsTd: rowsTdFirst });\n\n\t\t\t\t\tif (rowsValuesArr.length < table.rows.length) {\n\t\t\t\t\t\tfor (let i = 0; i < table.rows.length; i++) {\n\t\t\t\t\t\t\tif (tableRowsPushed.indexOf(i) > -1) continue;\n\t\t\t\t\t\t\tconst rowsTd = [];\n\t\t\t\t\t\t\trowsTd.push(table.rows[i]);\n\n\t\t\t\t\t\t\trowsValuesArr.push({\n\t\t\t\t\t\t\t\trowsTd,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tBody = table.querySelector('tbody');\n\t\t\t\t\ttBody.innerHTML = '';\n\n\t\t\t\t\trowsValuesArr.map((rowsValObj) => {\n\t\t\t\t\t\trowsValObj.rowsTd.map((row) => {\n\t\t\t\t\t\t\ttBody.appendChild(row);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t/**\n\t\t\t\t\t * returning previously deleted rows\n\t\t\t\t\t */\n\t\t\t\t\tif (tableRowsBefore.length) {\n\t\t\t\t\t\tconst tableLastCont = table.querySelector('tbody') ? table.querySelector('tbody') : table;\n\t\t\t\t\t\tif (tableLastCont) {\n\t\t\t\t\t\t\tconst trRef = tableLastCont.querySelector('tr');\n\t\t\t\t\t\t\ttableRowsBefore.map((tr) => {\n\t\t\t\t\t\t\t\ttableLastCont.insertBefore(tr, trRef);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (tableRowsAfter.length) {\n\t\t\t\t\t\tconst tableLastCont = table.querySelector('tbody') ? table.querySelector('tbody') : table;\n\t\t\t\t\t\tif (tBody) {\n\t\t\t\t\t\t\ttableRowsAfter.map((tr) => {\n\t\t\t\t\t\t\t\ttableLastCont.appendChild(tr);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\n\t\t\t\t\tWPTB_CutGlueTable.glueTableHorizontally(table);\n\n\t\t\t\t\ttableWasSorted = true;\n\t\t\t\t} else if (type === 'horizontal' && e.target.dataset.xIndex === '0') {\n\t\t\t\t\tlet tds = table.querySelectorAll(`[data-y-index=\"${e.target.dataset.yIndex}\"]`);\n\t\t\t\t\ttds = [...tds];\n\n\t\t\t\t\t// preparing table for sorting\n\t\t\t\t\tlet colspan;\n\t\t\t\t\tlet colNum;\n\t\t\t\t\ttds.map((td) => {\n\t\t\t\t\t\tif (!(colspan = parseInt(td.colSpan, 10))) {\n\t\t\t\t\t\t\tcolspan = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolNum = td.dataset.xIndex;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableVertically(colNum, table);\n\t\t\t\t\t\tcolNum += colspan;\n\t\t\t\t\t\tWPTB_CutGlueTable.cutTableVertically(colNum, table);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst columnsValuesArr = [];\n\t\t\t\t\tlet columnsTdFirst;\n\n\t\t\t\t\tlet tdXCoordsColSpanPrevious = 0;\n\t\t\t\t\tfor (let i = 0; i < tds.length; i++) {\n\t\t\t\t\t\tconst tdsChanged = changeSortingTdsCollection(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\ttds,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\ttdXCoordsColSpanPrevious,\n\t\t\t\t\t\t\t'horizontal'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (tdsChanged && tdsChanged.hasOwnProperty('i')) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t\ti = tdsChanged.i;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (tdsChanged) {\n\t\t\t\t\t\t\ttds = tdsChanged.tds;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst td = tds[i];\n\t\t\t\t\t\tlet tdColspan = parseInt(td.colSpan, 10);\n\t\t\t\t\t\tif (!tdColspan) tdColspan = 1;\n\n\t\t\t\t\t\ttdXCoordsColSpanPrevious = parseInt(td.dataset.xIndex, 10) + tdColspan;\n\n\t\t\t\t\t\tconst textElementsValues = textElementsValuesGet(td);\n\t\t\t\t\t\tconst columnsTd = [];\n\t\t\t\t\t\tfor (let j = 0; j < tdColspan; j++) {\n\t\t\t\t\t\t\tconst tdsColumn = [\n\t\t\t\t\t\t\t\t...table.querySelectorAll(`[data-x-index=\"${parseInt(td.dataset.xIndex, 10) + j}\"]`),\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tcolumnsTd.push(tdsColumn);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (td.dataset.xIndex > 0) {\n\t\t\t\t\t\t\tcolumnsValuesArr.push({\n\t\t\t\t\t\t\t\tcolumnsTd,\n\t\t\t\t\t\t\t\tvalue: textElementsValues,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcolumnsTdFirst = columnsTd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst orderBy = setSortedAscDataAttr(e, 'sortedHorizontal');\n\t\t\t\t\tif (!orderBy) return;\n\n\t\t\t\t\tif (columnsValuesArr.length) columnsValuesArr.sort((prev, next) => sortOrder(orderBy, prev, next));\n\n\t\t\t\t\tcolumnsValuesArr.unshift({ columnsTd: columnsTdFirst });\n\n\t\t\t\t\tif (columnsValuesArr.length < table.maxCols) {\n\t\t\t\t\t\tconst difference = table.maxCols - columnsValuesArr.length;\n\t\t\t\t\t\tfor (let i = 0; i < difference; i++) {\n\t\t\t\t\t\t\tconst tdsColumn = [\n\t\t\t\t\t\t\t\t...table.querySelectorAll(\n\t\t\t\t\t\t\t\t\t`[data-x-index=\"${parseInt(table.maxCols, 10) - parseInt(difference, 10) + i}\"]`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tcolumnsValuesArr.push({\n\t\t\t\t\t\t\t\tcolumnsTd: [tdsColumn],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < table.rows.length; i++) {\n\t\t\t\t\t\ttable.rows[i].innerHTML = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tcolumnsValuesArr.map((columnsValObj) => {\n\t\t\t\t\t\tcolumnsValObj.columnsTd.map((tdsColumn) => {\n\t\t\t\t\t\t\ttdsColumn.map((td) => {\n\t\t\t\t\t\t\t\ttable.rows[td.dataset.yIndex].appendChild(td);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tWPTB_RecalculateIndexes(table);\n\n\t\t\t\t\tWPTB_CutGlueTable.glueTableVertically(table);\n\n\t\t\t\t\ttableWasSorted = true;\n\t\t\t\t}\n\n\t\t\t\tif (tableWasSorted) {\n\t\t\t\t\tremoveCellsAttrAfterDivision(table);\n\n\t\t\t\t\tif (table.hasOwnProperty('tableSM')) {\n\t\t\t\t\t\tconst tableSM = table.tableSM();\n\t\t\t\t\t\tnew tableSM().tableStateSet();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.reassignElementsStyles('td');\n\t\t\t\t\tthis.reassignElementsStyles('tr');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Function that sets the data-attribute with the number of the row or column\n\t\t * that the table was sorted by. Returns the number of a row or column\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {string} dataAttr\n\t\t * @returns {null|boolean}\n\t\t */\n\t\tfunction setSortedAscDataAttr(e, dataAttr) {\n\t\t\tif (\n\t\t\t\te.currentTarget &&\n\t\t\t\t(e.currentTarget.classList.contains('wptb-preview-table') ||\n\t\t\t\t\te.currentTarget.classList.contains('wptb-preview-table-mobile'))\n\t\t\t) {\n\t\t\t\tif (!e.target.dataset[dataAttr] || e.target.dataset[dataAttr] === 'ask') {\n\t\t\t\t\te.target.dataset[dataAttr] = 'desk';\n\t\t\t\t} else {\n\t\t\t\t\te.target.dataset[dataAttr] = 'ask';\n\t\t\t\t}\n\n\t\t\t\treturn e.target.dataset[dataAttr];\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * defines the sorting order\n\t\t *\n\t\t * @param {string} orderBy\n\t\t * @param prev\n\t\t * @param next\n\t\t * @returns {number}\n\t\t */\n\t\tfunction sortOrder(orderBy = 'ask', prev, next) {\n\t\t\tlet prevValue = prev.value;\n\t\t\tlet nextValue = next.value;\n\t\t\tif (parseInt(prevValue) && parseInt(nextValue)) {\n\t\t\t\tprevValue = parseInt(prevValue);\n\t\t\t\tnextValue = parseInt(nextValue);\n\t\t\t}\n\n\t\t\tif (orderBy === 'ask') {\n\t\t\t\tif (prevValue < nextValue) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (prevValue === nextValue) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (prevValue < nextValue) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (prevValue === nextValue) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t * return cell text elements values\n\t\t *\n\t\t * @param cell {HTMLElement}\n\t\t * @returns {string}\n\t\t */\n\t\tfunction textElementsValuesGet(cell) {\n\t\t\tlet textElements = cell.querySelectorAll('.wptb-text-container');\n\t\t\ttextElements = [...textElements];\n\t\t\tlet value = '';\n\t\t\tfor (let j = 0; j < textElements.length; j++) {\n\t\t\t\tconst p = textElements[j].querySelector('p');\n\t\t\t\tvalue += p.innerText;\n\t\t\t\tif (j !== textElements.length - 1) value += ' ';\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\t/**\n\t\t * adds cells to the collection of cells in the row or column that the table is sorted by.\n\t\t * These added cells are not originally were added in the collection,\n\t\t * because they are combined with cells from higher rows or left-side columns\n\t\t *\n\t\t * @param {event} e\n\t\t * @param {HTMLElement} table\n\t\t * @param {array} tds\n\t\t * @param {number} i\n\t\t * @param {number} tdIndexSpanPrev\n\t\t * @param {string} type\n\t\t * @returns {{tds: *}|boolean|{tds: *, i: *}}\n\t\t */\n\t\tfunction changeSortingTdsCollection(e, table, tds, i, tdIndexSpanPrev, type) {\n\t\t\tconst td = tds[i];\n\t\t\tlet tdsCollectionChanged = false;\n\t\t\tlet collectionTds;\n\t\t\tlet collectionTdsJSpan;\n\t\t\tlet collectionTdsJSpanProperty;\n\t\t\tlet indexName;\n\t\t\tlet indexNameCamelCase;\n\t\t\tlet indexNamePerpendicularCamelCase;\n\t\t\tlet tdSpanProperty;\n\t\t\t// max rows or columns column\n\t\t\tlet tableGroupCount;\n\n\t\t\tif (type === 'vertical') {\n\t\t\t\tcollectionTdsJSpanProperty = 'colSpan';\n\t\t\t\tindexName = 'data-y-index';\n\t\t\t\tindexNameCamelCase = 'yIndex';\n\t\t\t\tindexNamePerpendicularCamelCase = 'xIndex';\n\t\t\t\ttdSpanProperty = 'rowSpan';\n\t\t\t\ttableGroupCount = table.rows.length;\n\t\t\t} else if (type === 'horizontal') {\n\t\t\t\tcollectionTdsJSpanProperty = 'rowSpan';\n\t\t\t\tindexName = 'data-x-index';\n\t\t\t\tindexNameCamelCase = 'xIndex';\n\t\t\t\tindexNamePerpendicularCamelCase = 'yIndex';\n\t\t\t\ttdSpanProperty = 'colSpan';\n\t\t\t\ttableGroupCount = table.maxCols;\n\t\t\t}\n\n\t\t\tif (td.dataset[indexNameCamelCase] - tdIndexSpanPrev > 0) {\n\t\t\t\tcollectionTds = table.querySelectorAll(`[${indexName}=\"${tdIndexSpanPrev}\"]`);\n\n\t\t\t\tfor (let j = 0; j < collectionTds.length; j++) {\n\t\t\t\t\tcollectionTdsJSpan = collectionTds[j][collectionTdsJSpanProperty];\n\t\t\t\t\tif (!collectionTdsJSpan) collectionTdsJSpan = 1;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tcollectionTds[j].dataset[indexNamePerpendicularCamelCase] <\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase] &&\n\t\t\t\t\t\tparseInt(collectionTds[j].dataset[indexNamePerpendicularCamelCase], 10) +\n\t\t\t\t\t\t\tparseInt(collectionTdsJSpan, 10) >\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase]\n\t\t\t\t\t) {\n\t\t\t\t\t\ttds.splice(i, 0, collectionTds[j]);\n\t\t\t\t\t\ttdsCollectionChanged = true;\n\t\t\t\t\t\ti--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tdsCollectionChanged) return { tds, i };\n\n\t\t\tlet tdSpan = parseInt(td[tdSpanProperty], 10);\n\t\t\tif (!tdSpan) tdSpan = 1;\n\t\t\tif (i == tds.length - 1 && parseInt(td.dataset[indexNameCamelCase], 10) + tdSpan < tableGroupCount) {\n\t\t\t\tcollectionTds = table.querySelectorAll(\n\t\t\t\t\t`[${indexName}=\"${parseInt(td.dataset[indexNameCamelCase], 10) + tdSpan}\"]`\n\t\t\t\t);\n\t\t\t\tfor (let j = 0; j < collectionTds.length; j++) {\n\t\t\t\t\tcollectionTdsJSpan = collectionTds[j][collectionTdsJSpanProperty];\n\t\t\t\t\tif (!collectionTdsJSpan) collectionTdsJSpan = 1;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tcollectionTds[j].dataset[indexNamePerpendicularCamelCase] <\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase] &&\n\t\t\t\t\t\tparseInt(collectionTds[j].dataset[indexNamePerpendicularCamelCase], 10) +\n\t\t\t\t\t\t\tparseInt(collectionTdsJSpan, 10) >\n\t\t\t\t\t\t\te.target.dataset[indexNamePerpendicularCamelCase]\n\t\t\t\t\t) {\n\t\t\t\t\t\ttds.push(collectionTds[j]);\n\t\t\t\t\t\ttdsCollectionChanged = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tdsCollectionChanged) return { tds };\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * remove cells attributes which were used for division table\n\t\t *\n\t\t * @param {HTMLElement} table\n\t\t */\n\t\tfunction removeCellsAttrAfterDivision(table) {\n\t\t\tconst tdsAll = [...table.getElementsByTagName('td')];\n\t\t\tfor (let i = 0; i < tdsAll.length; i++) {\n\t\t\t\tif (tdsAll[i].hasAttribute('data-same-cell-before-division')) {\n\t\t\t\t\ttdsAll[i].removeAttribute('data-same-cell-before-division');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * function for run sorting table vertically\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tthis.sortableTableVerticalStart = function (e) {\n\t\t\tsortableTable.call(thisObject, e, 'vertical');\n\t\t};\n\n\t\t/**\n\t\t * function for run sorting table horizontally\n\t\t *\n\t\t * @param {event} e\n\t\t */\n\t\tthis.sortableTableHorizontalStart = function (e) {\n\t\t\tsortableTable.call(thisObject, e, 'horizontal');\n\t\t};\n\n\t\treturn this;\n\t}\n\n\treturn WPTB_SortTable;\n});\n","const WPTB_RecalculateIndexes = function (table) {\n    let trs = table.getElementsByTagName( 'tr' ),\n        tds, maxCols = 0, maxColsFull = 0, tdsArr = [];\n\n    for ( let i = 0; i < trs.length; i++ ) {\n        tds = trs[i].getElementsByTagName( 'td' );\n\n        if ( tdsArr[i] == undefined ) {\n            tdsArr[i] = [];\n        }\n\n        let jMainIter = 0;\n        for ( let j = 0; j < tds.length; j++ ) {\n            if ( tdsArr[i][j] != undefined ) {\n                for ( let y = 0; y < 100; y++ ) {\n                    if ( tdsArr[i][jMainIter] != undefined ) {\n                        jMainIter++;\n                        continue;\n                    }\n                    tdsArr[i][jMainIter] = tds[j];\n                    tds[j].dataset.xIndex = jMainIter;\n                    break;\n                }\n            } else {\n                tdsArr[i][j] = tds[j];\n                tds[j].dataset.xIndex = jMainIter;\n            }\n            tds[j].dataset.yIndex = i;\n\n            if ( tds[j].colSpan > 1 ) {\n                for ( let k = 1; k < tds[j].colSpan; k++ ) {\n                    jMainIter++;\n                    tdsArr[i][jMainIter] = 'tdDummy';\n                }\n            }\n\n            if ( tds[j].rowSpan > 1 ) {\n                for ( let x = 1; x < tds[j].rowSpan; x++ ) {\n                    if ( tdsArr[i + x] == undefined ) {\n                        tdsArr[i + x] = [];\n                    }\n                    for ( let z = 0; z < tds[j].colSpan; z++ ) {\n                        tdsArr[i + x][jMainIter - tds[j].colSpan + 1 + z ] = 'tdDummy';\n                    }\n                }\n            }\n            jMainIter++;\n        }\n\n        if ( tds.length > maxCols ) {\n            maxCols = tds.length;\n        }\n\n        if( i == 0 ) {\n            maxColsFull = jMainIter;\n        }\n    }\n    table.columns = maxCols;\n    table.maxCols = maxColsFull;\n}\n","/**\n * Responsive class assignment for frontend operations.\n *\n * This file can be used as an UMD.\n */\n(function assignToGlobal(key, context, factory) {\n\tif (typeof exports === 'object' && typeof module !== 'undefined') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tcontext[key] = factory();\n\t}\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_ResponsiveFrontend', self || global, () => {\n\t/**\n\t * Log a message to console.\n\t *\n\t * @param {string} message message to be logged\n\t * @param {string} type console log type (e.g info, warn, error)\n\t * @throws An error will be given for invalid type value\n\t */\n\tfunction logToConsole(message, type = 'log') {\n\t\tif (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tif (console[type]) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole[type](`[WPTB]: ${message}`);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`no logging type found with given type value of [${type}]`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Object implementation for cell element operations.\n\t * If an empty cellElement parameter is given, a fresh cell element will be created.\n\t *\n\t * @param {HTMLElement | null} cellElement cell element\n\t * @param {null | CellObject} reference main cell object if the current cell is a reference to that cell in cases like merged cells\n\t * @class\n\t */\n\tfunction CellObject(cellElement, reference = null) {\n\t\t// cell element\n\t\tthis.element = cellElement;\n\n\t\tthis.referenceObject = reference;\n\n\t\t// variable for deciding part of merged cells to be visible or not\n\t\tthis.mergedRenderStatus = true;\n\n\t\t// connected merged cell references\n\t\tthis.mergedCells = {\n\t\t\trow: [],\n\t\t\tcolumn: [],\n\t\t};\n\n\t\t/**\n\t\t * Get merged render status.\n\t\t *\n\t\t * @return {boolean} render status\n\t\t */\n\t\tthis.getMergedRenderStatus = () => {\n\t\t\treturn this.mergedRenderStatus;\n\t\t};\n\n\t\t/**\n\t\t * Set merged render status.\n\t\t *\n\t\t * @param {boolean} status render status\n\t\t */\n\t\tthis.setMergedRenderStatus = (status) => {\n\t\t\tthis.mergedRenderStatus = status;\n\t\t};\n\n\t\t/**\n\t\t * Add merged cells.\n\t\t *\n\t\t * @param {string} mergeType merge type\n\t\t * @param {CellObject} cellObj cell object instance\n\t\t */\n\t\tthis.addToMergedCells = (mergeType, cellObj) => {\n\t\t\tthis.mergedCells[mergeType].push(cellObj);\n\t\t};\n\n\t\t/**\n\t\t * Determine if current cell is a reference to a main cell.\n\t\t *\n\t\t * @return {boolean} a reference or not\n\t\t */\n\t\tthis.isReference = () => {\n\t\t\treturn this.referenceObject !== null;\n\t\t};\n\n\t\tif (this.isReference()) {\n\t\t\tthis.element = cellElement.cloneNode(true);\n\t\t}\n\n\t\t// modifications object\n\t\t// this object will keep track of the modifications that has done to the cell to make sure we can roll them back to their original values\n\t\tthis.modifications = {};\n\n\t\t// spans object for cell's original merge values\n\t\tthis.spans = {\n\t\t\trow: 1,\n\t\t\tcol: 1,\n\t\t};\n\n\t\tthis.remainingSpans = {\n\t\t\trow: 0,\n\t\t\tcol: 0,\n\t\t};\n\n\t\t/**\n\t\t * Cache cell element's original span values.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tthis.cacheSpanValues = () => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tObject.keys(this.spans).map((k) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(this.spans, k)) {\n\t\t\t\t\tconst defaultVal = this.spans[k];\n\n\t\t\t\t\tthis.spans[k] = this.element.getAttribute(`${k}Span`) || defaultVal;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tthis.cacheSpanValues();\n\n\t\t/**\n\t\t * Get original span value of cell object.\n\t\t *\n\t\t * @param {string} spanType span type, available values are row-column\n\t\t * @param {boolean} fromElement instead of original value, get the assigned span value from HTMLElement itself\n\t\t * @throws An error will be given for invalid span type\n\t\t */\n\t\tthis.getSpan = (spanType, fromElement = false) => {\n\t\t\tconst spanVal = fromElement ? this.getElement().getAttribute(`${spanType}Span`) : this.spans[spanType];\n\t\t\tif (spanVal) {\n\t\t\t\treturn spanVal;\n\t\t\t}\n\t\t\tthrow new Error(`no span value found with the given type of [${spanType}]`);\n\t\t};\n\n\t\tthis.getRemainingSpans = (spanType) => {\n\t\t\treturn this.remainingSpans[spanType];\n\t\t};\n\n\t\tthis.setRemainingSpans = (spanType, value) => {\n\t\t\tthis.remainingSpans[spanType] = value;\n\t\t};\n\n\t\t/**\n\t\t * Get cell element.\n\t\t *\n\t\t * @return {HTMLElement} cell element\n\t\t */\n\t\tthis.getElement = () => {\n\t\t\treturn this.element;\n\t\t};\n\n\t\t/**\n\t\t * Create a cell element.\n\t\t *\n\t\t * @private\n\t\t * @return {HTMLTableDataCellElement}\n\t\t */\n\t\tthis.createCellElement = () => {\n\t\t\treturn document.createElement('td');\n\t\t};\n\n\t\t// create a new cell element if no cellElement argument is given with constructor function\n\t\tif (!cellElement) {\n\t\t\tthis.element = this.createCellElement();\n\t\t}\n\n\t\t/**\n\t\t * Add attribute to cell element.\n\t\t *\n\t\t * This function have the ability to add/remove attributes from cell element.\n\t\t * All attributes modified with this function will be cached with their before value for an easy reset on demand.\n\t\t *\n\t\t * @param {string} attributeKey attribute name in camelCase format, for sub-keys, use dot object notation\n\t\t * @param {any} attributeValue attribute value\n\t\t * @param {boolean} [append=false] append the value or replace it\n\t\t * @param {string} [glue=,] glue to join attribute value if append option is enabled\n\t\t */\n\t\tthis.setAttribute = (attributeKey, attributeValue, append = false, glue = ',') => {\n\t\t\tlet defaultVal = this.getElement()[attributeKey];\n\n\t\t\t// if attribute value is a function or an object, it means we pulled a whole declaration instead of only inline attribute values, in that case, use getAttribute to get only inline values related to that attribute\n\t\t\tif (typeof defaultVal === 'function' || typeof defaultVal === 'object') {\n\t\t\t\tdefaultVal = this.getElement().getAttribute(attributeKey);\n\t\t\t}\n\n\t\t\t// if there is already a default value defined, use that instead\n\t\t\tif (this.modifications[attributeKey]) {\n\t\t\t\tdefaultVal = this.modifications[attributeKey].default;\n\t\t\t}\n\n\t\t\tlet currentVal = defaultVal;\n\n\t\t\t// join attributes\n\t\t\tif (append) {\n\t\t\t\tcurrentVal += `${currentVal}${glue}${attributeValue}`;\n\t\t\t} else {\n\t\t\t\tcurrentVal = attributeValue;\n\t\t\t}\n\n\t\t\tthis.modifications[attributeKey] = { value: currentVal, default: defaultVal };\n\n\t\t\tthis.getElement()[attributeKey] = currentVal;\n\t\t};\n\n\t\t/**\n\t\t * Set row/colspan for cell.\n\t\t *\n\t\t * @param {string} spanType span type\n\t\t * @param {number} value value to assign to span\n\t\t * @return {boolean} if any space left to render the element\n\t\t */\n\t\tthis.setSpan = (spanType, value) => {\n\t\t\t// working on main cell\n\t\t\tif (!this.isReference()) {\n\t\t\t\tconst valueToApply = this.getSpan(spanType) - value < 0 ? this.getSpan(spanType) : value;\n\n\t\t\t\tthis.setAttribute(`${spanType}Span`, valueToApply);\n\n\t\t\t\t// calculate remaining cells amount to merge in this span type\n\t\t\t\tthis.setRemainingSpans(spanType, this.getSpan(spanType) - valueToApply);\n\n\t\t\t\t// set visibility of connected merge group cells to false to not render them since we added necessary span values to main cell which will leak into their position\n\t\t\t\tfor (let mc = 0; mc < valueToApply - 1; mc += 1) {\n\t\t\t\t\tif (this.mergedCells[spanType] && this.mergedCells[spanType][mc]) {\n\t\t\t\t\t\tthis.mergedCells[spanType][mc].setMergedRenderStatus(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// working on reference\n\n\t\t\tif (!this.getMergedRenderStatus()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst remainingVal = this.referenceObject.getRemainingSpans(spanType);\n\n\t\t\t// no space left to put cell\n\t\t\tif (remainingVal === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst valueToApply = remainingVal - value < 0 ? remainingVal : value;\n\n\t\t\tconst remainingParentSpans = remainingVal - valueToApply;\n\t\t\tthis.referenceObject.setRemainingSpans(spanType, remainingParentSpans);\n\n\t\t\tthis.setAttribute(`${spanType}Span`, valueToApply);\n\n\t\t\t// change render status of remaining connected merge cells\n\t\t\tif (remainingParentSpans !== 0) {\n\t\t\t\tconst totalConnectedCells = this.referenceObject.mergedCells[spanType].length;\n\t\t\t\tconst startIndex = totalConnectedCells - remainingVal + 1;\n\t\t\t\tconst endIndex = startIndex + valueToApply - 1;\n\n\t\t\t\tfor (let mc = startIndex; mc < endIndex; mc += 1) {\n\t\t\t\t\tthis.mergedCells[spanType][mc].setMergedRenderStatus(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t/**\n\t\t * Reset a modified attribute to its default value\n\t\t *\n\t\t * @param {string} attributeKey attribute name\n\t\t */\n\t\tthis.resetAttribute = (attributeKey) => {\n\t\t\tif (this.modifications[attributeKey]) {\n\t\t\t\tthis.getElement()[attributeKey] = this.modifications[attributeKey].default;\n\t\t\t\tthis.modifications[attributeKey] = undefined;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Reset all modified attributes of cell element to their default values.\n\t\t */\n\t\tthis.resetAllAttributes = () => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tObject.keys(this.modifications).map((k) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(this.modifications, k)) {\n\t\t\t\t\tthis.resetAttribute(k);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\treturn {\n\t\t\tgetElement: this.getElement,\n\t\t\tel: this.element,\n\t\t\tsetAttribute: this.setAttribute,\n\t\t\tresetAllAttributes: this.resetAllAttributes,\n\t\t\tgetSpan: this.getSpan,\n\t\t\tsetSpan: this.setSpan,\n\t\t\tgetRemainingSpans: this.getRemainingSpans,\n\t\t\tsetRemainingSpans: this.setRemainingSpans,\n\t\t\tisReference: this.isReference,\n\t\t\taddToMergedCells: this.addToMergedCells,\n\t\t\tmergedCells: this.mergedCells,\n\t\t\tsetMergedRenderStatus: this.setMergedRenderStatus,\n\t\t\tgetMergedRenderStatus: this.getMergedRenderStatus,\n\t\t};\n\t}\n\n\tCellObject.spanTypes = { row: 'row', column: 'col' };\n\n\t/**\n\t * Object implementation for table element operations.\n\t *\n\t * @param {HTMLElement} tableEl table element\n\t * @return {Object} instance\n\t * @class\n\t */\n\tfunction TableObject(tableEl) {\n\t\t/**\n\t\t * Table element.\n\t\t *\n\t\t * @private\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.tableElement = tableEl;\n\n\t\t/**\n\t\t * Parsed table object.\n\t\t *\n\t\t * @private\n\t\t * @type {Array}\n\t\t */\n\t\tthis.parsedTable = [];\n\n\t\t/**\n\t\t * An array of created table rows elements that are id'd according to their index in array.\n\t\t *\n\t\t * @type {Array}\n\t\t */\n\t\tthis.rowCache = [];\n\n\t\t/**\n\t\t * Original table elements minus the cells.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis.originals = { rows: [] };\n\n\t\t/**\n\t\t * Row colors of original table.\n\t\t *\n\t\t * @type {{even: string, header: string, odd: string}}\n\t\t */\n\t\tthis.rowColors = {\n\t\t\theader: null,\n\t\t\teven: null,\n\t\t\todd: null,\n\t\t};\n\n\t\t/**\n\t\t * Add cell to parsed array.\n\t\t *\n\t\t * @private\n\t\t * @param {number} r row id\n\t\t * @param {number} c column id\n\t\t * @param {CellObject} cellObject cell object to add to parsed array\n\t\t */\n\t\tthis.addToParsed = (r, c, cellObject) => {\n\t\t\tif (!this.parsedTable[r]) {\n\t\t\t\tthis.parsedTable[r] = [];\n\t\t\t}\n\n\t\t\tthis.parsedTable[r][c] = cellObject;\n\t\t};\n\n\t\t/**\n\t\t * Assign table cells into row and column numbers.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tthis.parseTable = () => {\n\t\t\tconst rows = Array.from(this.tableElement.querySelectorAll('tr'));\n\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\trows.map((r, ri) => {\n\t\t\t\t// cache original rows for future use\n\t\t\t\tthis.originals.rows.push(r);\n\n\t\t\t\tconst cells = Array.from(r.querySelectorAll('td'));\n\n\t\t\t\tlet currentIndex = 0;\n\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\tcells.map((c, ci) => {\n\t\t\t\t\tconst currentCellObject = new CellObject(c);\n\t\t\t\t\tthis.addToParsed(ri, currentIndex, currentCellObject);\n\t\t\t\t\tcurrentIndex += 1;\n\n\t\t\t\t\tconst spanRow = currentCellObject.getSpan(CellObject.spanTypes.row);\n\t\t\t\t\tconst spanCol = currentCellObject.getSpan(CellObject.spanTypes.column);\n\n\t\t\t\t\tif (spanRow > 1) {\n\t\t\t\t\t\tfor (let sr = 1; sr < spanRow; sr += 1) {\n\t\t\t\t\t\t\tconst referenceCell = new CellObject(c, currentCellObject);\n\t\t\t\t\t\t\tcurrentCellObject.addToMergedCells('row', referenceCell);\n\t\t\t\t\t\t\tthis.addToParsed(ri + sr, ci, referenceCell);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (spanCol > 1) {\n\t\t\t\t\t\tfor (let sc = 1; sc < spanCol; sc += 1) {\n\t\t\t\t\t\t\tconst referenceCell = new CellObject(c, currentCellObject);\n\t\t\t\t\t\t\tcurrentCellObject.addToMergedCells('column', referenceCell);\n\t\t\t\t\t\t\tthis.addToParsed(ri, currentIndex, referenceCell);\n\t\t\t\t\t\t\tcurrentIndex += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.parseRowColors(rows);\n\t\t};\n\n\t\t/**\n\t\t * Parse row colors of original table for futures uses.\n\t\t *\n\t\t * @param {[HTMLElement]} rows html row elements\n\t\t * @private\n\t\t */\n\t\tthis.parseRowColors = (rows) => {\n\t\t\tif (!rows || rows.length <= 0) {\n\t\t\t\tlogToConsole('no rows are found to parse their colors', 'error');\n\t\t\t}\n\n\t\t\t// get row colors if they are defined as datasets on table element\n\t\t\tconst headerDatasetColor = this.tableElement.dataset.wptbHeaderBackgroundColor;\n\t\t\tconst evenRowDatasetColor = this.tableElement.dataset.wptbEvenRowBackgroundColor;\n\t\t\tconst oddRowDatasetColor = this.tableElement.dataset.wptbOddRowBackgroundColor;\n\n\t\t\t// header row color\n\t\t\tthis.rowColors.header =\n\t\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\t\theaderDatasetColor !== undefined\n\t\t\t\t\t? headerDatasetColor\n\t\t\t\t\t: rows[0].style.backgroundColor === ''\n\t\t\t\t\t? null\n\t\t\t\t\t: rows[0].style.backgroundColor;\n\n\t\t\t// calculate needed number of rows to get even and odd row background colors\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\tconst rowsNeeded = rows.length / 3 >= 1 ? 0 : rows.length === 1 ? 2 : (rows.length - 1) % 2;\n\n\t\t\t// create additional rows and add them to table to get their row background colors since table row count may be lower to get even/odd rows\n\t\t\tfor (let rn = 0; rn < rowsNeeded; rn += 1) {\n\t\t\t\tconst tempRow = document.createElement('tr');\n\n\t\t\t\tthis.tableElement.querySelector('tbody').appendChild(tempRow);\n\t\t\t\trows.push(tempRow);\n\t\t\t}\n\n\t\t\t// even & odd row colors\n\t\t\t// dataset colors have priority over colors gathered from computed row styles\n\t\t\tthis.rowColors.even = evenRowDatasetColor || getComputedStyle(rows[1]).backgroundColor;\n\t\t\tthis.rowColors.odd = evenRowDatasetColor ? oddRowDatasetColor : getComputedStyle(rows[2]).backgroundColor;\n\n\t\t\t// remove created rows from DOM\n\t\t\tfor (let r = 0; r < rowsNeeded; r += 1) {\n\t\t\t\trows[rows.length - (r + 1)].remove();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Add a row to the table.\n\t\t *\n\t\t * @param {Array} classList an array of class names to be added to row\n\t\t * @param {boolean} fromOriginals use rows from original table instead of creating a new one\n\t\t * @param {number} originalIndex original row index\n\t\t */\n\t\tthis.addRow = (classList, fromOriginals = false, originalIndex = 0) => {\n\t\t\tif (!Array.isArray(classList)) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tclassList = [classList];\n\t\t\t}\n\n\t\t\tconst tableBody = this.tableElement.querySelector('tbody');\n\t\t\tlet tempRow;\n\n\t\t\tif (!fromOriginals) {\n\t\t\t\tconst range = document.createRange();\n\t\t\t\trange.setStart(tableBody, 0);\n\t\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\t\ttempRow = range.createContextualFragment(`<tr class=\"${classList.join(' ')}\"></tr>`).childNodes[0];\n\t\t\t} else {\n\t\t\t\ttempRow = this.originals.rows[originalIndex];\n\t\t\t}\n\n\t\t\t// add row to table body\n\t\t\ttableBody.appendChild(tempRow);\n\n\t\t\t// cache row for future use\n\t\t\tthis.rowCache.push(tempRow);\n\n\t\t\treturn { el: tempRow, id: this.rowCache.length - 1 };\n\t\t};\n\n\t\t/**\n\t\t * Clear the contents of table element.\n\t\t */\n\t\tthis.clearTable = () => {\n\t\t\t// clear row cache\n\t\t\tthis.rowCache = [];\n\n\t\t\t// clear children of `tbody` element\n\t\t\tthis.tableElement.querySelector('tbody').innerHTML = '';\n\t\t};\n\n\t\t/**\n\t\t * Get row element from cache.\n\t\t *\n\t\t * @param {number} id row id\n\t\t * @return {null|HTMLElement} row element if present or null if not\n\t\t */\n\t\tthis.getRow = (id) => {\n\t\t\tif (this.rowCache[id]) {\n\t\t\t\treturn this.rowCache[id];\n\t\t\t}\n\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tlogToConsole(`no row with id [${id}] found in the cache.`, 'warn');\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Get maximum number of rows available at table.\n\t\t *\n\t\t * @return {number} maximum amount of rows\n\t\t */\n\t\tthis.maxRows = () => {\n\t\t\treturn this.parsedTable.length;\n\t\t};\n\n\t\t/**\n\t\t * Get the number of maximum available column count in the table.\n\t\t *\n\t\t * @param mergedHeader\n\t\t * @return {number} maximum available column count\n\t\t */\n\t\tthis.maxColumns = (mergedHeader) => {\n\t\t\tif (mergedHeader) {\n\t\t\t\treturn this.parsedTable[0].length;\n\t\t\t}\n\n\t\t\treturn this.parsedTable.reduce((p, c) => {\n\t\t\t\tif (c.length > p) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tp = c.length;\n\t\t\t\t}\n\n\t\t\t\treturn p;\n\t\t\t}, 0);\n\t\t};\n\n\t\t/**\n\t\t * Get the table cell at specified row-column location.\n\t\t *\n\t\t * As in arrays, row and column numbering starts from number 0.\n\t\t *\n\t\t * @param {number} r row number\n\t\t * @param {number} c column number\n\t\t * @param {boolean} returnObject return object instead of HTMLElement\n\t\t * @return {HTMLElement | null | CellObject} element if address is possible, null if not\n\t\t */\n\t\tthis.getCell = (r, c, returnObject = false) => {\n\t\t\ttry {\n\t\t\t\tif (this.parsedTable[r][c]) {\n\t\t\t\t\tif (returnObject) {\n\t\t\t\t\t\treturn this.parsedTable[r][c];\n\t\t\t\t\t}\n\t\t\t\t\treturn this.parsedTable[r][c].el;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tlogToConsole(`no cell found at the given address of [${r}-${c}]`, 'warn');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tlogToConsole(`no cell found at the given address of [${r}-${c}]`, 'warn');\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Get cells at a given row.\n\t\t *\n\t\t * @param {number} rowId row id\n\t\t * @param {boolean} returnObj return an array of CellObject instead\n\t\t * @return {Array} cells in row\n\t\t */\n\t\tthis.getCellsAtRow = (rowId, returnObj = false) => {\n\t\t\tconst cells = [];\n\t\t\tfor (let c = 0; c < this.maxColumns(); c += 1) {\n\t\t\t\tconst tempCell = this.getCell(rowId, c, returnObj);\n\t\t\t\tif (tempCell) {\n\t\t\t\t\tcells.push(tempCell);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cells;\n\t\t};\n\n\t\t/**\n\t\t * Append the cell with given ids to a cached row\n\t\t *\n\t\t * @param {number} cellRowId cell row id\n\t\t * @param {number} cellColumnId cell column id\n\t\t * @param {number} rowId id of row in row cache\n\t\t */\n\t\tthis.appendToRow = (cellRowId, cellColumnId, rowId) => {\n\t\t\tconst cachedRow = this.getRow(rowId);\n\t\t\tconst cell = this.getCell(cellRowId, cellColumnId, true);\n\n\t\t\tif (cell && cachedRow) {\n\t\t\t\tcachedRow.appendChild(cell.getElement());\n\t\t\t}\n\t\t\treturn cell;\n\t\t};\n\n\t\t/**\n\t\t * Append html element to a cached row.\n\t\t *\n\t\t * @param {HTMLElement} el element\n\t\t * @param {number} rowId if of row in row cache\n\t\t */\n\t\tthis.appendElementToRow = (el, rowId) => {\n\t\t\tconst cachedRow = this.getRow(rowId);\n\n\t\t\tif (el && cachedRow) {\n\t\t\t\tcachedRow.appendChild(el);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Add cell object to a cached row.\n\t\t *\n\t\t * @param {CellObject} cellObj cell object\n\t\t * @param {number} rowId row id\n\t\t */\n\t\tthis.appendObjectToRow = (cellObj, rowId) => {\n\t\t\tconst cachedRow = this.getRow(rowId);\n\t\t\tif (cellObj && cachedRow) {\n\t\t\t\tcachedRow.appendChild(cellObj.getElement());\n\t\t\t}\n\t\t};\n\n\t\tthis.getParsedTable = () => {\n\t\t\treturn this.parsedTable;\n\t\t};\n\n\t\tthis.parseTable();\n\n\t\treturn {\n\t\t\tmaxRows: this.maxRows,\n\t\t\tmaxColumns: this.maxColumns,\n\t\t\taddRow: this.addRow,\n\t\t\tclearTable: this.clearTable,\n\t\t\tgetCell: this.getCell,\n\t\t\tappendToRow: this.appendToRow,\n\t\t\tappendElementToRow: this.appendElementToRow,\n\t\t\tappendObjectToRow: this.appendObjectToRow,\n\t\t\tgetCellsAtRow: this.getCellsAtRow,\n\t\t\tel: this.tableElement,\n\t\t\trowColors: this.rowColors,\n\t\t\tgetParsedTable: this.getParsedTable,\n\t\t};\n\t}\n\n\t// default options for responsive class\n\tconst responsiveClassDefaultOptions = {\n\t\tquery: '.wptb-preview-table',\n\t\tdefaultClasses: ['wptb-plugin-responsive-base'],\n\t\tbindToResize: false,\n\t};\n\n\t/**\n\t * Class for handling operations related to responsive functionalities of tables.\n\t *\n\t * @class\n\t * @param {Object} options options object\n\t */\n\tfunction ResponsiveFront(options = {}) {\n\t\t// merge default options with user sent options\n\t\t// this.options = { ...responsiveClassDefaultOptions, ...options };\n\t\tthis.options = { ...responsiveClassDefaultOptions, ...options };\n\n\t\tthis.elements = Array.from(document.querySelectorAll(this.options.query));\n\n\t\tthis.elementObjects = this.elements.map((e) => {\n\t\t\treturn {\n\t\t\t\tel: e,\n\t\t\t\ttableObject: new TableObject(e),\n\t\t\t};\n\t\t});\n\n\t\t/**\n\t\t * Bind rebuilding of tables to window resize event.\n\t\t */\n\t\tthis.bindRebuildToResize = () => {\n\t\t\twindow.addEventListener('resize', () => {\n\t\t\t\tthis.rebuildTables();\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Get responsive directives of table element.\n\t\t *\n\t\t * @private\n\t\t * @param {HTMLElement} el table element\n\t\t * @return {Object | null} JSON representation of the directive element, if not available, null will be returned\n\t\t */\n\t\tthis.getDirective = (el) => {\n\t\t\tconst directiveString = el.dataset.wptbResponsiveDirectives;\n\n\t\t\tif (!directiveString) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn JSON.parse(atob(directiveString));\n\t\t};\n\n\t\t/**\n\t\t * Add default classes to rebuilt tables.\n\t\t *\n\t\t * This classes are added to lay out a base style for the responsive table.\n\t\t *\n\t\t * @param {HTMLElement} el table element\n\t\t */\n\t\tthis.addDefaultClasses = (el) => {\n\t\t\tel.classList.add(this.options.defaultClasses);\n\t\t};\n\n\t\t/**\n\t\t * Remove default classes from target table.\n\t\t *\n\t\t * @param {HTMLElement} el table element\n\t\t */\n\t\tthis.removeDefaultClasses = (el) => {\n\t\t\tel.classList.remove(this.options.defaultClasses);\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table in auto mode.\n\t\t *\n\t\t * Main characteristic of auto mode is table is rebuilt by stacking rows/columns on top of each other, leaving minimal effort from user to create a responsive table at breakpoints.\n\t\t *\n\t\t * @param {HTMLElement} tableEl table element\n\t\t * @param {string} sizeRange range id for current screen size\n\t\t * @param {Object} autoOption mode options\n\t\t * @param {TableObject} tableObj table object\n\t\t */\n\t\tthis.autoBuild = (tableEl, sizeRange, autoOption, tableObj) => {\n\t\t\t// base options\n\t\t\tconst direction = autoOption.cellStackDirection[sizeRange];\n\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\tconst topRowAsHeader = autoOption.topRowAsHeader[sizeRange];\n\t\t\tconst cellsPerRow = autoOption.cellsPerRow[sizeRange];\n\n\t\t\t// new options\n\t\t\tconst staticTopRow = autoOption.staticTopRow ? autoOption.staticTopRow[sizeRange] : false;\n\t\t\tconst repeatMergedHeader =\n\t\t\t\t// check for undefined for backward compatibility of older tables\n\t\t\t\t/* eslint-disable no-nested-ternary */\n\t\t\t\tautoOption.repeatMergedHeader === undefined || autoOption.repeatMergedHeader[sizeRange] === true\n\t\t\t\t\t? topRowAsHeader\n\t\t\t\t\t\t? autoOption.repeatMergedHeader\n\t\t\t\t\t\t\t? autoOption.repeatMergedHeader[sizeRange]\n\t\t\t\t\t\t\t: true\n\t\t\t\t\t\t: false\n\t\t\t\t\t: false;\n\t\t\t/* eslint-enable no-nested-ternary */\n\n\t\t\ttableObj.clearTable();\n\n\t\t\tif (sizeRange === 'desktop') {\n\t\t\t\tthis.buildDefault(tableObj);\n\t\t\t\tthis.removeDefaultClasses(tableEl);\n\t\t\t} else {\n\t\t\t\tthis.autoDirectionBuild(\n\t\t\t\t\ttableObj,\n\t\t\t\t\tdirection,\n\t\t\t\t\ttopRowAsHeader,\n\t\t\t\t\tstaticTopRow,\n\t\t\t\t\tcellsPerRow,\n\t\t\t\t\trepeatMergedHeader\n\t\t\t\t);\n\t\t\t\tthis.addDefaultClasses(tableEl);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table with a direction to read cells.\n\t\t *\n\t\t * Direction in question in here is either by row or column:\n\t\t * * row: cells will be read row by row, in each row starting from the first column\n\t\t * * column: cells will be read column by column, in each column starting from the first row of the table\n\t\t *\n\t\t * @param {TableObject} tableObj table object\n\t\t * @param {string} direction direction to read cells, possible options [row, column]\n\t\t * @param {boolean} topRowAsHeader use top row as header\n\t\t * @param {boolean} staticTopRow use top row as static\n\t\t * @param {number} cellsPerRow cells per row\n\t\t * @param {boolean} repeatMergedHeader repeat merged top header if top row as header option is enabled\n\t\t */\n\t\tthis.autoDirectionBuild = (\n\t\t\ttableObj,\n\t\t\tdirection,\n\t\t\ttopRowAsHeader = false,\n\t\t\tstaticTopRow = false,\n\t\t\tcellsPerRow = 1,\n\t\t\trepeatMergedHeader = true\n\t\t) => {\n\t\t\tconst rows = tableObj.maxRows();\n\t\t\tconst columns = tableObj.maxColumns();\n\t\t\tconst isRowStacked = direction === 'row';\n\n\t\t\t// build table with top row as header\n\t\t\tif (topRowAsHeader) {\n\t\t\t\tthis.headerBuild(tableObj, direction, cellsPerRow, repeatMergedHeader);\n\t\t\t} else {\n\t\t\t\t// cell stack direction is selected as row\n\t\t\t\t// for future new functionality additions, keep different cell stack direction logic separate instead of generalizing the inner logic\n\t\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\t\tif (isRowStacked) {\n\t\t\t\t\tconst allCellsByRow = [];\n\t\t\t\t\tlet rowStartIndex = 0;\n\n\t\t\t\t\t// static top row option is enabled\n\t\t\t\t\tif (staticTopRow) {\n\t\t\t\t\t\tconst topCells = tableObj.getCellsAtRow(0, true);\n\n\t\t\t\t\t\tconst baseCells = topCells.filter((c) => !c.isReference());\n\n\t\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\t\tbaseCells.map((b) => {\n\t\t\t\t\t\t\trowStartIndex += 1;\n\t\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t\ttableObj.appendObjectToRow(b, rowObj.id);\n\n\t\t\t\t\t\t\tif (!b.el.style.backgroundColor) {\n\t\t\t\t\t\t\t\tconst bgColor = tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t? tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t: getComputedStyle(rowObj.el).backgroundColor;\n\t\t\t\t\t\t\t\tb.setAttribute('style', `background-color: ${bgColor}`, true, ';');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\n\t\t\t\t\t\t\tb.setAttribute('colSpan', cellsPerRow);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// get cells by reading row by row\n\t\t\t\t\tfor (let r = rowStartIndex; r < rows; r += 1) {\n\t\t\t\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t\t\t\ttableObj.getCellsAtRow(r, true).forEach((c) => {\n\t\t\t\t\t\t\t// only use non reference cells to avoid duplication for non top row as header tables\n\t\t\t\t\t\t\tif (!c.isReference()) {\n\t\t\t\t\t\t\t\tallCellsByRow.push(c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cellCount = allCellsByRow.length;\n\n\t\t\t\t\tfor (let c = 0, r = 0; c < cellCount; c += cellsPerRow, r += 1) {\n\t\t\t\t\t\t// const rowId = tableObj.addRow('wptb-row').id;\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t// place cells by 'cells by row' option value\n\t\t\t\t\t\tfor (let pR = 0; pR < cellsPerRow; pR += 1) {\n\t\t\t\t\t\t\tconst tempCell = allCellsByRow[c + pR];\n\n\t\t\t\t\t\t\tif (tempCell) {\n\t\t\t\t\t\t\t\ttableObj.appendElementToRow(tempCell.getElement(), rowObj.id);\n\n\t\t\t\t\t\t\t\ttempCell.resetAllAttributes();\n\t\t\t\t\t\t\t\ttempCell.setAttribute('style', 'width: 100% !important', true, ';');\n\t\t\t\t\t\t\t\ttempCell.setAttribute('colSpan', 1);\n\t\t\t\t\t\t\t\ttempCell.setAttribute('rowSpan', 1);\n\n\t\t\t\t\t\t\t\tif (!tempCell.el.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t// @deprecated\n\t\t\t\t\t\t\t\t\t// const bgColor =\n\t\t\t\t\t\t\t\t\t// \tr === 0\n\t\t\t\t\t\t\t\t\t// \t\t? tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t// \t\t\t? tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t// \t\t\t: getComputedStyle(rowObj.el).backgroundColor\n\t\t\t\t\t\t\t\t\t// \t\t: tableObj.rowColors[r % 2 === 0 ? 'odd' : 'even'];\n\n\t\t\t\t\t\t\t\t\tconst currentTableColor =\n\t\t\t\t\t\t\t\t\t\ttableObj.rowColors[(rowStartIndex + r) % 2 === 0 ? 'odd' : 'even'];\n\t\t\t\t\t\t\t\t\ttempCell.el.style.backgroundColor =\n\t\t\t\t\t\t\t\t\t\tcurrentTableColor || getComputedStyle(rowObj.el).backgroundColor;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// preserve original row colors for even and odd rows\n\t\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// cell stack direction is selected as column\n\t\t\t\telse {\n\t\t\t\t\tconst allCellsByCol = [];\n\t\t\t\t\tlet rowStartIndex = 0;\n\n\t\t\t\t\t// static top row option is enabled\n\t\t\t\t\tif (staticTopRow) {\n\t\t\t\t\t\tconst topCells = tableObj.getCellsAtRow(0, true);\n\n\t\t\t\t\t\tconst baseCells = topCells.filter((t) => !t.isReference());\n\n\t\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\t\tbaseCells.map((b) => {\n\t\t\t\t\t\t\trowStartIndex += 1;\n\t\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t\ttableObj.appendObjectToRow(b, rowObj.id);\n\n\t\t\t\t\t\t\tif (!b.el.style.backgroundColor) {\n\t\t\t\t\t\t\t\tconst bgColor = tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t? tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t: getComputedStyle(rowObj.el).backgroundColor;\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tb.el.style.backgroundColor = bgColor;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\n\t\t\t\t\t\t\tb.setAttribute('colSpan', cellsPerRow);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// read all cells column by column\n\t\t\t\t\tfor (let c = 0; c < columns; c += 1) {\n\t\t\t\t\t\tfor (let r = rowStartIndex; r < rows; r += 1) {\n\t\t\t\t\t\t\tconst tCell = tableObj.getCell(r, c, true);\n\t\t\t\t\t\t\t// only use non reference cells to avoid duplication for non top row as header tables\n\t\t\t\t\t\t\tif (tCell && !tCell.isReference()) {\n\t\t\t\t\t\t\t\tallCellsByCol.push(tCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cellCount = allCellsByCol.length;\n\n\t\t\t\t\tfor (let c = 0, r = 0; c < cellCount; c += cellsPerRow, r += 1) {\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\tfor (let cR = 0; cR < cellsPerRow; cR += 1) {\n\t\t\t\t\t\t\tconst tempCell = allCellsByCol[c + cR];\n\n\t\t\t\t\t\t\tif (tempCell) {\n\t\t\t\t\t\t\t\ttableObj.appendElementToRow(tempCell.getElement(), rowObj.id);\n\n\t\t\t\t\t\t\t\ttempCell.resetAllAttributes();\n\t\t\t\t\t\t\t\ttempCell.setAttribute('style', 'width: 100% !important', true, ';');\n\t\t\t\t\t\t\t\ttempCell.setAttribute('colSpan', 1);\n\t\t\t\t\t\t\t\ttempCell.setAttribute('rowSpan', 1);\n\n\t\t\t\t\t\t\t\tif (!tempCell.el.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\tconst bgColor =\n\t\t\t\t\t\t\t\t\t\tr === 0\n\t\t\t\t\t\t\t\t\t\t\t? tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t\t\t\t? tableObj.rowColors.header\n\t\t\t\t\t\t\t\t\t\t\t\t: getComputedStyle(rowObj.el).backgroundColor\n\t\t\t\t\t\t\t\t\t\t\t: tableObj.rowColors[r % 2 === 0 ? 'odd' : 'even'];\n\t\t\t\t\t\t\t\t\ttempCell.el.style.backgroundColor = bgColor;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// preserve original row colors for even and odd rows\n\t\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Build table with top row assigned as header.\n\t\t *\n\t\t * @param {TableObject} tableObj table object\n\t\t * @param {string} direction cell stack direction, possible options are [row, column]\n\t\t * @param {number} itemsPerHeader items bound to each header element\n\t\t * @param {boolean} repeatMergedHeader repeat merged header\n\t\t */\n\t\tthis.headerBuild = (tableObj, direction, itemsPerHeader = 1, repeatMergedHeader = true) => {\n\t\t\t// cells at header\n\t\t\t// applying header row color to cells\n\t\t\tconst headerCells = tableObj.getCellsAtRow(0, true).map((h) => {\n\t\t\t\th.resetAllAttributes();\n\t\t\t\tif (!h.el.style.backgroundColor) {\n\t\t\t\t\th.setAttribute('style', `background-color: ${tableObj.rowColors.header}`, true, ';');\n\t\t\t\t}\n\t\t\t\treturn h;\n\t\t\t});\n\n\t\t\tconst stackedAsColumn = direction === 'column';\n\n\t\t\t// row count\n\t\t\tconst rows = tableObj.maxRows();\n\t\t\t// column count\n\t\t\tconst columns = tableObj.maxColumns();\n\n\t\t\tconst rowBorderStyle = '3px solid gray';\n\n\t\t\t// stack direction is column\n\t\t\tif (stackedAsColumn) {\n\t\t\t\t/**\n\t\t\t\t * Add header cells as new row to table.\n\t\t\t\t *\n\t\t\t\t * @param {boolean} addBorder add top border to header row\n\t\t\t\t */\n\t\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\t\tfunction addHeaderCells(addBorder = false) {\n\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\tif (addBorder) {\n\t\t\t\t\t\trowObj.el.style.borderTop = rowBorderStyle;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\t\theaderCells.map((h) => {\n\t\t\t\t\t\t// clone header cell to reuse it for multiple rows\n\t\t\t\t\t\tconst cellClone = h.el.cloneNode(true);\n\t\t\t\t\t\ttableObj.appendElementToRow(cellClone, rowObj.id);\n\t\t\t\t\t\tif (!cellClone.style.backgroundColor) {\n\t\t\t\t\t\t\tcellClone.style.backgroundColor = `${getComputedStyle(rowObj.el).backgroundColor}`;\n\t\t\t\t\t\t\tif (cellClone.style.backgroundColor) cellClone.style.backgroundColor += ' !important';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\t\t\t\t}\n\n\t\t\t\t// count of header rows that will be created\n\t\t\t\tconst headerCount = Math.ceil((rows - 1) / itemsPerHeader);\n\t\t\t\t// row index on original table\n\t\t\t\tlet currentOriginalRow = 1;\n\t\t\t\tfor (let r = 0; r < headerCount; r += 1) {\n\t\t\t\t\t// create header row and add to table\n\t\t\t\t\taddHeaderCells(r > 0);\n\t\t\t\t\tfor (let c = 0; c < itemsPerHeader; c += 1) {\n\t\t\t\t\t\t// break iteration when current row surpasses original row amount\n\t\t\t\t\t\tif (currentOriginalRow >= rows) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\t// apply row color relative to current header row\n\t\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\t\t\t\t\t\tfor (let cc = 0; cc < columns; cc += 1) {\n\t\t\t\t\t\t\tconst currentCell = tableObj.getCell(currentOriginalRow, cc, true);\n\n\t\t\t\t\t\t\tif (currentCell) {\n\t\t\t\t\t\t\t\tcurrentCell.resetAllAttributes();\n\n\t\t\t\t\t\t\t\t// status to decide whether render cell or not\n\t\t\t\t\t\t\t\tlet cellAddStatus = true;\n\n\t\t\t\t\t\t\t\tconst rowSpan = currentCell.getSpan(CellObject.spanTypes.row);\n\t\t\t\t\t\t\t\tconst colSpan = currentCell.getSpan(CellObject.spanTypes.column);\n\n\t\t\t\t\t\t\t\tif (rowSpan > 1) {\n\t\t\t\t\t\t\t\t\t// items remaining in current header\n\t\t\t\t\t\t\t\t\tconst remainingItems = itemsPerHeader - c;\n\n\t\t\t\t\t\t\t\t\t// calculate whether to apply full rowspan value or remaining item value depending on the current position of the cell\n\t\t\t\t\t\t\t\t\tconst currentRowSpan = Math.min(rowSpan, remainingItems);\n\n\t\t\t\t\t\t\t\t\tcellAddStatus = currentCell.setSpan(CellObject.spanTypes.row, currentRowSpan);\n\t\t\t\t\t\t\t\t\t// reset render status of cell to visible for future use\n\t\t\t\t\t\t\t\t\tcurrentCell.setMergedRenderStatus(true);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (cellAddStatus) {\n\t\t\t\t\t\t\t\t\tif (!currentCell.el.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute(\n\t\t\t\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t\t\t\t`background-color: ${tableObj.rowColors[c % 2 === 0 ? 'even' : 'odd']}`,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t';'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttableObj.appendObjectToRow(currentCell, rowObj.id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentOriginalRow += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// stack direction is row\n\t\t\t\t// number of headers that will be created\n\t\t\t\tconst headerCount = Math.ceil((rows - 1) / itemsPerHeader);\n\n\t\t\t\tlet currentOriginalRow = 1;\n\n\t\t\t\tfor (let hc = 0; hc < headerCount; hc += 1) {\n\t\t\t\t\tfor (let c = 0; c < columns; c += 1) {\n\t\t\t\t\t\tconst rowObj = tableObj.addRow('wptb-row');\n\n\t\t\t\t\t\tif (hc > 0 && c === 0) {\n\t\t\t\t\t\t\trowObj.el.style.borderTop = rowBorderStyle;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (repeatMergedHeader || hc === 0) {\n\t\t\t\t\t\t\tconst headerCellObject = tableObj.getCell(0, c, true);\n\t\t\t\t\t\t\t// const clonedHeaderCell = headerCells[c]?.el.cloneNode(true);\n\n\t\t\t\t\t\t\tif (!headerCellObject.isReference()) {\n\t\t\t\t\t\t\t\tconst clonedHeaderCell = headerCellObject.el.cloneNode(true);\n\n\t\t\t\t\t\t\t\t// apply header row color to header cell\n\t\t\t\t\t\t\t\tclonedHeaderCell.style.backgroundColor = `${tableObj.rowColors.header} !important`;\n\t\t\t\t\t\t\t\ttableObj.appendElementToRow(clonedHeaderCell, rowObj.id);\n\n\t\t\t\t\t\t\t\tif (!clonedHeaderCell.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\tclonedHeaderCell.style.backgroundColor = `${\n\t\t\t\t\t\t\t\t\t\tgetComputedStyle(rowObj.el).backgroundColor\n\t\t\t\t\t\t\t\t\t}`;\n\t\t\t\t\t\t\t\t\tif (clonedHeaderCell.style.backgroundColor)\n\t\t\t\t\t\t\t\t\t\tclonedHeaderCell.style.backgroundColor += ' !important';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!repeatMergedHeader) {\n\t\t\t\t\t\t\t\t\tclonedHeaderCell.setAttribute('rowSpan', columns * headerCount);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tclonedHeaderCell.setAttribute('rowSpan', clonedHeaderCell.getAttribute('colSpan'));\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclonedHeaderCell.setAttribute('colSpan', 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// clear out row color to override row color with cell colors\n\t\t\t\t\t\trowObj.el.style.backgroundColor = '#ffffff00';\n\n\t\t\t\t\t\tfor (let r = 0; r < itemsPerHeader; r += 1) {\n\t\t\t\t\t\t\tif (currentOriginalRow + r >= rows) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// const currentCell = tableObj.appendToRow(currentOriginalRow + r, c, rowObj.id);\n\t\t\t\t\t\t\tconst currentCell = tableObj.getCell(currentOriginalRow + r, c, true);\n\n\t\t\t\t\t\t\tif (currentCell) {\n\t\t\t\t\t\t\t\tcurrentCell.resetAllAttributes();\n\n\t\t\t\t\t\t\t\tlet cellAddStatus = true;\n\n\t\t\t\t\t\t\t\tconst rowSpan = currentCell.getSpan(CellObject.spanTypes.row);\n\t\t\t\t\t\t\t\tconst colSpan = currentCell.getSpan(CellObject.spanTypes.column);\n\n\t\t\t\t\t\t\t\tif (rowSpan > 1) {\n\t\t\t\t\t\t\t\t\tconst remainingItems = itemsPerHeader - r;\n\n\t\t\t\t\t\t\t\t\tconst currentRowSpan = Math.min(rowSpan, remainingItems);\n\n\t\t\t\t\t\t\t\t\tcellAddStatus = currentCell.setSpan(CellObject.spanTypes.row, currentRowSpan);\n\n\t\t\t\t\t\t\t\t\tconst rS = currentCell.el.getAttribute('rowSpan');\n\t\t\t\t\t\t\t\t\tconst cS = currentCell.el.getAttribute('colSpan');\n\n\t\t\t\t\t\t\t\t\t// switch span values\n\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute('rowSpan', cS);\n\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute('colSpan', rS);\n\n\t\t\t\t\t\t\t\t\tcurrentCell.setMergedRenderStatus(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (cellAddStatus) {\n\t\t\t\t\t\t\t\t\t// color index for the cell, this will be used to reflect table row colors to cells. currently, grouping up the same items with the same color code\n\t\t\t\t\t\t\t\t\tlet colorIndex = (currentOriginalRow + r + hc) % 2 === 0 ? 'even' : 'odd';\n\n\t\t\t\t\t\t\t\t\t// for better visuals and distinction for tables with 1 item per header, using this calculation for color index\n\t\t\t\t\t\t\t\t\tif (itemsPerHeader === 1) {\n\t\t\t\t\t\t\t\t\t\tcolorIndex = currentOriginalRow % 2 === 0 ? 'even' : 'odd';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (!currentCell.el.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\tcurrentCell.setAttribute(\n\t\t\t\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t\t\t\t`background-color: ${tableObj.rowColors[colorIndex]}`,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t';'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttableObj.appendObjectToRow(currentCell, rowObj.id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentOriginalRow += itemsPerHeader;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Build table in its default form.\n\t\t *\n\t\t * Default form of table is the layout it has in desktop breakpoint.\n\t\t *\n\t\t * @param {TableObject} tableObj table object\n\t\t */\n\t\tthis.buildDefault = (tableObj) => {\n\t\t\tconst rows = tableObj.maxRows();\n\t\t\tconst columns = tableObj.maxColumns();\n\n\t\t\tfor (let r = 0; r < rows; r += 1) {\n\t\t\t\tconst rowId = tableObj.addRow('', true, r).id;\n\t\t\t\tfor (let c = 0; c < columns; c += 1) {\n\t\t\t\t\tconst tempCell = tableObj.getCell(r, c, true);\n\n\t\t\t\t\t// only render cell if a valid cell is found and it is not a reference\n\t\t\t\t\tif (tempCell && !tempCell.isReference()) {\n\t\t\t\t\t\t// reset all modified attributes of cell to their default values\n\t\t\t\t\t\ttempCell.resetAllAttributes();\n\t\t\t\t\t\ttableObj.appendElementToRow(tempCell.getElement(), rowId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Calculate range id for given size value.\n\t\t *\n\t\t * @param {number} val value\n\t\t * @param {Object} stops an object containing stop ids as keys and respective sizes as values\n\t\t * @return {string} range id\n\t\t */\n\t\tthis.calculateRangeId = (val, stops) => {\n\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\tconst sortedStops = Object.keys(stops).sort((a, b) => stops[a].width - stops[b].width);\n\n\t\t\tlet rangeId = sortedStops[0];\n\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tsortedStops.map((s) => {\n\t\t\t\tif (val >= stops[s].width) {\n\t\t\t\t\trangeId = s;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn rangeId;\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table according to its responsive directives.\n\t\t *\n\t\t * @private\n\t\t * @param {HTMLElement} el table element\n\t\t * @param {number} size size in pixels\n\t\t * @param {TableObject} tableObj table object instance\n\t\t * @throws An error will be given for invalid mode name\n\t\t */\n\t\tthis.rebuildTable = (el, size, tableObj) => {\n\t\t\tconst directive = this.getDirective(el);\n\n\t\t\tif (directive) {\n\t\t\t\tif (!directive.responsiveEnabled) {\n\t\t\t\t\t// this.buildDefault(tableObj);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mode = directive.responsiveMode;\n\n\t\t\t\t// main build logic for different responsive modes should be named in the format of `{modeName}Build` to automatically call the associated function from here\n\t\t\t\tconst buildCallable = this[`${mode}Build`];\n\n\t\t\t\tif (!size) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tsize = el.getBoundingClientRect().width;\n\t\t\t\t}\n\n\t\t\t\tconst sizeRangeId = this.calculateRangeId(size, directive.breakpoints);\n\n\t\t\t\tif (buildCallable) {\n\t\t\t\t\tconst modeOptions = directive.modeOptions[mode];\n\t\t\t\t\tbuildCallable.call(this, el, sizeRangeId, modeOptions, tableObj);\n\n\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\tWPTB_RecalculateIndexes(el);\n\t\t\t\t\tconst tabEvent = new CustomEvent('table:rebuilt', {\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tsizeRangeId,\n\t\t\t\t\t\t\ttopRowAsHeader: directive.modeOptions[mode].topRowAsHeader,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tel.dispatchEvent(tabEvent);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`No build mode named as [${mode}] found.`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Rebuild tables with the given screen size.\n\t\t *\n\t\t * @param {number} size screen size\n\t\t */\n\t\tthis.rebuildTables = (size) => {\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tthis.elementObjects.map((o) => {\n\t\t\t\tlet innerSize = size;\n\t\t\t\tif (!size) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tinnerSize = window.innerWidth;\n\n\t\t\t\t\tconst directives = this.getDirective(o.el);\n\t\t\t\t\t// calculate size according to relative width directive\n\t\t\t\t\tif (directives && directives.relativeWidth) {\n\t\t\t\t\t\tswitch (directives.relativeWidth) {\n\t\t\t\t\t\t\tcase 'window':\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tinnerSize = window.innerWidth;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'container':\n\t\t\t\t\t\t\t\t// get the size of the container table is in\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tinnerSize = o.el.parentNode.parentNode.parentNode.clientWidth;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\t\tinnerSize = window.innerWidth;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.rebuildTable(o.el, innerSize, o.tableObject);\n\t\t\t});\n\t\t};\n\n\t\tif (this.options.bindToResize) {\n\t\t\tthis.bindRebuildToResize();\n\t\t}\n\n\t\treturn {\n\t\t\trebuildTables: this.rebuildTables,\n\t\t\tgetDirective: this.getDirective,\n\t\t\tcalculateRangeId: this.calculateRangeId,\n\t\t};\n\t}\n\n\treturn ResponsiveFront;\n});\n","/**\n * Attach style pass component to global space.\n */\n(function attachToGlobal(globalKey, context, factory) {\n\t// eslint-disable-next-line no-param-reassign\n\tcontext[globalKey] = factory();\n})('WPTB_StylePass', self || global, function () {\n\t/**\n\t * Style pass component\n\t * This component will be used to either let or block theme related styling to affect table styles.\n\t *\n\t * @class\n\t */\n\tfunction StylePass() {\n\t\tthis.options = { stylesheets: {} };\n\n\t\t/**\n\t\t * Maintain the same position of table container and insert shadow root container to exact same index.\n\t\t *\n\t\t * @param {HTMLElement} shadowRootContainer\n\t\t * @param {HTMLElement} tableContainer\n\t\t *\n\t\t */\n\t\tthis.insertShadowRoot = (shadowRootContainer, tableContainer) => {\n\t\t\tconst mainParent = tableContainer.parentNode;\n\t\t\tconst parentChildren = Array.from(mainParent.children);\n\t\t\tconst tableIndex = parentChildren.indexOf(tableContainer);\n\t\t\tconst upSibling = tableIndex - 1 > 0 ? null : parentChildren[tableIndex - 1];\n\t\t\tconst downSibling = tableIndex + 1 >= parentChildren.length ? null : parentChildren[tableIndex + 1];\n\n\t\t\tthis.prepareAllStylesheets(this.options.stylesheets, shadowRootContainer.shadowRoot);\n\t\t\tthis.borrowFromTheme(tableContainer);\n\n\t\t\tshadowRootContainer.shadowRoot.appendChild(tableContainer);\n\n\t\t\tif (upSibling) {\n\t\t\t\tupSibling.insertAdjacentElement('afterend', shadowRootContainer);\n\t\t\t} else if (downSibling) {\n\t\t\t\tdownSibling.insertAdjacentElement('beforebegin', shadowRootContainer);\n\t\t\t} else {\n\t\t\t\tmainParent.appendChild(shadowRootContainer);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Borrow some theme styles and reflect them to table.\n\t\t *\n\t\t * @param {HTMLElement} tableContainer table container element\n\t\t */\n\t\tthis.borrowFromTheme = (tableContainer) => {\n\t\t\tconst table = tableContainer.querySelector('table');\n\t\t\tconst { fontFamily } = getComputedStyle(table);\n\t\t\ttable.style.fontFamily = fontFamily;\n\t\t};\n\n\t\t/**\n\t\t * Initialize and start style pass.\n\t\t *\n\t\t * @param {Object} options style pass options\n\t\t */\n\t\tthis.init = (options) => {\n\t\t\tthis.options = { ...this.options, ...options };\n\t\t\tconst tableContainers = Array.from(document.querySelectorAll('div .wptb-table-container'));\n\n\t\t\tif (tableContainers.length > 0) {\n\t\t\t\ttableContainers.map(this.setupStylePass);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Check if style pass is enabled for current table.\n\t\t *\n\t\t * @param {HTMLElement} tableContainer table container\n\t\t * @return {string} status null for disabled, true for enabled\n\t\t */\n\t\tthis.checkTableEligibility = (tableContainer) => {\n\t\t\tconst table = tableContainer.querySelector('table');\n\t\t\treturn table.dataset.disableThemeStyles;\n\t\t};\n\n\t\t/**\n\t\t * Prepare containers for necessary style pass operations.\n\t\t *\n\t\t * @param {HTMLElement} tableContainer table container\n\t\t */\n\t\tthis.setupStylePass = (tableContainer) => {\n\t\t\t// abort if style pass is not enabled for table\n\t\t\tif (!this.checkTableEligibility(tableContainer)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst container = document.createElement('div');\n\t\t\tconst maxWidth = tableContainer.querySelector('table').dataset.wptbTableContainerMaxWidth;\n\t\t\tif (maxWidth) {\n\t\t\t\tcontainer.style.maxWidth = `${maxWidth}px`;\n\t\t\t}\n\n\t\t\tcontainer.attachShadow({ mode: 'open' });\n\n\t\t\tthis.insertShadowRoot(container, tableContainer);\n\t\t};\n\n\t\tthis.prepareAllStylesheets = (stylesheetsObj, root) => {\n\t\t\tObject.keys(stylesheetsObj).map((s) => {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(stylesheetsObj, s)) {\n\t\t\t\t\tthis.prepareStylesheet(s, stylesheetsObj[s], root);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tthis.prepareStylesheet = (handler, url, root) => {\n\t\t\tconst linkElement = document.createElement('link');\n\t\t\tlinkElement.setAttribute('id', handler);\n\t\t\tlinkElement.setAttribute('href', url);\n\t\t\tlinkElement.setAttribute('rel', 'stylesheet');\n\t\t\tlinkElement.setAttribute('media', 'all');\n\n\t\t\troot.appendChild(linkElement);\n\t\t};\n\t}\n\n\treturn new StylePass();\n});\n","(function () {\n\t/**\n\t * All of the code for your public-facing JavaScript source\n\t * should reside in this file.\n\t *\n\t * Note: It has been assumed you will write jQuery code here, so the\n\t * $ function reference has been prepared for usage within the scope\n\t * of this function.\n\t *\n\t * This enables you to define handlers, for when the DOM is ready:\n\t *\n\t * $(function() {\n\t *\n\t * });\n\t *\n\t * When the window is loaded:\n\t *\n\t * $( window ).load(function() {\n\t *\n\t * });\n\t *\n\t * ...and/or other possibilities.\n\t *\n\t * Ideally, it is not considered best practise to attach more than a\n\t * single DOM-ready or window-load handler for a particular page.\n\t * Although scripts in the WordPress core, Plugins and Themes may be\n\t * practising this, we should strive to set a better example in our own work.\n\t *\n\t * The file is enqueued from inc/frontend/class-frontend.php.\n\t */\n\n\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\tconst tableContainers = document.getElementsByClassName('wptb-table-container');\n\t\t/**\n\t\t * Adds hover color change support for supported button elements.\n\t\t *\n\t\t * @param querySelector\n\t\t */\n\t\tfunction addHoverSupport(querySelector) {\n\t\t\tconst buttons = Array.from(document.querySelectorAll(querySelector));\n\n\t\t\tbuttons.map((b) => {\n\t\t\t\tb.addEventListener('mouseenter', (e) => {\n\t\t\t\t\tconst el = e.target;\n\t\t\t\t\t// hover background-color\n\t\t\t\t\tif (el.dataset.wptbElementHoverBgColor) {\n\t\t\t\t\t\tel.style.backgroundColor = el.dataset.wptbElementHoverBgColor;\n\t\t\t\t\t}\n\t\t\t\t\t// hover color\n\t\t\t\t\tif (el.dataset.wptbElementHoverTextColor) {\n\t\t\t\t\t\tel.style.color = el.dataset.wptbElementHoverTextColor;\n\t\t\t\t\t}\n\t\t\t\t\t// hover scale\n\t\t\t\t\tif (el.dataset.wptbElementHoverScale) {\n\t\t\t\t\t\tel.style.transform = `scale(${b.dataset.wptbElementHoverScale})`;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tb.addEventListener('mouseleave', (e) => {\n\t\t\t\t\t// reset all supported hover properties to their default value\n\t\t\t\t\tconst el = e.target;\n\t\t\t\t\tif (el.dataset.wptbElementHoverBgColor) {\n\t\t\t\t\t\tel.style.backgroundColor = el.dataset.wptbElementBgColor;\n\t\t\t\t\t}\n\t\t\t\t\tif (el.dataset.wptbElementHoverTextColor) {\n\t\t\t\t\t\tel.style.color = el.dataset.wptbElementColor;\n\t\t\t\t\t}\n\t\t\t\t\tif (el.dataset.wptbElementHoverScale) {\n\t\t\t\t\t\tel.style.transform = 'scale(1)';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// add all kind of functions that have event listeners before responsive table reconstruction to make sure those event listeners are carried over to their clones\n\t\taddHoverSupport('.wptb-preview-table .wptb-button');\n\n\t\t/**\n\t\t * function wptb_tableContainerSectionSmall\n\t\t * add class ( wptb-section-small ) in small width\n\t\t * remove this class in large width\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tfunction wptb_tableContainerSectionSmall() {\n\t\t\tconst wptbTableContainer = jQuery('.wptb-table-container');\n\t\t\tconst sw = wptbTableContainer.width();\n\t\t\tif (wptbTableContainer.length > 0) {\n\t\t\t\tif (sw < 480) {\n\t\t\t\t\twptbTableContainer.addClass('wptb-section-small');\n\t\t\t\t} else {\n\t\t\t\t\twptbTableContainer.removeClass('wptb-section-small');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * function wptb_tableGenerateMobile\n\t\t * generates a mobile view of the table\n\t\t * when the top row of the table is not a heading\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tfunction wptb_tableGenerateMobile() {\n\t\t\tconst wptbTableContainer = document.getElementsByClassName('wptb-table-container');\n\t\t\tconst wptbPreviewTable = document.getElementsByClassName('wptb-preview-table');\n\t\t\tconst wptbPreviewTableMobile = document.getElementsByClassName('wptb-preview-table-mobile');\n\t\t\tif (wptbTableContainer.length > 0 && wptbPreviewTable.length > 0) {\n\t\t\t\tconst sw = wptbTableContainer[0].offsetWidth;\n\t\t\t\tif (sw < 480) {\n\t\t\t\t\twptbPreviewTable[0].style.display = 'none';\n\n\t\t\t\t\tif (wptbPreviewTableMobile.length == 0) {\n\t\t\t\t\t\tconst tableRows = wptbPreviewTable[0].rows;\n\t\t\t\t\t\tconst tableRowTop = tableRows[0];\n\t\t\t\t\t\tconst tableRowTopChildren = tableRowTop.children;\n\t\t\t\t\t\tlet columnCount = 0;\n\n\t\t\t\t\t\tfor (let i = 0; i < tableRowTopChildren.length; i++) {\n\t\t\t\t\t\t\tcolumnCount += tableRowTopChildren[i].colSpan;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newTableArray = [];\n\n\t\t\t\t\t\tfor (let i = 0; i < columnCount; i++) {\n\t\t\t\t\t\t\tnewTableArray[i] = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (let i = 0; i < tableRows.length; i++) {\n\t\t\t\t\t\t\tconst rowChildren = tableRows[i].children;\n\n\t\t\t\t\t\t\tfor (let j = 0; j < columnCount; j++) {\n\t\t\t\t\t\t\t\tif (rowChildren[j].dataset.xIndex == j) {\n\t\t\t\t\t\t\t\t\tconst tdNew = rowChildren[j].cloneNode(true);\n\t\t\t\t\t\t\t\t\tif (tableRows[i].style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\ttdNew.style.backgroundColor = tableRows[i].style.backgroundColor;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnewTableArray[j].push(tdNew);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewTableArray[j].push('');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst table = document.createElement('table');\n\t\t\t\t\t\ttable.classList.add('wptb-preview-table-mobile');\n\t\t\t\t\t\tconst tableStyle = wptbPreviewTable[0].getAttribute('style');\n\t\t\t\t\t\ttable.setAttribute('style', tableStyle);\n\t\t\t\t\t\ttable.style.display = 'table';\n\t\t\t\t\t\tfor (let i = 0; i < columnCount; i++) {\n\t\t\t\t\t\t\tconst row = table.insertRow(-1);\n\t\t\t\t\t\t\trow.classList.add('wptb-row');\n\n\t\t\t\t\t\t\tfor (let j = 0; j < tableRows.length; j++) {\n\t\t\t\t\t\t\t\tif (newTableArray[i][j]) {\n\t\t\t\t\t\t\t\t\trow.appendChild(newTableArray[i][j]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twptbTableContainer[0].appendChild(table);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twptbPreviewTableMobile[0].style.display = 'table';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twptbPreviewTable[0].style.display = 'table';\n\t\t\t\t\tif (wptbPreviewTableMobile.length > 0) {\n\t\t\t\t\t\twptbPreviewTableMobile[0].style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twptb_tdDefaultWidth();\n\t\twptb_tableReconstraction();\n\n\t\t// when window resize call wpcd_archiveSectionSmall and wptb_tableGenerateMobile\n\t\twindow.addEventListener('resize', function() {\n\t\t\twptb_tdDefaultWidth();\n\t\t\twptb_tableReconstraction();\n\t\t});\n\n\t\tfunction wptb_tableReconstraction() {\n\t\t\tfor (let i = 0; i < tableContainers.length; i++) {\n\t\t\t\tconst tableContainer = tableContainers[i];\n\n\t\t\t\t// Set default indicator of creating a new table in true\n\t\t\t\tlet createNewTableIndic = true;\n\n\t\t\t\tlet previewTable = tableContainer.getElementsByClassName('wptb-preview-table');\n\t\t\t\tlet tableContainerMatrix = tableContainer.getElementsByClassName('wptb-table-container-matrix');\n\n\t\t\t\tif (previewTable.length > 0 && tableContainerMatrix.length > 0) {\n\t\t\t\t\tpreviewTable = previewTable[0];\n\t\t\t\t\ttableContainerMatrix = tableContainerMatrix[0];\n\t\t\t\t\tpreviewTable.style.display = 'table';\n\n\t\t\t\t\tif (previewTable.dataset.wptbTableAlignment) {\n\t\t\t\t\t\tconst { wptbTableAlignment } = previewTable.dataset;\n\n\t\t\t\t\t\tconst wptbTableContainerWidth = tableContainer.offsetWidth;\n\t\t\t\t\t\tif (wptbTableContainerWidth < previewTable.offsetWidth) {\n\t\t\t\t\t\t\tpreviewTable.style.float = null;\n\t\t\t\t\t\t} else if (wptbTableAlignment == 'center') {\n\t\t\t\t\t\t\tpreviewTable.style.float = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpreviewTable.style.float = wptbTableAlignment;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (wptbTableAlignment == 'center') {\n\t\t\t\t\t\t\ttableContainer.style.float = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttableContainer.style.float = wptbTableAlignment;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// check data parametrs reconstraction and wptbAdaptiveTable if they are both equal 1 then continue\n\t\t\t\t\tif (previewTable.dataset.reconstraction == 1 && previewTable.dataset.wptbAdaptiveTable == 1) {\n\t\t\t\t\t\t// get widths for wptb-table-container and wptb-preview-table\n\t\t\t\t\t\tconst tableContainerWidth = tableContainer.offsetWidth;\n\t\t\t\t\t\tconst previewTableWidth = previewTable.offsetWidth;\n\n\t\t\t\t\t\t// get count of table columns\n\t\t\t\t\t\tlet tableColumns;\n\t\t\t\t\t\tconst previewTableRows = previewTable.rows;\n\t\t\t\t\t\tif (previewTableRows.length > 0) {\n\t\t\t\t\t\t\tconst firstRow = previewTableRows[0];\n\t\t\t\t\t\t\tconst tdsRow = firstRow.querySelectorAll('td');\n\n\t\t\t\t\t\t\ttableColumns = tdsRow.length;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// check the top line if it is presented as a title\n\t\t\t\t\t\tconst tablePreviewHeadIndic = previewTable.classList.contains('wptb-table-preview-head');\n\n\t\t\t\t\t\t// check conditions: if table top row is as \"header\" - table must have more that two columns,\n\t\t\t\t\t\t// otherwise table must have more taht one columns\n\t\t\t\t\t\tlet tableReconstructed = false;\n\t\t\t\t\t\tlet wptbPreviewTableMobile;\n\t\t\t\t\t\tif ((!tablePreviewHeadIndic || tableColumns > 2) && tableColumns > 1) {\n\t\t\t\t\t\t\t// if width of wptb-table-container less then width of wptb-preview-table -\n\t\t\t\t\t\t\t// continue the way creation new mobile table\n\t\t\t\t\t\t\tif (tableContainerWidth < previewTableWidth) {\n\t\t\t\t\t\t\t\ttableContainer.style.overflow = 'unset';\n\n\t\t\t\t\t\t\t\t// hide wptb-table-container-matrix\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttableContainerMatrix &&\n\t\t\t\t\t\t\t\t\t!tableContainerMatrix.classList.contains('wptb-matrix-hide')\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\ttableContainerMatrix.classList.add('wptb-matrix-hide');\n\t\t\t\t\t\t\t\t\ttableReconstructed = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpreviewTable.classList.add('wptb-mobile-view-active');\n\n\t\t\t\t\t\t\t\tif (previewTable.rows && tableColumns) {\n\t\t\t\t\t\t\t\t\t// we get the estimated cell width\n\t\t\t\t\t\t\t\t\tconst tdWidth = previewTableWidth / tableColumns;\n\n\t\t\t\t\t\t\t\t\t// get the quantity of whole Columns that are can placed in the container\n\t\t\t\t\t\t\t\t\tlet wholeColumnsInContainer = Math.floor(tableContainerWidth / tdWidth);\n\t\t\t\t\t\t\t\t\tif (wholeColumnsInContainer < 1) wholeColumnsInContainer = 1;\n\n\t\t\t\t\t\t\t\t\t// check for the existence of a mobile table\n\t\t\t\t\t\t\t\t\t// if it available, check this table for compliance\n\t\t\t\t\t\t\t\t\t// with our conditions. If it compliance, remain this table\n\t\t\t\t\t\t\t\t\t// and cancel creating a new table ( createNewTableIndic = false ).\n\t\t\t\t\t\t\t\t\tif (tableContainer.getElementsByClassName('wptb-preview-table-mobile').length > 0) {\n\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile = tableContainer.getElementsByClassName(\n\t\t\t\t\t\t\t\t\t\t\t'wptb-preview-table-mobile'\n\t\t\t\t\t\t\t\t\t\t)[0];\n\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile.classList.remove('wptb-mobile-hide');\n\t\t\t\t\t\t\t\t\t\tconst dataWholeColumnInContainer =\n\t\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile.dataset.wholeColumnsInContainer;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tdataWholeColumnInContainer == wholeColumnsInContainer &&\n\t\t\t\t\t\t\t\t\t\t\tpreviewTable.classList.contains('wptb-table-preview-head')\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tcreateNewTableIndic = false;\n\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\tdataWholeColumnInContainer == wholeColumnsInContainer &&\n\t\t\t\t\t\t\t\t\t\t\t!previewTable.classList.contains('wptb-table-preview-head') &&\n\t\t\t\t\t\t\t\t\t\t\t(tableContainerWidth > 480 || wptbPreviewTableMobile.column == 1)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tcreateNewTableIndic = false;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile.parentNode.removeChild(wptbPreviewTableMobile);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// if indicator of creating of table \"true\" - continue\n\t\t\t\t\t\t\t\t\tif (createNewTableIndic) {\n\t\t\t\t\t\t\t\t\t\t// create new table for mobile devices\n\t\t\t\t\t\t\t\t\t\tconst newTable = document.createElement('table');\n\t\t\t\t\t\t\t\t\t\tconst newTableTbody = document.createElement('tbody');\n\t\t\t\t\t\t\t\t\t\tnewTable.appendChild(newTableTbody);\n\n\t\t\t\t\t\t\t\t\t\t// add css class for new mobile table\n\t\t\t\t\t\t\t\t\t\tnewTable.classList.add('wptb-preview-table-mobile');\n\t\t\t\t\t\t\t\t\t\tconst infArr = previewTable.className.match(/wptb-element-main(.+)-(\\d+)/i);\n\t\t\t\t\t\t\t\t\t\tif (infArr && Array.isArray(infArr)) {\n\t\t\t\t\t\t\t\t\t\t\tnewTable.classList.add(infArr[0]);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// get number of rows for wptb-preview-table\n\t\t\t\t\t\t\t\t\t\tconst tableRows = previewTable.rows.length;\n\n\t\t\t\t\t\t\t\t\t\t// In this variable must have quantity columns of the last section of the new table\n\t\t\t\t\t\t\t\t\t\tlet newTableLastSectionFilledColumns;\n\n\t\t\t\t\t\t\t\t\t\t// set valuesIsSaved in 'false'\n\t\t\t\t\t\t\t\t\t\t// if the parameters newTableLastSectionFilledColumns get\n\t\t\t\t\t\t\t\t\t\t// optimal values, valuesIsSaved must have value 'true'\n\t\t\t\t\t\t\t\t\t\tlet valuesIsSaved = false;\n\n\t\t\t\t\t\t\t\t\t\t// check if top row is as \"header\"\n\t\t\t\t\t\t\t\t\t\tif (previewTable.classList.contains('wptb-table-preview-head')) {\n\t\t\t\t\t\t\t\t\t\t\t// quantity rows without top row\n\t\t\t\t\t\t\t\t\t\t\tconst tableRowsWithoutHeader = tableRows - 1;\n\n\t\t\t\t\t\t\t\t\t\t\t// this variable will have quantity columns in new mobile table\n\t\t\t\t\t\t\t\t\t\t\tlet newTableColumnsWithoutLeftHeader;\n\n\t\t\t\t\t\t\t\t\t\t\t// if quantity of rows in desktop table more than\n\t\t\t\t\t\t\t\t\t\t\t// quantity whole columns which are can placed in the container,\n\t\t\t\t\t\t\t\t\t\t\t// execute \"loop for\"\n\t\t\t\t\t\t\t\t\t\t\tif (tableRows > wholeColumnsInContainer) {\n\t\t\t\t\t\t\t\t\t\t\t\t// this code, —Åyclical reduces the number of columns in the new table,\n\t\t\t\t\t\t\t\t\t\t\t\t// until the optimal view is obtained so that the last block of the new table\n\t\t\t\t\t\t\t\t\t\t\t\t// has more than half the columns compared to the previous blocks\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < tableRowsWithoutHeader; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader = wholeColumnsInContainer - 1 - i;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableColumnsWithoutLeftHeader <= 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader = 1;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableRowsWithoutHeader % newTableColumnsWithoutLeftHeader;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableLastSectionFilledColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader <= 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 * newTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader > 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader <= 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1.8 * newTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader > 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader <= 18 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1.6 * newTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns <\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumnsWithoutLeftHeader = tableRowsWithoutHeader;\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns = 0;\n\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// if all necessary values ‚Äã‚Äãare available (  ), execute\n\t\t\t\t\t\t\t\t\t\t\tif (valuesIsSaved) {\n\t\t\t\t\t\t\t\t\t\t\t\tlet countRows;\n\t\t\t\t\t\t\t\t\t\t\t\tif (newTableColumnsWithoutLeftHeader > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountRows =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableColumns *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMath.ceil(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableRowsWithoutHeader / newTableColumnsWithoutLeftHeader\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountRows = tableColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst sectionNumberLast = Math.floor((countRows - 1) / tableColumns);\n\t\t\t\t\t\t\t\t\t\t\t\tlet tdStyles;\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let j = 0; j < countRows; j++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst sectionNumber = Math.floor(j / tableColumns);\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst tdLeftHeader = previewTable.rows[0].children[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tj - sectionNumber * tableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t].cloneNode(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet td;\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst rowFirstStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.rows[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!tdLeftHeader.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.backgroundColor =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trowFirstStyles.backgroundColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.width = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.height = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t// tdLeftHeader.removeAttribute('data-x-index');\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.removeAttribute('data-wptb-css-td-auto-width');\n\t\t\t\t\t\t\t\t\t\t\t\t\ttdStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.querySelector('td')\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (tdStyles.borderTopColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.borderColor = tdStyles.borderTopColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.borderColor = tdStyles.borderBottomColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (sectionNumber > 0 && j % tableColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdLeftHeader.style.borderTopWidth = '5px';\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttr.appendChild(tdLeftHeader);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet k = newTableColumnsWithoutLeftHeader * sectionNumber + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tk < newTableColumnsWithoutLeftHeader * (sectionNumber + 1) + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tk++\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (k < previewTable.rows.length) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd = previewTable.rows[k].children[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj - sectionNumber * tableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].cloneNode(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst rowKStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.rows[k]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!td.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.backgroundColor = rowKStyles.backgroundColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.width = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.height = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// td.removeAttribute('data-x-index');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.removeAttribute('data-wptb-css-td-auto-width');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd = document.createElement('td');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderWidth = '0px';\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.background = '#fff';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttdStyles = window.getComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewTable.querySelector('td')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (tdStyles.borderTopColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderColor = tdStyles.borderTopColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderColor = tdStyles.borderBottomColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (sectionNumber > 0 && j % tableColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttd.style.borderTopWidth = '5px';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttr.appendChild(td);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableTbody.appendChild(tr);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tlet newTableColumns;\n\t\t\t\t\t\t\t\t\t\t\tif (tableContainerWidth > 480) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < tableColumns; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns = wholeColumnsInContainer - i;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableColumns == 0) newTableColumns = 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns = tableColumns % newTableColumns;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (newTableLastSectionFilledColumns == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns <= 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns - 2 * newTableLastSectionFilledColumns <= 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns < newTableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns > 6 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns <= 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns - 1.8 * newTableLastSectionFilledColumns <= 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns < newTableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns > 12 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns <= 18 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns - 1.6 * newTableLastSectionFilledColumns <= 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns < newTableColumns\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableColumns = 1;\n\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns = 0;\n\t\t\t\t\t\t\t\t\t\t\t\tvaluesIsSaved = true;\n\t\t\t\t\t\t\t\t\t\t\t\tnewTable.column = 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tconst increaseRatioRows = Math.ceil(tableColumns / newTableColumns);\n\n\t\t\t\t\t\t\t\t\t\t\tconst newTableRows = increaseRatioRows * tableRows;\n\n\t\t\t\t\t\t\t\t\t\t\tif (valuesIsSaved) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < newTableRows; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst sectionNumber = Math.floor(i / tableRows);\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet jMax;\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet jStart;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsectionNumber != increaseRatioRows - 1 ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableLastSectionFilledColumns == 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjStart = sectionNumber * newTableColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjMax = newTableColumns * (1 + sectionNumber);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjStart = tableColumns - newTableLastSectionFilledColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjMax = tableColumns;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst row = previewTable.rows[i - sectionNumber * tableRows];\n\t\t\t\t\t\t\t\t\t\t\t\t\ttr.classList = row.classList;\n\t\t\t\t\t\t\t\t\t\t\t\t\ttr.style.backgroundColor = row.style.backgroundColor;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let j = jStart; j < jMax; j++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst newTd = row.children[j].cloneNode(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!newTd.style.backgroundColor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst rowStyles = window.getComputedStyle(row);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.style.backgroundColor = rowStyles.backgroundColor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.style.width = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.style.height = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// newTd.removeAttribute('data-x-index');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTd.removeAttribute('data-wptb-css-td-auto-width');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttr.appendChild(newTd);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewTableTbody.appendChild(tr);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tnewTable.dataset.wholeColumnsInContainer = wholeColumnsInContainer;\n\t\t\t\t\t\t\t\t\t\tconst images = newTable.querySelectorAll('[srcset]');\n\t\t\t\t\t\t\t\t\t\tif (images.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < images.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\timages[i].removeAttribute('srcset');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\twptbPreviewTableMobile = newTable;\n\t\t\t\t\t\t\t\t\t\ttableContainer.appendChild(newTable);\n\t\t\t\t\t\t\t\t\t\ttableReconstructed = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\ttableContainerMatrix &&\n\t\t\t\t\t\t\t\ttableContainerMatrix.classList.contains('wptb-matrix-hide')\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\ttableContainerMatrix.classList.remove('wptb-matrix-hide');\n\t\t\t\t\t\t\t\ttableReconstructed = true;\n\t\t\t\t\t\t\t\tpreviewTable.classList.remove('wptb-mobile-view-active');\n\t\t\t\t\t\t\t\twptbPreviewTableMobile = tableContainer.querySelector('.wptb-preview-table-mobile');\n\t\t\t\t\t\t\t\tif (wptbPreviewTableMobile) {\n\t\t\t\t\t\t\t\t\ttableContainer\n\t\t\t\t\t\t\t\t\t\t.getElementsByClassName('wptb-preview-table-mobile')[0]\n\t\t\t\t\t\t\t\t\t\t.classList.add('wptb-mobile-hide');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttableContainer.style.overflow = 'auto';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpreviewTable.style.minWidth = 'auto';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tWPTB_RecalculateIndexes(previewTable);\n\n\t\t\t\t\t\tif (tableReconstructed) {\n\t\t\t\t\t\t\tWPTB_RecalculateIndexes(wptbPreviewTableMobile);\n\t\t\t\t\t\t\tconst tabEvent = new CustomEvent('table:rebuilt', { detail: true, bubbles: true });\n\t\t\t\t\t\t\tpreviewTable.dispatchEvent(tabEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction wptb_tdDefaultWidth() {\n\t\t\tconst wptbTableContainers = document.getElementsByClassName('wptb-table-container');\n\t\t\t// let frontendEditLink = document.querySelectorAll( '.wptb-frontend-table-edit-link' );\n\t\t\tfor (let i = 0; i < wptbTableContainers.length; i++) {\n\t\t\t\tconst wptbTableContainer = wptbTableContainers[i];\n\n\t\t\t\twptbTableContainer.classList.add(`wptb-table-container-${i}`);\n\n\t\t\t\tlet table = wptbTableContainer.getElementsByClassName('wptb-preview-table');\n\t\t\t\tif (table.length > 0) {\n\t\t\t\t\ttable = table[0];\n\n\t\t\t\t\tif (table.dataset.wptbTableContainerMaxWidth) {\n\t\t\t\t\t\twptbTableContainer.style.maxWidth = `${table.dataset.wptbTableContainerMaxWidth}px`;\n\t\t\t\t\t}\n\t\t\t\t\ttable.classList.remove('wptb-table-preview-static-indic');\n\n\t\t\t\t\ttable.merging–°ellsHorizontally = false;\n\t\t\t\t\tconst tds = table.querySelectorAll('td');\n\t\t\t\t\tfor (let j = 0; j < tds.length; j++) {\n\t\t\t\t\t\tif (tds[j].colSpan > 1) {\n\t\t\t\t\t\t\ttable.merging–°ellsHorizontally = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst wptbTableContainerWidth = wptbTableContainer.offsetWidth;\n\n\t\t\t\t\tconst td = table.querySelector('td');\n\t\t\t\t\tconst tdStyleObj = window.getComputedStyle(td, null);\n\t\t\t\t\tconst tdBorderLeftWidth = tdStyleObj.getPropertyValue('border-left-width');\n\t\t\t\t\tconst tdBorderRightWidth = tdStyleObj.getPropertyValue('border-right-width');\n\t\t\t\t\tconst tdPaddingLeftWidth = tdStyleObj.getPropertyValue('padding-left');\n\t\t\t\t\tconst tdPaddingRightWidth = tdStyleObj.getPropertyValue('padding-left');\n\t\t\t\t\tconst tdPaddingCommon = parseFloat(tdPaddingLeftWidth, 10) + parseFloat(tdPaddingRightWidth, 10);\n\t\t\t\t\tconst tableTdBorderCommonWidth =\n\t\t\t\t\t\tparseFloat(tdBorderLeftWidth, 10) + parseFloat(tdBorderRightWidth, 10);\n\t\t\t\t\tconst { wptbTableTdsSumMaxWidth } = table.dataset;\n\t\t\t\t\tconst { wptbFixedWidthSize } = table.dataset;\n\t\t\t\t\tconst { wptbCellsWidthAutoCount } = table.dataset;\n\t\t\t\t\tlet styleElementCreate = false;\n\t\t\t\t\tlet tableTdWidthAuto;\n\t\t\t\t\tif (wptbTableTdsSumMaxWidth < wptbTableContainerWidth) {\n\t\t\t\t\t\tif (wptbCellsWidthAutoCount) {\n\t\t\t\t\t\t\ttable.style.minWidth = '100%';\n\n\t\t\t\t\t\t\t//                        if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.minWidth = wptbTableTdsSumMaxWidth + 'px';\n\t\t\t\t\t\t\t//                        }\n\n\t\t\t\t\t\t\tif (table.merging–°ellsHorizontally) {\n\t\t\t\t\t\t\t\ttable.style.width = 'auto';\n\t\t\t\t\t\t\t\tconst tableTdsWidthAutoCommon = wptbTableContainerWidth - wptbFixedWidthSize;\n\t\t\t\t\t\t\t\ttableTdWidthAuto = tableTdsWidthAutoCommon / wptbCellsWidthAutoCount;\n\t\t\t\t\t\t\t\ttableTdWidthAuto = tableTdWidthAuto - tdPaddingCommon - tableTdBorderCommonWidth;\n\t\t\t\t\t\t\t\tstyleElementCreate = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttable.style.width = '100%';\n\n\t\t\t\t\t\t\t\t//                            if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t\t\t//                                frontendEditLink[i].style.width = '100%';\n\t\t\t\t\t\t\t\t//                                frontendEditLink[i].style.maxWidth = '100%';\n\t\t\t\t\t\t\t\t//                            }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttable.style.width = 'auto';\n\t\t\t\t\t\t\ttable.style.minWidth = null;\n\t\t\t\t\t\t\ttable.style.maxWidth = `${wptbTableTdsSumMaxWidth}px`;\n\n\t\t\t\t\t\t\t//                        if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.width = null;\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.minWidth = null;\n\t\t\t\t\t\t\t//                            frontendEditLink[i].style.maxWidth = wptbTableTdsSumMaxWidth + 'px';\n\t\t\t\t\t\t\t//                        }\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttable.style.maxWidth = null;\n\t\t\t\t\t\ttable.style.minWidth = `${table.dataset.wptbTableTdsSumMaxWidth}px`;\n\t\t\t\t\t\ttable.style.width = 'auto';\n\t\t\t\t\t\ttableTdWidthAuto = table.dataset.wptbTdWidthAuto ? table.dataset.wptbTdWidthAuto : '100';\n\t\t\t\t\t\tstyleElementCreate = true;\n\n\t\t\t\t\t\t//                    if( frontendEditLink && frontendEditLink[i] ) {\n\t\t\t\t\t\t//                        frontendEditLink[i].style.maxWidth = '100%';\n\t\t\t\t\t\t//                        frontendEditLink[i].style.minWidth = table.dataset.wptbTableTdsSumMaxWidth + 'px';\n\t\t\t\t\t\t//                        frontendEditLink[i].style.width = null;\n\t\t\t\t\t\t//                    }\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { head } = document;\n\t\t\t\t\tif (head) {\n\t\t\t\t\t\tconst cssForTdsWidthAutoOld = head.querySelector(`style[data-wptb-td-auto-width-${i}=\"true\"]`);\n\n\t\t\t\t\t\tif (cssForTdsWidthAutoOld) {\n\t\t\t\t\t\t\thead.removeChild(cssForTdsWidthAutoOld);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (styleElementCreate) {\n\t\t\t\t\t\tconst cssForTdsWidthAuto = document.createElement('style');\n\t\t\t\t\t\tcssForTdsWidthAuto.setAttribute(`data-wptb-td-auto-width-${i}`, true);\n\t\t\t\t\t\tcssForTdsWidthAuto.innerHTML = `.wptb-table-container-${i} table td[data-wptb-css-td-auto-width=true]{width:${tableTdWidthAuto}px}`;\n\t\t\t\t\t\tif (head) {\n\t\t\t\t\t\t\thead.appendChild(cssForTdsWidthAuto);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// code for adding of old css styles for correct view\n\t\tconst elements = document.getElementsByClassName('wptb-ph-element');\n\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\tconst element = elements[i];\n\t\t\tif (element.classList.contains('wptb-list-item-container')) {\n\t\t\t\telement.classList.remove('wptb-list-item-container');\n\t\t\t\telement.classList.add('wptb-list-container');\n\t\t\t}\n\n\t\t\tif (element.classList.contains('wptb-button-container')) {\n\t\t\t\tconst infArr = element.className.match(/wptb-size-([A-Z]+)/i);\n\t\t\t\tif (infArr && Array.isArray(infArr)) {\n\t\t\t\t\tconst wptbSize = infArr[0];\n\t\t\t\t\tconst wptbSizeNew = wptbSize.toLowerCase();\n\n\t\t\t\t\telement.classList.remove(wptbSize);\n\n\t\t\t\t\tconst wptbButtonWrapper = element.querySelector('.wptb-button-wrapper');\n\t\t\t\t\tif (wptbButtonWrapper) {\n\t\t\t\t\t\twptbButtonWrapper.classList.add(wptbSizeNew);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// responsive setup\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tconst responsiveFront = new WPTB_ResponsiveFrontend({\n\t\t\tquery: '.wptb-preview-table',\n\t\t\tbindToResize: true,\n\t\t});\n\n\t\t// sorting table\n\t\tfunction sortingTable() {\n\t\t\tconst tables = document.querySelectorAll('.wptb-preview-table');\n\t\t\tfor (let i = 0; i < tables.length; i++) {\n\t\t\t\tconst sortableTable = new WPTB_SortableTable({ table: tables[i] });\n\t\t\t\tsortableTable.sortableTableInitialization(responsiveFront);\n\t\t\t}\n\t\t}\n\t\tsortingTable();\n\t\tvar responsiveFrontReady = new CustomEvent('responsive:front', {\n\t\t\tdetail: {\n\t\t\t\tresponsiveFront\n\t\t\t}\n\t\t});\n\t\tdocument.dispatchEvent(responsiveFrontReady);\n\t\tresponsiveFront.rebuildTables();\n\n\t\tWPTB_StylePass.init(WptbFrontendData.stylePass);\n\t});\n})();\n"]}