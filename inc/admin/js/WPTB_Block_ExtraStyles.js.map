{"version":3,"sources":["../WPTB_ExtraStyles.js","WPTB_Block_ExtraStyles.js"],"names":["UMD","key","context","factory","module","exports","self","global","WPTB_ExtraStyles","modes","builder","frontEnd","block","baseDocument","document","currentMode","generalStyles","tableQueries","formatStyles","styles","cleaned","replaceAll","prefixStyleRules","prefix","extraStyles","formattedStyles","splitStyles","split","prefixedStylesArray","map","regExp","RegExp","matches","exec","push","replace","join","applyGeneralStyles","baseElement","generalStylesheet","createElement","type","id","head","querySelector","appendChild","insertAdjacentElement","prefixedStyleRules","createTextNode","applyExtraStyle","tableElement","extraStylesRaw","dataset","wptbExtraStyles","styleIdPrefix","atob","getAttribute","match","tableId","styleId","styleElement","isThemeStylesDisabled","disableThemeStyles","uniqueClass","prefixedStyles","innerHTML","applyStyles","mode","allTables","Array","from","querySelectorAll","shadowDocument","shadowRoot"],"mappings":"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","file":"WPTB_Block_ExtraStyles.js","sourceRoot":"core/rollup-source","sourcesContent":["/**\n * Extra styles module to add custom css rules defined for individual tables.\n */\n(function UMD(key, context, factory) {\n\tif (typeof module !== 'undefined' && typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tcontext[key] = factory();\n\t}\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_ExtraStyles', self || global, () => {\n\t/**\n\t * Extra styles frontend manager.\n\t *\n\t * This component will be responsible for adding and maintaining extra styles defined for tables.\n\t *\n\t * @class\n\t */\n\t// eslint-disable-next-line camelcase\n\tfunction WPTB_ExtraStyles() {\n\t\t/**\n\t\t * Extra styles operation modes\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.modes = {\n\t\t\tbuilder: 'builder',\n\t\t\tfrontEnd: 'frontEnd',\n\t\t\tblock: 'block',\n\t\t};\n\n\t\t/**\n\t\t * Base document for DOM operations.\n\t\t *\n\t\t * @type {Document}\n\t\t */\n\t\tthis.baseDocument = document;\n\n\t\t/**\n\t\t * Current mode extra styles are operating on.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.currentMode = this.modes.builder;\n\n\t\t/**\n\t\t * General table styles.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.generalStyles = '';\n\n\t\t/**\n\t\t * HTML queries for table element in different plugin modes\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tconst tableQueries = {\n\t\t\t[this.modes.builder]: '.wptb-table-setup .wptb-preview-table',\n\t\t\t[this.modes.block]: '.wptb-block-table-setup .wptb-preview-table',\n\t\t\t[this.modes.frontEnd]: '.wptb-table-container .wptb-preview-table',\n\t\t};\n\n\t\t/**\n\t\t * Format styles.\n\t\t *\n\t\t * @param {string} styles styles\n\t\t * @return {string} formatted styles\n\t\t */\n\t\tconst formatStyles = (styles) => {\n\t\t\t// remove all newlines, comments and '!important' from style string to make it a one liner\n\t\t\tconst cleaned = styles.replaceAll(/(\\r?\\n)|(\\/\\*.+?\\*\\/)|(\\s*!important)/g, '');\n\n\t\t\t// add '!important' to all rules to override default style rules\n\t\t\treturn cleaned.replaceAll(';', ' !important;');\n\t\t};\n\n\t\t/**\n\t\t * Reform style rules so they will only affect given table id.\n\t\t *\n\t\t * @param {number} prefix prefix string that will be added to all rules\n\t\t * @param {string} extraStyles extra styles\n\t\t * @return {string} new style properties prefixed with table id class\n\t\t */\n\t\tconst prefixStyleRules = (prefix, extraStyles) => {\n\t\t\t// reformat styles into a suitable form for our regexp operations\n\t\t\tconst formattedStyles = formatStyles(extraStyles);\n\n\t\t\tconst splitStyles = formattedStyles.split('}');\n\t\t\tconst prefixedStylesArray = [];\n\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\tsplitStyles.map((split) => {\n\t\t\t\tconst regExp = new RegExp(/(.+?)\\{/g);\n\t\t\t\tconst matches = regExp.exec(split);\n\n\t\t\t\tif (matches) {\n\t\t\t\t\tprefixedStylesArray.push(split.replace(matches[1], `${prefix} ${matches[1]}`));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn `${prefixedStylesArray.join('}')}}`;\n\t\t};\n\n\t\t/**\n\t\t * Apply general styles to document.\n\t\t *\n\t\t * @param {string} generalStyles general style rules\n\t\t * @param {Node} baseElement element to use as base\n\t\t */\n\t\tconst applyGeneralStyles = (generalStyles, baseElement = null) => {\n\t\t\tconst generalStylesheet = document.createElement('style');\n\t\t\tgeneralStylesheet.type = 'text/css';\n\t\t\tgeneralStylesheet.id = 'wptb-general-styles';\n\n\t\t\tif (!baseElement) {\n\t\t\t\tconst head =\n\t\t\t\t\tthis.currentMode === this.modes.block ? this.baseDocument : this.baseDocument.querySelector('head');\n\n\t\t\t\thead.appendChild(generalStylesheet);\n\t\t\t} else {\n\t\t\t\tbaseElement.insertAdjacentElement('beforebegin', generalStylesheet);\n\t\t\t}\n\t\t\tconst prefixedStyleRules = prefixStyleRules('.wptb-preview-table', generalStyles);\n\t\t\tgeneralStylesheet.appendChild(document.createTextNode(prefixedStyleRules));\n\t\t};\n\n\t\t/**\n\t\t * Apply defined extra styles for given table element.\n\t\t *\n\t\t * @param {Element} tableElement table element\n\t\t */\n\t\tconst applyExtraStyle = (tableElement) => {\n\t\t\tconst extraStylesRaw = tableElement.dataset.wptbExtraStyles;\n\t\t\tconst styleIdPrefix = 'wptb-extra-styles-';\n\n\t\t\tif (extraStylesRaw) {\n\t\t\t\tconst extraStyles = atob(extraStylesRaw);\n\n\t\t\t\tconst [, tableId] = tableElement\n\t\t\t\t\t.getAttribute('class')\n\t\t\t\t\t.match(/wptb-element-main-table_setting-(?:startedid-)?(\\d+)/);\n\n\t\t\t\tconst styleId = styleIdPrefix + tableId;\n\n\t\t\t\tconst head = this.baseDocument.querySelector('head');\n\n\t\t\t\t// since stylesheets are created for frontend only once at startup, checking document head for any created style object will work even with theme disabled tables which at builder, they are not inside a shadow-root\n\t\t\t\tlet styleElement = head?.querySelector(`#${styleId}`);\n\n\t\t\t\t// if no style element is found, create one\n\t\t\t\tif (!styleElement) {\n\t\t\t\t\tstyleElement = document.createElement('style');\n\t\t\t\t\tstyleElement.type = 'text/css';\n\t\t\t\t\tstyleElement.id = styleId;\n\n\t\t\t\t\tconst isThemeStylesDisabled = tableElement.dataset.disableThemeStyles;\n\n\t\t\t\t\t// if theme styles are disabled, it means our table is residing inside a shadow-root, place style element inside shadow-root instead of document head\n\t\t\t\t\tif (\n\t\t\t\t\t\t(isThemeStylesDisabled && this.currentMode === this.modes.frontEnd) ||\n\t\t\t\t\t\tthis.currentMode === this.modes.block\n\t\t\t\t\t) {\n\t\t\t\t\t\ttableElement.insertAdjacentElement('beforebegin', styleElement);\n\t\t\t\t\t\tif (this.modes.frontEnd && this.generalStyles) {\n\t\t\t\t\t\t\tapplyGeneralStyles(this.generalStyles, tableElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thead.appendChild(styleElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst uniqueClass = `.wptb-element-main-table_setting-${tableId}`;\n\t\t\t\t// reform style rules so they will only affect the table they are assigned to\n\t\t\t\tconst prefixedStyles = prefixStyleRules(uniqueClass, extraStyles);\n\n\t\t\t\t// remove previous styles with updated ones\n\t\t\t\tstyleElement.innerHTML = '';\n\t\t\t\tstyleElement.appendChild(document.createTextNode(prefixedStyles));\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Apply extra styles to all available tables on DOM.\n\t\t *\n\t\t * @param {string} mode operation mode to apply styles\n\t\t * @param {string} generalStyles general style rules\n\t\t * @param {Object} baseDocument base document for DOM operations\n\t\t */\n\t\tthis.applyStyles = (mode = this.modes.frontEnd, generalStyles = null, baseDocument = document) => {\n\t\t\tthis.baseDocument = baseDocument;\n\t\t\tthis.currentMode = mode;\n\t\t\tthis.generalStyles = generalStyles;\n\n\t\t\tconst allTables = Array.from(this.baseDocument.querySelectorAll(tableQueries[mode]));\n\n\t\t\tif (allTables) {\n\t\t\t\tallTables.map(applyExtraStyle);\n\t\t\t}\n\n\t\t\t// only apply general styles on client frontend if any general styles are defined\n\t\t\tif ((mode === this.modes.frontEnd || mode === this.modes.block) && generalStyles) {\n\t\t\t\tapplyGeneralStyles(generalStyles);\n\t\t\t}\n\t\t};\n\t}\n\n\t// send a singleton instance of manager\n\treturn new WPTB_ExtraStyles();\n});\n","import WPTB_ExtraStyles from '../WPTB_ExtraStyles';\n\nconst shadowDocument = document.querySelector('#wptb-block-preview-base').shadowRoot;\n\nWPTB_ExtraStyles.applyStyles(WPTB_ExtraStyles.modes.block, null, shadowDocument);\n"]}