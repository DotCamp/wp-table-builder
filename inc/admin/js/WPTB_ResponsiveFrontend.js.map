{"version":3,"sources":["WPTB_ResponsiveFrontend.js"],"names":["assignToGlobal","key","context","factory","self","global","responsiveClassDefaultOptions","query","bindToResize","ResponsiveFront","options","elements","Array","from","document","querySelectorAll","getDirective","el","directiveString","dataset","wptbResponsiveDirectives","JSON","parse","atob","rebuildTable","directive","console","log","rebuildTables","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;AAGA,CAAC,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+C;AAC/C;AACAD,EAAAA,OAAO,CAACD,GAAD,CAAP,GAAeE,OAAO,EAAtB,CAF+C,CAG/C;AACA,CAJD,EAIG,yBAJH,EAI8BC,IAAI,IAAIC,MAJtC,EAI8C,YAAM;AACnD;AACA,MAAMC,6BAA6B,GAAG;AACrCC,IAAAA,KAAK,EAAE,qBAD8B;AAErCC,IAAAA,YAAY,EAAE;AAFuB,GAAtC;AAKA;;;;;;;AAMA,WAASC,eAAT,GAAuC;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACtC;AACA,SAAKA,OAAL,qBAAoBJ,6BAApB,MAAsDI,OAAtD;AAEA,SAAKC,QAAL,GAAgBC,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACC,gBAAT,CAA0B,KAAKL,OAAL,CAAaH,KAAvC,CAAX,CAAhB;AAEA;;;;;;;;AAOA,SAAKS,YAAL,GAAoB,UAACC,EAAD,EAAQ;AAC3B,UAAMC,eAAe,GAAGD,EAAE,CAACE,OAAH,CAAWC,wBAAnC;;AAEA,UAAI,CAACF,eAAL,EAAsB;AACrB,eAAO,IAAP;AACA;;AAED,aAAOG,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACL,eAAD,CAAf,CAAP;AACA,KARD;AAUA;;;;;;;;AAMA,SAAKM,YAAL,GAAoB,UAACP,EAAD,EAAQ;AAC3B,UAAMQ,SAAS,GAAG,KAAI,CAACT,YAAL,CAAkBC,EAAlB,CAAlB,CAD2B,CAG3B;;;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,KALD;AAOA;;;;;AAGA,SAAKG,aAAL,GAAqB,YAAM;AAC1B,MAAA,KAAI,CAACjB,QAAL,CAAckB,GAAd,CAAkB,KAAI,CAACL,YAAvB;AACA,KAFD;;AAIA,WAAO;AAAEI,MAAAA,aAAa,EAAE,KAAKA;AAAtB,KAAP;AACA;;AAED,SAAOnB,eAAP;AACA,CAhED","file":"WPTB_ResponsiveFrontend.js","sourceRoot":"core/rollup-source","sourcesContent":["// TODO [erdembircan] This function should be prepared in a way that can be both used in front end and table builder to cut out two headiness in the app. This way, any change/update/improvement that will be done to this script, will be reflected both to builder and frontend\n/**\n * Responsive class assignment for frontend operations.\n */\n(function assignToGlobal(key, context, factory) {\n\t// eslint-disable-next-line no-param-reassign\n\tcontext[key] = factory();\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_ResponsiveFrontend', self || global, () => {\n\t// default options for responsive class\n\tconst responsiveClassDefaultOptions = {\n\t\tquery: '.wptb-preview-table',\n\t\tbindToResize: false,\n\t};\n\n\t/**\n\t * Class for handling operations related to responsive functionalities of tables.\n\t *\n\t * @constructor\n\t * @param {object} options options object\n\t */\n\tfunction ResponsiveFront(options = {}) {\n\t\t// merge default options with user sent options\n\t\tthis.options = { ...responsiveClassDefaultOptions, ...options };\n\n\t\tthis.elements = Array.from(document.querySelectorAll(this.options.query));\n\n\t\t/**\n\t\t * Get responsive directives of table element.\n\t\t *\n\t\t * @private\n\t\t * @param {HTMLElement} table element\n\t\t * @return {object|null} JSON representation of the directive element, if not available null will be returned\n\t\t */\n\t\tthis.getDirective = (el) => {\n\t\t\tconst directiveString = el.dataset.wptbResponsiveDirectives;\n\n\t\t\tif (!directiveString) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn JSON.parse(atob(directiveString));\n\t\t};\n\n\t\t/**\n\t\t * Rebuild table according to its responsive directives.\n\t\t *\n\t\t * @private\n\t\t * @param {HTMLElement} el table element\n\t\t */\n\t\tthis.rebuildTable = (el) => {\n\t\t\tconst directive = this.getDirective(el);\n\n\t\t\t// TODO [erdembircan] remove for production\n\t\t\tconsole.log(directive);\n\t\t};\n\n\t\t/**\n\t\t * Batch rebuild tables.\n\t\t */\n\t\tthis.rebuildTables = () => {\n\t\t\tthis.elements.map(this.rebuildTable);\n\t\t};\n\n\t\treturn { rebuildTables: this.rebuildTables };\n\t}\n\n\treturn ResponsiveFront;\n});\n"]}