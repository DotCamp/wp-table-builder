{"version":3,"sources":["WPTB_IconManager.js"],"names":["assignToGlobal","key","context","factory","self","global","iconManager","IconManager","list","Error","iconList","cachedIcons","prepareIcon","iconSvgString","extraClass","stringifiedVersion","iconWrapper","document","createElement","Array","isArray","map","eClass","classList","add","innerHTML","outerHTML","getCachedIcon","iconName","getStringifiedVersion","addToCache","stringifiedIcon","getIconList","getIcon","Promise","res","rej","cachedIcon","fetch","then","resp","ok","text","iconString","error","catch","err","getIconUrl","iconUrl","wptb_admin_object"],"mappings":"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","file":"WPTB_IconManager.js","sourceRoot":"core/rollup-source","sourcesContent":["/**\n * Assign icon manager to global space.\n *\n * @param {string} key global key\n * @param {Object} context global context\n * @param {Function} factory factory function\n */\n(function assignToGlobal(key, context, factory) {\n\t// eslint-disable-next-line no-param-reassign\n\tcontext[key] = factory();\n\t// eslint-disable-next-line no-restricted-globals\n})('WPTB_IconManager', self || global, function iconManager() {\n\t/**\n\t * Frontend icon manager for WPTB builder.\n\t *\n\t * @param {Object} list all icon list\n\t * @class\n\t */\n\tfunction IconManager(list) {\n\t\tif (!list) {\n\t\t\tthrow new Error('no icon list is defined for WPTB_IconManager instance');\n\t\t}\n\t\tconst iconList = list;\n\n\t\t/**\n\t\t * Cached icons.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tconst cachedIcons = {};\n\n\t\t/**\n\t\t * Prepare an icon with a wrapper.\n\t\t *\n\t\t * @param {string} iconSvgString string representation of icon\n\t\t * @param {Array | string | null} extraClass name of extra class[es] to apply to icon wrapper\n\t\t * @param {boolean} stringifiedVersion get stringified html version of icon\n\t\t * @return {HTMLDivElement} created icon wrapper\n\t\t */\n\t\tconst prepareIcon = (iconSvgString, extraClass = null, stringifiedVersion = false) => {\n\t\t\tconst iconWrapper = document.createElement('div');\n\n\t\t\t// if an extra class is defined, add it to icon wrapper\n\t\t\tif (extraClass) {\n\t\t\t\tif (!Array.isArray(extraClass)) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\textraClass = [extraClass];\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t\textraClass.map((eClass) => {\n\t\t\t\t\ticonWrapper.classList.add(eClass);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ticonWrapper.innerHTML = iconSvgString;\n\n\t\t\treturn stringifiedVersion ? iconWrapper.outerHTML : iconWrapper;\n\t\t};\n\n\t\t/**\n\t\t * Get a cached icon.\n\t\t *\n\t\t * @param {string} iconName name of the icon\n\t\t * @param {string | Array | null} extraClass extra class name[s] to add to icon wrapper\n\t\t * @param {boolean | null} getStringifiedVersion get stringified version of the icon\n\t\t * @return {null | Element} Prepared cached icon or null if no cached version is found\n\t\t */\n\t\tconst getCachedIcon = (iconName, extraClass = null, getStringifiedVersion = false) => {\n\t\t\tif (cachedIcons[iconName]) {\n\t\t\t\treturn prepareIcon(cachedIcons[iconName], extraClass, getStringifiedVersion);\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Add an icon to cache.\n\t\t *\n\t\t * @param {string} iconName name of the icon to be stored\n\t\t * @param {string} stringifiedIcon stringified version of the icon\n\t\t */\n\t\tconst addToCache = (iconName, stringifiedIcon) => {\n\t\t\tcachedIcons[iconName] = stringifiedIcon;\n\t\t};\n\n\t\t/**\n\t\t * Get a list of all available icons.\n\t\t *\n\t\t * @return {Object} icon list\n\t\t */\n\t\tthis.getIconList = () => {\n\t\t\treturn iconList;\n\t\t};\n\n\t\t/**\n\t\t * Get an icon.\n\t\t *\n\t\t * Icons sent with this function are wrapped with a 'div' element.\n\t\t *\n\t\t * @param {string} iconName name of the icon\n\t\t * @param {string | Array | null} extraClass extra class[es] to add to icon wrapper\n\t\t * @param {boolean} getStringifiedVersion get stringified version of icon\n\t\t * @return {Promise<void>} a Promise that will be resolved when icon is fetched from server\n\t\t */\n\t\tthis.getIcon = (iconName, extraClass = null, getStringifiedVersion = false) => {\n\t\t\t// eslint-disable-next-line consistent-return\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t// if cached version is found, return that version\n\t\t\t\tconst cachedIcon = getCachedIcon(iconName, extraClass, getStringifiedVersion);\n\t\t\t\tif (cachedIcon) {\n\t\t\t\t\treturn res(cachedIcon);\n\t\t\t\t}\n\n\t\t\t\tif (iconList[iconName]) {\n\t\t\t\t\treturn fetch(iconList[iconName])\n\t\t\t\t\t\t.then((resp) => {\n\t\t\t\t\t\t\tif (resp.ok) {\n\t\t\t\t\t\t\t\treturn resp.text();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthrow new Error(`an error occurred while fetching icon [${iconName}]`);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((iconString) => {\n\t\t\t\t\t\t\tif (iconString.error) {\n\t\t\t\t\t\t\t\tthrow new Error(`an error occurred while fetching icon [${iconName}]`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// add icon to cache\n\t\t\t\t\t\t\taddToCache(iconName, iconString);\n\n\t\t\t\t\t\t\treturn res(prepareIcon(iconString, extraClass, getStringifiedVersion));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\treturn rej(new Error(err));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn rej(new Error(`no icon found with the given name of [${iconName}]`));\n\t\t\t});\n\t\t};\n\t\tthis.getIconUrl = (iconName) => {\n\t\t\tlet iconUrl = null;\n\n\t\t\tif (iconList[iconName]) {\n\t\t\t\ticonUrl = iconList[iconName];\n\t\t\t}\n\n\t\t\treturn iconUrl;\n\t\t};\n\t}\n\n\t// eslint-disable-next-line no-restricted-globals\n\tconst context = self || global;\n\tif (context.wptb_admin_object) {\n\t\treturn new IconManager(wptb_admin_object.iconManager);\n\t}\n\n\treturn null;\n});\n"]}